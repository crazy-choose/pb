// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: instrument.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_instrument_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_instrument_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_instrument_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_instrument_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_instrument_2eproto;
class InstrumentInfo;
struct InstrumentInfoDefaultTypeInternal;
extern InstrumentInfoDefaultTypeInternal _InstrumentInfo_default_instance_;
class InstrumentStatus;
struct InstrumentStatusDefaultTypeInternal;
extern InstrumentStatusDefaultTypeInternal _InstrumentStatus_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::InstrumentInfo* Arena::CreateMaybeMessage<::InstrumentInfo>(Arena*);
template<> ::InstrumentStatus* Arena::CreateMaybeMessage<::InstrumentStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class InstrumentInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InstrumentInfo) */ {
 public:
  inline InstrumentInfo() : InstrumentInfo(nullptr) {}
  ~InstrumentInfo() override;
  explicit constexpr InstrumentInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InstrumentInfo(const InstrumentInfo& from);
  InstrumentInfo(InstrumentInfo&& from) noexcept
    : InstrumentInfo() {
    *this = ::std::move(from);
  }

  inline InstrumentInfo& operator=(const InstrumentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstrumentInfo& operator=(InstrumentInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InstrumentInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const InstrumentInfo* internal_default_instance() {
    return reinterpret_cast<const InstrumentInfo*>(
               &_InstrumentInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InstrumentInfo& a, InstrumentInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(InstrumentInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstrumentInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InstrumentInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InstrumentInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InstrumentInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InstrumentInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstrumentInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InstrumentInfo";
  }
  protected:
  explicit InstrumentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReserve1FieldNumber = 1,
    kExchangeIdFieldNumber = 2,
    kInstrumentNameFieldNumber = 3,
    kReserve2FieldNumber = 4,
    kReserve3FieldNumber = 5,
    kProductClassFieldNumber = 6,
    kCreateDateFieldNumber = 15,
    kOpenDateFieldNumber = 16,
    kExpireDateFieldNumber = 17,
    kStartDelivDateFieldNumber = 18,
    kEndDelivDateFieldNumber = 19,
    kInstLifePhaseFieldNumber = 20,
    kPositionTypeFieldNumber = 22,
    kPositionDateTypeFieldNumber = 23,
    kMaxMarginSideAlgorithmFieldNumber = 26,
    kReserve4FieldNumber = 27,
    kOptionsTypeFieldNumber = 29,
    kCombinationTypeFieldNumber = 31,
    kInstrumentIdFieldNumber = 32,
    kExchangeInstIdFieldNumber = 33,
    kProductIdFieldNumber = 34,
    kUnderlyingInstrIdFieldNumber = 35,
    kDeliveryYearFieldNumber = 7,
    kDeliveryMonthFieldNumber = 8,
    kMaxMarketOrderVolumeFieldNumber = 9,
    kMinMarketOrderVolumeFieldNumber = 10,
    kMaxLimitOrderVolumeFieldNumber = 11,
    kMinLimitOrderVolumeFieldNumber = 12,
    kPriceTickFieldNumber = 14,
    kVolumeMultipleFieldNumber = 13,
    kIsTradingFieldNumber = 21,
    kLongMarginRatioFieldNumber = 24,
    kShortMarginRatioFieldNumber = 25,
    kStrikePriceFieldNumber = 28,
    kUnderlyingMultipleFieldNumber = 30,
  };
  // string reserve_1 = 1;
  void clear_reserve_1();
  const std::string& reserve_1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserve_1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserve_1();
  PROTOBUF_NODISCARD std::string* release_reserve_1();
  void set_allocated_reserve_1(std::string* reserve_1);
  private:
  const std::string& _internal_reserve_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserve_1(const std::string& value);
  std::string* _internal_mutable_reserve_1();
  public:

  // string exchange_id = 2;
  void clear_exchange_id();
  const std::string& exchange_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exchange_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exchange_id();
  PROTOBUF_NODISCARD std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* exchange_id);
  private:
  const std::string& _internal_exchange_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_id(const std::string& value);
  std::string* _internal_mutable_exchange_id();
  public:

  // string instrument_name = 3;
  void clear_instrument_name();
  const std::string& instrument_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_name();
  PROTOBUF_NODISCARD std::string* release_instrument_name();
  void set_allocated_instrument_name(std::string* instrument_name);
  private:
  const std::string& _internal_instrument_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_name(const std::string& value);
  std::string* _internal_mutable_instrument_name();
  public:

  // string reserve_2 = 4;
  void clear_reserve_2();
  const std::string& reserve_2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserve_2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserve_2();
  PROTOBUF_NODISCARD std::string* release_reserve_2();
  void set_allocated_reserve_2(std::string* reserve_2);
  private:
  const std::string& _internal_reserve_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserve_2(const std::string& value);
  std::string* _internal_mutable_reserve_2();
  public:

  // string reserve_3 = 5;
  void clear_reserve_3();
  const std::string& reserve_3() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserve_3(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserve_3();
  PROTOBUF_NODISCARD std::string* release_reserve_3();
  void set_allocated_reserve_3(std::string* reserve_3);
  private:
  const std::string& _internal_reserve_3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserve_3(const std::string& value);
  std::string* _internal_mutable_reserve_3();
  public:

  // string product_class = 6;
  void clear_product_class();
  const std::string& product_class() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_product_class(ArgT0&& arg0, ArgT... args);
  std::string* mutable_product_class();
  PROTOBUF_NODISCARD std::string* release_product_class();
  void set_allocated_product_class(std::string* product_class);
  private:
  const std::string& _internal_product_class() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_product_class(const std::string& value);
  std::string* _internal_mutable_product_class();
  public:

  // string create_date = 15;
  void clear_create_date();
  const std::string& create_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_create_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_create_date();
  PROTOBUF_NODISCARD std::string* release_create_date();
  void set_allocated_create_date(std::string* create_date);
  private:
  const std::string& _internal_create_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_date(const std::string& value);
  std::string* _internal_mutable_create_date();
  public:

  // string open_date = 16;
  void clear_open_date();
  const std::string& open_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_open_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_open_date();
  PROTOBUF_NODISCARD std::string* release_open_date();
  void set_allocated_open_date(std::string* open_date);
  private:
  const std::string& _internal_open_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_open_date(const std::string& value);
  std::string* _internal_mutable_open_date();
  public:

  // string expire_date = 17;
  void clear_expire_date();
  const std::string& expire_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_expire_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_expire_date();
  PROTOBUF_NODISCARD std::string* release_expire_date();
  void set_allocated_expire_date(std::string* expire_date);
  private:
  const std::string& _internal_expire_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expire_date(const std::string& value);
  std::string* _internal_mutable_expire_date();
  public:

  // string start_deliv_date = 18;
  void clear_start_deliv_date();
  const std::string& start_deliv_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start_deliv_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start_deliv_date();
  PROTOBUF_NODISCARD std::string* release_start_deliv_date();
  void set_allocated_start_deliv_date(std::string* start_deliv_date);
  private:
  const std::string& _internal_start_deliv_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start_deliv_date(const std::string& value);
  std::string* _internal_mutable_start_deliv_date();
  public:

  // string end_deliv_date = 19;
  void clear_end_deliv_date();
  const std::string& end_deliv_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_end_deliv_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_end_deliv_date();
  PROTOBUF_NODISCARD std::string* release_end_deliv_date();
  void set_allocated_end_deliv_date(std::string* end_deliv_date);
  private:
  const std::string& _internal_end_deliv_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_end_deliv_date(const std::string& value);
  std::string* _internal_mutable_end_deliv_date();
  public:

  // string inst_life_phase = 20;
  void clear_inst_life_phase();
  const std::string& inst_life_phase() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_inst_life_phase(ArgT0&& arg0, ArgT... args);
  std::string* mutable_inst_life_phase();
  PROTOBUF_NODISCARD std::string* release_inst_life_phase();
  void set_allocated_inst_life_phase(std::string* inst_life_phase);
  private:
  const std::string& _internal_inst_life_phase() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inst_life_phase(const std::string& value);
  std::string* _internal_mutable_inst_life_phase();
  public:

  // string position_type = 22;
  void clear_position_type();
  const std::string& position_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_position_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_position_type();
  PROTOBUF_NODISCARD std::string* release_position_type();
  void set_allocated_position_type(std::string* position_type);
  private:
  const std::string& _internal_position_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_position_type(const std::string& value);
  std::string* _internal_mutable_position_type();
  public:

  // string position_date_type = 23;
  void clear_position_date_type();
  const std::string& position_date_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_position_date_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_position_date_type();
  PROTOBUF_NODISCARD std::string* release_position_date_type();
  void set_allocated_position_date_type(std::string* position_date_type);
  private:
  const std::string& _internal_position_date_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_position_date_type(const std::string& value);
  std::string* _internal_mutable_position_date_type();
  public:

  // string max_margin_side_algorithm = 26;
  void clear_max_margin_side_algorithm();
  const std::string& max_margin_side_algorithm() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_max_margin_side_algorithm(ArgT0&& arg0, ArgT... args);
  std::string* mutable_max_margin_side_algorithm();
  PROTOBUF_NODISCARD std::string* release_max_margin_side_algorithm();
  void set_allocated_max_margin_side_algorithm(std::string* max_margin_side_algorithm);
  private:
  const std::string& _internal_max_margin_side_algorithm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_max_margin_side_algorithm(const std::string& value);
  std::string* _internal_mutable_max_margin_side_algorithm();
  public:

  // string reserve_4 = 27;
  void clear_reserve_4();
  const std::string& reserve_4() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserve_4(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserve_4();
  PROTOBUF_NODISCARD std::string* release_reserve_4();
  void set_allocated_reserve_4(std::string* reserve_4);
  private:
  const std::string& _internal_reserve_4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserve_4(const std::string& value);
  std::string* _internal_mutable_reserve_4();
  public:

  // string options_type = 29;
  void clear_options_type();
  const std::string& options_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_options_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_options_type();
  PROTOBUF_NODISCARD std::string* release_options_type();
  void set_allocated_options_type(std::string* options_type);
  private:
  const std::string& _internal_options_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_options_type(const std::string& value);
  std::string* _internal_mutable_options_type();
  public:

  // string combination_type = 31;
  void clear_combination_type();
  const std::string& combination_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_combination_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_combination_type();
  PROTOBUF_NODISCARD std::string* release_combination_type();
  void set_allocated_combination_type(std::string* combination_type);
  private:
  const std::string& _internal_combination_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_combination_type(const std::string& value);
  std::string* _internal_mutable_combination_type();
  public:

  // string instrument_id = 32;
  void clear_instrument_id();
  const std::string& instrument_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_id();
  PROTOBUF_NODISCARD std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* instrument_id);
  private:
  const std::string& _internal_instrument_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(const std::string& value);
  std::string* _internal_mutable_instrument_id();
  public:

  // string exchange_inst_id = 33;
  void clear_exchange_inst_id();
  const std::string& exchange_inst_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exchange_inst_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exchange_inst_id();
  PROTOBUF_NODISCARD std::string* release_exchange_inst_id();
  void set_allocated_exchange_inst_id(std::string* exchange_inst_id);
  private:
  const std::string& _internal_exchange_inst_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_inst_id(const std::string& value);
  std::string* _internal_mutable_exchange_inst_id();
  public:

  // string product_id = 34;
  void clear_product_id();
  const std::string& product_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_product_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_product_id();
  PROTOBUF_NODISCARD std::string* release_product_id();
  void set_allocated_product_id(std::string* product_id);
  private:
  const std::string& _internal_product_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_product_id(const std::string& value);
  std::string* _internal_mutable_product_id();
  public:

  // string underlying_instr_id = 35;
  void clear_underlying_instr_id();
  const std::string& underlying_instr_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_underlying_instr_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_underlying_instr_id();
  PROTOBUF_NODISCARD std::string* release_underlying_instr_id();
  void set_allocated_underlying_instr_id(std::string* underlying_instr_id);
  private:
  const std::string& _internal_underlying_instr_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_underlying_instr_id(const std::string& value);
  std::string* _internal_mutable_underlying_instr_id();
  public:

  // int32 delivery_year = 7;
  void clear_delivery_year();
  int32_t delivery_year() const;
  void set_delivery_year(int32_t value);
  private:
  int32_t _internal_delivery_year() const;
  void _internal_set_delivery_year(int32_t value);
  public:

  // int32 delivery_month = 8;
  void clear_delivery_month();
  int32_t delivery_month() const;
  void set_delivery_month(int32_t value);
  private:
  int32_t _internal_delivery_month() const;
  void _internal_set_delivery_month(int32_t value);
  public:

  // int32 max_market_order_volume = 9;
  void clear_max_market_order_volume();
  int32_t max_market_order_volume() const;
  void set_max_market_order_volume(int32_t value);
  private:
  int32_t _internal_max_market_order_volume() const;
  void _internal_set_max_market_order_volume(int32_t value);
  public:

  // int32 min_market_order_volume = 10;
  void clear_min_market_order_volume();
  int32_t min_market_order_volume() const;
  void set_min_market_order_volume(int32_t value);
  private:
  int32_t _internal_min_market_order_volume() const;
  void _internal_set_min_market_order_volume(int32_t value);
  public:

  // int32 max_limit_order_volume = 11;
  void clear_max_limit_order_volume();
  int32_t max_limit_order_volume() const;
  void set_max_limit_order_volume(int32_t value);
  private:
  int32_t _internal_max_limit_order_volume() const;
  void _internal_set_max_limit_order_volume(int32_t value);
  public:

  // int32 min_limit_order_volume = 12;
  void clear_min_limit_order_volume();
  int32_t min_limit_order_volume() const;
  void set_min_limit_order_volume(int32_t value);
  private:
  int32_t _internal_min_limit_order_volume() const;
  void _internal_set_min_limit_order_volume(int32_t value);
  public:

  // double price_tick = 14;
  void clear_price_tick();
  double price_tick() const;
  void set_price_tick(double value);
  private:
  double _internal_price_tick() const;
  void _internal_set_price_tick(double value);
  public:

  // int32 volume_multiple = 13;
  void clear_volume_multiple();
  int32_t volume_multiple() const;
  void set_volume_multiple(int32_t value);
  private:
  int32_t _internal_volume_multiple() const;
  void _internal_set_volume_multiple(int32_t value);
  public:

  // int32 is_trading = 21;
  void clear_is_trading();
  int32_t is_trading() const;
  void set_is_trading(int32_t value);
  private:
  int32_t _internal_is_trading() const;
  void _internal_set_is_trading(int32_t value);
  public:

  // double long_margin_ratio = 24;
  void clear_long_margin_ratio();
  double long_margin_ratio() const;
  void set_long_margin_ratio(double value);
  private:
  double _internal_long_margin_ratio() const;
  void _internal_set_long_margin_ratio(double value);
  public:

  // double short_margin_ratio = 25;
  void clear_short_margin_ratio();
  double short_margin_ratio() const;
  void set_short_margin_ratio(double value);
  private:
  double _internal_short_margin_ratio() const;
  void _internal_set_short_margin_ratio(double value);
  public:

  // double strike_price = 28;
  void clear_strike_price();
  double strike_price() const;
  void set_strike_price(double value);
  private:
  double _internal_strike_price() const;
  void _internal_set_strike_price(double value);
  public:

  // double underlying_multiple = 30;
  void clear_underlying_multiple();
  double underlying_multiple() const;
  void set_underlying_multiple(double value);
  private:
  double _internal_underlying_multiple() const;
  void _internal_set_underlying_multiple(double value);
  public:

  // @@protoc_insertion_point(class_scope:InstrumentInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserve_1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserve_2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserve_3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_class_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr open_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expire_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_deliv_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_deliv_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inst_life_phase_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr position_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr position_date_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr max_margin_side_algorithm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserve_4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr options_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr combination_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_inst_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr underlying_instr_id_;
  int32_t delivery_year_;
  int32_t delivery_month_;
  int32_t max_market_order_volume_;
  int32_t min_market_order_volume_;
  int32_t max_limit_order_volume_;
  int32_t min_limit_order_volume_;
  double price_tick_;
  int32_t volume_multiple_;
  int32_t is_trading_;
  double long_margin_ratio_;
  double short_margin_ratio_;
  double strike_price_;
  double underlying_multiple_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_instrument_2eproto;
};
// -------------------------------------------------------------------

class InstrumentStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InstrumentStatus) */ {
 public:
  inline InstrumentStatus() : InstrumentStatus(nullptr) {}
  ~InstrumentStatus() override;
  explicit constexpr InstrumentStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InstrumentStatus(const InstrumentStatus& from);
  InstrumentStatus(InstrumentStatus&& from) noexcept
    : InstrumentStatus() {
    *this = ::std::move(from);
  }

  inline InstrumentStatus& operator=(const InstrumentStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstrumentStatus& operator=(InstrumentStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InstrumentStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const InstrumentStatus* internal_default_instance() {
    return reinterpret_cast<const InstrumentStatus*>(
               &_InstrumentStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InstrumentStatus& a, InstrumentStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(InstrumentStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstrumentStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InstrumentStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InstrumentStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InstrumentStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InstrumentStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstrumentStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InstrumentStatus";
  }
  protected:
  explicit InstrumentStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExchangeIdFieldNumber = 1,
    kReserve1FieldNumber = 2,
    kSettlementGroupIdFieldNumber = 3,
    kReserve2FieldNumber = 4,
    kInstrumentStatusFieldNumber = 5,
    kEnterTimeFieldNumber = 7,
    kEnterReasonFieldNumber = 8,
    kExchangeInstIdFieldNumber = 9,
    kInstrumentIdFieldNumber = 10,
    kStatusZnFieldNumber = 11,
    kPreStatusFieldNumber = 13,
    kPreEnterTimeFieldNumber = 14,
    kPreEnterReasonFieldNumber = 15,
    kTradingSegmentSnFieldNumber = 6,
    kPreTradingSegmentSnFieldNumber = 12,
  };
  // string exchange_id = 1;
  void clear_exchange_id();
  const std::string& exchange_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exchange_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exchange_id();
  PROTOBUF_NODISCARD std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* exchange_id);
  private:
  const std::string& _internal_exchange_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_id(const std::string& value);
  std::string* _internal_mutable_exchange_id();
  public:

  // string reserve_1 = 2;
  void clear_reserve_1();
  const std::string& reserve_1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserve_1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserve_1();
  PROTOBUF_NODISCARD std::string* release_reserve_1();
  void set_allocated_reserve_1(std::string* reserve_1);
  private:
  const std::string& _internal_reserve_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserve_1(const std::string& value);
  std::string* _internal_mutable_reserve_1();
  public:

  // string settlement_group_id = 3;
  void clear_settlement_group_id();
  const std::string& settlement_group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_settlement_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_settlement_group_id();
  PROTOBUF_NODISCARD std::string* release_settlement_group_id();
  void set_allocated_settlement_group_id(std::string* settlement_group_id);
  private:
  const std::string& _internal_settlement_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_settlement_group_id(const std::string& value);
  std::string* _internal_mutable_settlement_group_id();
  public:

  // string reserve_2 = 4;
  void clear_reserve_2();
  const std::string& reserve_2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserve_2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserve_2();
  PROTOBUF_NODISCARD std::string* release_reserve_2();
  void set_allocated_reserve_2(std::string* reserve_2);
  private:
  const std::string& _internal_reserve_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserve_2(const std::string& value);
  std::string* _internal_mutable_reserve_2();
  public:

  // string instrument_status = 5;
  void clear_instrument_status();
  const std::string& instrument_status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_status();
  PROTOBUF_NODISCARD std::string* release_instrument_status();
  void set_allocated_instrument_status(std::string* instrument_status);
  private:
  const std::string& _internal_instrument_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_status(const std::string& value);
  std::string* _internal_mutable_instrument_status();
  public:

  // string enter_time = 7;
  void clear_enter_time();
  const std::string& enter_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_enter_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_enter_time();
  PROTOBUF_NODISCARD std::string* release_enter_time();
  void set_allocated_enter_time(std::string* enter_time);
  private:
  const std::string& _internal_enter_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_enter_time(const std::string& value);
  std::string* _internal_mutable_enter_time();
  public:

  // string enter_reason = 8;
  void clear_enter_reason();
  const std::string& enter_reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_enter_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_enter_reason();
  PROTOBUF_NODISCARD std::string* release_enter_reason();
  void set_allocated_enter_reason(std::string* enter_reason);
  private:
  const std::string& _internal_enter_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_enter_reason(const std::string& value);
  std::string* _internal_mutable_enter_reason();
  public:

  // string exchange_inst_id = 9;
  void clear_exchange_inst_id();
  const std::string& exchange_inst_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exchange_inst_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exchange_inst_id();
  PROTOBUF_NODISCARD std::string* release_exchange_inst_id();
  void set_allocated_exchange_inst_id(std::string* exchange_inst_id);
  private:
  const std::string& _internal_exchange_inst_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_inst_id(const std::string& value);
  std::string* _internal_mutable_exchange_inst_id();
  public:

  // string instrument_id = 10;
  void clear_instrument_id();
  const std::string& instrument_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_id();
  PROTOBUF_NODISCARD std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* instrument_id);
  private:
  const std::string& _internal_instrument_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(const std::string& value);
  std::string* _internal_mutable_instrument_id();
  public:

  // string status_zn = 11;
  void clear_status_zn();
  const std::string& status_zn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status_zn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status_zn();
  PROTOBUF_NODISCARD std::string* release_status_zn();
  void set_allocated_status_zn(std::string* status_zn);
  private:
  const std::string& _internal_status_zn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status_zn(const std::string& value);
  std::string* _internal_mutable_status_zn();
  public:

  // string pre_status = 13;
  void clear_pre_status();
  const std::string& pre_status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pre_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pre_status();
  PROTOBUF_NODISCARD std::string* release_pre_status();
  void set_allocated_pre_status(std::string* pre_status);
  private:
  const std::string& _internal_pre_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pre_status(const std::string& value);
  std::string* _internal_mutable_pre_status();
  public:

  // string pre_enter_time = 14;
  void clear_pre_enter_time();
  const std::string& pre_enter_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pre_enter_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pre_enter_time();
  PROTOBUF_NODISCARD std::string* release_pre_enter_time();
  void set_allocated_pre_enter_time(std::string* pre_enter_time);
  private:
  const std::string& _internal_pre_enter_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pre_enter_time(const std::string& value);
  std::string* _internal_mutable_pre_enter_time();
  public:

  // string pre_enter_reason = 15;
  void clear_pre_enter_reason();
  const std::string& pre_enter_reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pre_enter_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pre_enter_reason();
  PROTOBUF_NODISCARD std::string* release_pre_enter_reason();
  void set_allocated_pre_enter_reason(std::string* pre_enter_reason);
  private:
  const std::string& _internal_pre_enter_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pre_enter_reason(const std::string& value);
  std::string* _internal_mutable_pre_enter_reason();
  public:

  // int32 trading_segment_sn = 6;
  void clear_trading_segment_sn();
  int32_t trading_segment_sn() const;
  void set_trading_segment_sn(int32_t value);
  private:
  int32_t _internal_trading_segment_sn() const;
  void _internal_set_trading_segment_sn(int32_t value);
  public:

  // int32 pre_trading_segment_sn = 12;
  void clear_pre_trading_segment_sn();
  int32_t pre_trading_segment_sn() const;
  void set_pre_trading_segment_sn(int32_t value);
  private:
  int32_t _internal_pre_trading_segment_sn() const;
  void _internal_set_pre_trading_segment_sn(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:InstrumentStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserve_1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr settlement_group_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserve_2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enter_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enter_reason_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_inst_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_zn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pre_status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pre_enter_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pre_enter_reason_;
  int32_t trading_segment_sn_;
  int32_t pre_trading_segment_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_instrument_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InstrumentInfo

// string reserve_1 = 1;
inline void InstrumentInfo::clear_reserve_1() {
  reserve_1_.ClearToEmpty();
}
inline const std::string& InstrumentInfo::reserve_1() const {
  // @@protoc_insertion_point(field_get:InstrumentInfo.reserve_1)
  return _internal_reserve_1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentInfo::set_reserve_1(ArgT0&& arg0, ArgT... args) {
 
 reserve_1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InstrumentInfo.reserve_1)
}
inline std::string* InstrumentInfo::mutable_reserve_1() {
  std::string* _s = _internal_mutable_reserve_1();
  // @@protoc_insertion_point(field_mutable:InstrumentInfo.reserve_1)
  return _s;
}
inline const std::string& InstrumentInfo::_internal_reserve_1() const {
  return reserve_1_.Get();
}
inline void InstrumentInfo::_internal_set_reserve_1(const std::string& value) {
  
  reserve_1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::_internal_mutable_reserve_1() {
  
  return reserve_1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::release_reserve_1() {
  // @@protoc_insertion_point(field_release:InstrumentInfo.reserve_1)
  return reserve_1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentInfo::set_allocated_reserve_1(std::string* reserve_1) {
  if (reserve_1 != nullptr) {
    
  } else {
    
  }
  reserve_1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reserve_1,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reserve_1_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reserve_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InstrumentInfo.reserve_1)
}

// string exchange_id = 2;
inline void InstrumentInfo::clear_exchange_id() {
  exchange_id_.ClearToEmpty();
}
inline const std::string& InstrumentInfo::exchange_id() const {
  // @@protoc_insertion_point(field_get:InstrumentInfo.exchange_id)
  return _internal_exchange_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentInfo::set_exchange_id(ArgT0&& arg0, ArgT... args) {
 
 exchange_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InstrumentInfo.exchange_id)
}
inline std::string* InstrumentInfo::mutable_exchange_id() {
  std::string* _s = _internal_mutable_exchange_id();
  // @@protoc_insertion_point(field_mutable:InstrumentInfo.exchange_id)
  return _s;
}
inline const std::string& InstrumentInfo::_internal_exchange_id() const {
  return exchange_id_.Get();
}
inline void InstrumentInfo::_internal_set_exchange_id(const std::string& value) {
  
  exchange_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::_internal_mutable_exchange_id() {
  
  return exchange_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::release_exchange_id() {
  // @@protoc_insertion_point(field_release:InstrumentInfo.exchange_id)
  return exchange_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentInfo::set_allocated_exchange_id(std::string* exchange_id) {
  if (exchange_id != nullptr) {
    
  } else {
    
  }
  exchange_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (exchange_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InstrumentInfo.exchange_id)
}

// string instrument_name = 3;
inline void InstrumentInfo::clear_instrument_name() {
  instrument_name_.ClearToEmpty();
}
inline const std::string& InstrumentInfo::instrument_name() const {
  // @@protoc_insertion_point(field_get:InstrumentInfo.instrument_name)
  return _internal_instrument_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentInfo::set_instrument_name(ArgT0&& arg0, ArgT... args) {
 
 instrument_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InstrumentInfo.instrument_name)
}
inline std::string* InstrumentInfo::mutable_instrument_name() {
  std::string* _s = _internal_mutable_instrument_name();
  // @@protoc_insertion_point(field_mutable:InstrumentInfo.instrument_name)
  return _s;
}
inline const std::string& InstrumentInfo::_internal_instrument_name() const {
  return instrument_name_.Get();
}
inline void InstrumentInfo::_internal_set_instrument_name(const std::string& value) {
  
  instrument_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::_internal_mutable_instrument_name() {
  
  return instrument_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::release_instrument_name() {
  // @@protoc_insertion_point(field_release:InstrumentInfo.instrument_name)
  return instrument_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentInfo::set_allocated_instrument_name(std::string* instrument_name) {
  if (instrument_name != nullptr) {
    
  } else {
    
  }
  instrument_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrument_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (instrument_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    instrument_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InstrumentInfo.instrument_name)
}

// string reserve_2 = 4;
inline void InstrumentInfo::clear_reserve_2() {
  reserve_2_.ClearToEmpty();
}
inline const std::string& InstrumentInfo::reserve_2() const {
  // @@protoc_insertion_point(field_get:InstrumentInfo.reserve_2)
  return _internal_reserve_2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentInfo::set_reserve_2(ArgT0&& arg0, ArgT... args) {
 
 reserve_2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InstrumentInfo.reserve_2)
}
inline std::string* InstrumentInfo::mutable_reserve_2() {
  std::string* _s = _internal_mutable_reserve_2();
  // @@protoc_insertion_point(field_mutable:InstrumentInfo.reserve_2)
  return _s;
}
inline const std::string& InstrumentInfo::_internal_reserve_2() const {
  return reserve_2_.Get();
}
inline void InstrumentInfo::_internal_set_reserve_2(const std::string& value) {
  
  reserve_2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::_internal_mutable_reserve_2() {
  
  return reserve_2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::release_reserve_2() {
  // @@protoc_insertion_point(field_release:InstrumentInfo.reserve_2)
  return reserve_2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentInfo::set_allocated_reserve_2(std::string* reserve_2) {
  if (reserve_2 != nullptr) {
    
  } else {
    
  }
  reserve_2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reserve_2,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reserve_2_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reserve_2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InstrumentInfo.reserve_2)
}

// string reserve_3 = 5;
inline void InstrumentInfo::clear_reserve_3() {
  reserve_3_.ClearToEmpty();
}
inline const std::string& InstrumentInfo::reserve_3() const {
  // @@protoc_insertion_point(field_get:InstrumentInfo.reserve_3)
  return _internal_reserve_3();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentInfo::set_reserve_3(ArgT0&& arg0, ArgT... args) {
 
 reserve_3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InstrumentInfo.reserve_3)
}
inline std::string* InstrumentInfo::mutable_reserve_3() {
  std::string* _s = _internal_mutable_reserve_3();
  // @@protoc_insertion_point(field_mutable:InstrumentInfo.reserve_3)
  return _s;
}
inline const std::string& InstrumentInfo::_internal_reserve_3() const {
  return reserve_3_.Get();
}
inline void InstrumentInfo::_internal_set_reserve_3(const std::string& value) {
  
  reserve_3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::_internal_mutable_reserve_3() {
  
  return reserve_3_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::release_reserve_3() {
  // @@protoc_insertion_point(field_release:InstrumentInfo.reserve_3)
  return reserve_3_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentInfo::set_allocated_reserve_3(std::string* reserve_3) {
  if (reserve_3 != nullptr) {
    
  } else {
    
  }
  reserve_3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reserve_3,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reserve_3_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reserve_3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InstrumentInfo.reserve_3)
}

// string product_class = 6;
inline void InstrumentInfo::clear_product_class() {
  product_class_.ClearToEmpty();
}
inline const std::string& InstrumentInfo::product_class() const {
  // @@protoc_insertion_point(field_get:InstrumentInfo.product_class)
  return _internal_product_class();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentInfo::set_product_class(ArgT0&& arg0, ArgT... args) {
 
 product_class_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InstrumentInfo.product_class)
}
inline std::string* InstrumentInfo::mutable_product_class() {
  std::string* _s = _internal_mutable_product_class();
  // @@protoc_insertion_point(field_mutable:InstrumentInfo.product_class)
  return _s;
}
inline const std::string& InstrumentInfo::_internal_product_class() const {
  return product_class_.Get();
}
inline void InstrumentInfo::_internal_set_product_class(const std::string& value) {
  
  product_class_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::_internal_mutable_product_class() {
  
  return product_class_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::release_product_class() {
  // @@protoc_insertion_point(field_release:InstrumentInfo.product_class)
  return product_class_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentInfo::set_allocated_product_class(std::string* product_class) {
  if (product_class != nullptr) {
    
  } else {
    
  }
  product_class_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product_class,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (product_class_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    product_class_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InstrumentInfo.product_class)
}

// int32 delivery_year = 7;
inline void InstrumentInfo::clear_delivery_year() {
  delivery_year_ = 0;
}
inline int32_t InstrumentInfo::_internal_delivery_year() const {
  return delivery_year_;
}
inline int32_t InstrumentInfo::delivery_year() const {
  // @@protoc_insertion_point(field_get:InstrumentInfo.delivery_year)
  return _internal_delivery_year();
}
inline void InstrumentInfo::_internal_set_delivery_year(int32_t value) {
  
  delivery_year_ = value;
}
inline void InstrumentInfo::set_delivery_year(int32_t value) {
  _internal_set_delivery_year(value);
  // @@protoc_insertion_point(field_set:InstrumentInfo.delivery_year)
}

// int32 delivery_month = 8;
inline void InstrumentInfo::clear_delivery_month() {
  delivery_month_ = 0;
}
inline int32_t InstrumentInfo::_internal_delivery_month() const {
  return delivery_month_;
}
inline int32_t InstrumentInfo::delivery_month() const {
  // @@protoc_insertion_point(field_get:InstrumentInfo.delivery_month)
  return _internal_delivery_month();
}
inline void InstrumentInfo::_internal_set_delivery_month(int32_t value) {
  
  delivery_month_ = value;
}
inline void InstrumentInfo::set_delivery_month(int32_t value) {
  _internal_set_delivery_month(value);
  // @@protoc_insertion_point(field_set:InstrumentInfo.delivery_month)
}

// int32 max_market_order_volume = 9;
inline void InstrumentInfo::clear_max_market_order_volume() {
  max_market_order_volume_ = 0;
}
inline int32_t InstrumentInfo::_internal_max_market_order_volume() const {
  return max_market_order_volume_;
}
inline int32_t InstrumentInfo::max_market_order_volume() const {
  // @@protoc_insertion_point(field_get:InstrumentInfo.max_market_order_volume)
  return _internal_max_market_order_volume();
}
inline void InstrumentInfo::_internal_set_max_market_order_volume(int32_t value) {
  
  max_market_order_volume_ = value;
}
inline void InstrumentInfo::set_max_market_order_volume(int32_t value) {
  _internal_set_max_market_order_volume(value);
  // @@protoc_insertion_point(field_set:InstrumentInfo.max_market_order_volume)
}

// int32 min_market_order_volume = 10;
inline void InstrumentInfo::clear_min_market_order_volume() {
  min_market_order_volume_ = 0;
}
inline int32_t InstrumentInfo::_internal_min_market_order_volume() const {
  return min_market_order_volume_;
}
inline int32_t InstrumentInfo::min_market_order_volume() const {
  // @@protoc_insertion_point(field_get:InstrumentInfo.min_market_order_volume)
  return _internal_min_market_order_volume();
}
inline void InstrumentInfo::_internal_set_min_market_order_volume(int32_t value) {
  
  min_market_order_volume_ = value;
}
inline void InstrumentInfo::set_min_market_order_volume(int32_t value) {
  _internal_set_min_market_order_volume(value);
  // @@protoc_insertion_point(field_set:InstrumentInfo.min_market_order_volume)
}

// int32 max_limit_order_volume = 11;
inline void InstrumentInfo::clear_max_limit_order_volume() {
  max_limit_order_volume_ = 0;
}
inline int32_t InstrumentInfo::_internal_max_limit_order_volume() const {
  return max_limit_order_volume_;
}
inline int32_t InstrumentInfo::max_limit_order_volume() const {
  // @@protoc_insertion_point(field_get:InstrumentInfo.max_limit_order_volume)
  return _internal_max_limit_order_volume();
}
inline void InstrumentInfo::_internal_set_max_limit_order_volume(int32_t value) {
  
  max_limit_order_volume_ = value;
}
inline void InstrumentInfo::set_max_limit_order_volume(int32_t value) {
  _internal_set_max_limit_order_volume(value);
  // @@protoc_insertion_point(field_set:InstrumentInfo.max_limit_order_volume)
}

// int32 min_limit_order_volume = 12;
inline void InstrumentInfo::clear_min_limit_order_volume() {
  min_limit_order_volume_ = 0;
}
inline int32_t InstrumentInfo::_internal_min_limit_order_volume() const {
  return min_limit_order_volume_;
}
inline int32_t InstrumentInfo::min_limit_order_volume() const {
  // @@protoc_insertion_point(field_get:InstrumentInfo.min_limit_order_volume)
  return _internal_min_limit_order_volume();
}
inline void InstrumentInfo::_internal_set_min_limit_order_volume(int32_t value) {
  
  min_limit_order_volume_ = value;
}
inline void InstrumentInfo::set_min_limit_order_volume(int32_t value) {
  _internal_set_min_limit_order_volume(value);
  // @@protoc_insertion_point(field_set:InstrumentInfo.min_limit_order_volume)
}

// int32 volume_multiple = 13;
inline void InstrumentInfo::clear_volume_multiple() {
  volume_multiple_ = 0;
}
inline int32_t InstrumentInfo::_internal_volume_multiple() const {
  return volume_multiple_;
}
inline int32_t InstrumentInfo::volume_multiple() const {
  // @@protoc_insertion_point(field_get:InstrumentInfo.volume_multiple)
  return _internal_volume_multiple();
}
inline void InstrumentInfo::_internal_set_volume_multiple(int32_t value) {
  
  volume_multiple_ = value;
}
inline void InstrumentInfo::set_volume_multiple(int32_t value) {
  _internal_set_volume_multiple(value);
  // @@protoc_insertion_point(field_set:InstrumentInfo.volume_multiple)
}

// double price_tick = 14;
inline void InstrumentInfo::clear_price_tick() {
  price_tick_ = 0;
}
inline double InstrumentInfo::_internal_price_tick() const {
  return price_tick_;
}
inline double InstrumentInfo::price_tick() const {
  // @@protoc_insertion_point(field_get:InstrumentInfo.price_tick)
  return _internal_price_tick();
}
inline void InstrumentInfo::_internal_set_price_tick(double value) {
  
  price_tick_ = value;
}
inline void InstrumentInfo::set_price_tick(double value) {
  _internal_set_price_tick(value);
  // @@protoc_insertion_point(field_set:InstrumentInfo.price_tick)
}

// string create_date = 15;
inline void InstrumentInfo::clear_create_date() {
  create_date_.ClearToEmpty();
}
inline const std::string& InstrumentInfo::create_date() const {
  // @@protoc_insertion_point(field_get:InstrumentInfo.create_date)
  return _internal_create_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentInfo::set_create_date(ArgT0&& arg0, ArgT... args) {
 
 create_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InstrumentInfo.create_date)
}
inline std::string* InstrumentInfo::mutable_create_date() {
  std::string* _s = _internal_mutable_create_date();
  // @@protoc_insertion_point(field_mutable:InstrumentInfo.create_date)
  return _s;
}
inline const std::string& InstrumentInfo::_internal_create_date() const {
  return create_date_.Get();
}
inline void InstrumentInfo::_internal_set_create_date(const std::string& value) {
  
  create_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::_internal_mutable_create_date() {
  
  return create_date_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::release_create_date() {
  // @@protoc_insertion_point(field_release:InstrumentInfo.create_date)
  return create_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentInfo::set_allocated_create_date(std::string* create_date) {
  if (create_date != nullptr) {
    
  } else {
    
  }
  create_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), create_date,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (create_date_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    create_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InstrumentInfo.create_date)
}

// string open_date = 16;
inline void InstrumentInfo::clear_open_date() {
  open_date_.ClearToEmpty();
}
inline const std::string& InstrumentInfo::open_date() const {
  // @@protoc_insertion_point(field_get:InstrumentInfo.open_date)
  return _internal_open_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentInfo::set_open_date(ArgT0&& arg0, ArgT... args) {
 
 open_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InstrumentInfo.open_date)
}
inline std::string* InstrumentInfo::mutable_open_date() {
  std::string* _s = _internal_mutable_open_date();
  // @@protoc_insertion_point(field_mutable:InstrumentInfo.open_date)
  return _s;
}
inline const std::string& InstrumentInfo::_internal_open_date() const {
  return open_date_.Get();
}
inline void InstrumentInfo::_internal_set_open_date(const std::string& value) {
  
  open_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::_internal_mutable_open_date() {
  
  return open_date_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::release_open_date() {
  // @@protoc_insertion_point(field_release:InstrumentInfo.open_date)
  return open_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentInfo::set_allocated_open_date(std::string* open_date) {
  if (open_date != nullptr) {
    
  } else {
    
  }
  open_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), open_date,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (open_date_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    open_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InstrumentInfo.open_date)
}

// string expire_date = 17;
inline void InstrumentInfo::clear_expire_date() {
  expire_date_.ClearToEmpty();
}
inline const std::string& InstrumentInfo::expire_date() const {
  // @@protoc_insertion_point(field_get:InstrumentInfo.expire_date)
  return _internal_expire_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentInfo::set_expire_date(ArgT0&& arg0, ArgT... args) {
 
 expire_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InstrumentInfo.expire_date)
}
inline std::string* InstrumentInfo::mutable_expire_date() {
  std::string* _s = _internal_mutable_expire_date();
  // @@protoc_insertion_point(field_mutable:InstrumentInfo.expire_date)
  return _s;
}
inline const std::string& InstrumentInfo::_internal_expire_date() const {
  return expire_date_.Get();
}
inline void InstrumentInfo::_internal_set_expire_date(const std::string& value) {
  
  expire_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::_internal_mutable_expire_date() {
  
  return expire_date_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::release_expire_date() {
  // @@protoc_insertion_point(field_release:InstrumentInfo.expire_date)
  return expire_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentInfo::set_allocated_expire_date(std::string* expire_date) {
  if (expire_date != nullptr) {
    
  } else {
    
  }
  expire_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expire_date,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (expire_date_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    expire_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InstrumentInfo.expire_date)
}

// string start_deliv_date = 18;
inline void InstrumentInfo::clear_start_deliv_date() {
  start_deliv_date_.ClearToEmpty();
}
inline const std::string& InstrumentInfo::start_deliv_date() const {
  // @@protoc_insertion_point(field_get:InstrumentInfo.start_deliv_date)
  return _internal_start_deliv_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentInfo::set_start_deliv_date(ArgT0&& arg0, ArgT... args) {
 
 start_deliv_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InstrumentInfo.start_deliv_date)
}
inline std::string* InstrumentInfo::mutable_start_deliv_date() {
  std::string* _s = _internal_mutable_start_deliv_date();
  // @@protoc_insertion_point(field_mutable:InstrumentInfo.start_deliv_date)
  return _s;
}
inline const std::string& InstrumentInfo::_internal_start_deliv_date() const {
  return start_deliv_date_.Get();
}
inline void InstrumentInfo::_internal_set_start_deliv_date(const std::string& value) {
  
  start_deliv_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::_internal_mutable_start_deliv_date() {
  
  return start_deliv_date_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::release_start_deliv_date() {
  // @@protoc_insertion_point(field_release:InstrumentInfo.start_deliv_date)
  return start_deliv_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentInfo::set_allocated_start_deliv_date(std::string* start_deliv_date) {
  if (start_deliv_date != nullptr) {
    
  } else {
    
  }
  start_deliv_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_deliv_date,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (start_deliv_date_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    start_deliv_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InstrumentInfo.start_deliv_date)
}

// string end_deliv_date = 19;
inline void InstrumentInfo::clear_end_deliv_date() {
  end_deliv_date_.ClearToEmpty();
}
inline const std::string& InstrumentInfo::end_deliv_date() const {
  // @@protoc_insertion_point(field_get:InstrumentInfo.end_deliv_date)
  return _internal_end_deliv_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentInfo::set_end_deliv_date(ArgT0&& arg0, ArgT... args) {
 
 end_deliv_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InstrumentInfo.end_deliv_date)
}
inline std::string* InstrumentInfo::mutable_end_deliv_date() {
  std::string* _s = _internal_mutable_end_deliv_date();
  // @@protoc_insertion_point(field_mutable:InstrumentInfo.end_deliv_date)
  return _s;
}
inline const std::string& InstrumentInfo::_internal_end_deliv_date() const {
  return end_deliv_date_.Get();
}
inline void InstrumentInfo::_internal_set_end_deliv_date(const std::string& value) {
  
  end_deliv_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::_internal_mutable_end_deliv_date() {
  
  return end_deliv_date_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::release_end_deliv_date() {
  // @@protoc_insertion_point(field_release:InstrumentInfo.end_deliv_date)
  return end_deliv_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentInfo::set_allocated_end_deliv_date(std::string* end_deliv_date) {
  if (end_deliv_date != nullptr) {
    
  } else {
    
  }
  end_deliv_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end_deliv_date,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (end_deliv_date_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    end_deliv_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InstrumentInfo.end_deliv_date)
}

// string inst_life_phase = 20;
inline void InstrumentInfo::clear_inst_life_phase() {
  inst_life_phase_.ClearToEmpty();
}
inline const std::string& InstrumentInfo::inst_life_phase() const {
  // @@protoc_insertion_point(field_get:InstrumentInfo.inst_life_phase)
  return _internal_inst_life_phase();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentInfo::set_inst_life_phase(ArgT0&& arg0, ArgT... args) {
 
 inst_life_phase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InstrumentInfo.inst_life_phase)
}
inline std::string* InstrumentInfo::mutable_inst_life_phase() {
  std::string* _s = _internal_mutable_inst_life_phase();
  // @@protoc_insertion_point(field_mutable:InstrumentInfo.inst_life_phase)
  return _s;
}
inline const std::string& InstrumentInfo::_internal_inst_life_phase() const {
  return inst_life_phase_.Get();
}
inline void InstrumentInfo::_internal_set_inst_life_phase(const std::string& value) {
  
  inst_life_phase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::_internal_mutable_inst_life_phase() {
  
  return inst_life_phase_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::release_inst_life_phase() {
  // @@protoc_insertion_point(field_release:InstrumentInfo.inst_life_phase)
  return inst_life_phase_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentInfo::set_allocated_inst_life_phase(std::string* inst_life_phase) {
  if (inst_life_phase != nullptr) {
    
  } else {
    
  }
  inst_life_phase_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inst_life_phase,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (inst_life_phase_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    inst_life_phase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InstrumentInfo.inst_life_phase)
}

// int32 is_trading = 21;
inline void InstrumentInfo::clear_is_trading() {
  is_trading_ = 0;
}
inline int32_t InstrumentInfo::_internal_is_trading() const {
  return is_trading_;
}
inline int32_t InstrumentInfo::is_trading() const {
  // @@protoc_insertion_point(field_get:InstrumentInfo.is_trading)
  return _internal_is_trading();
}
inline void InstrumentInfo::_internal_set_is_trading(int32_t value) {
  
  is_trading_ = value;
}
inline void InstrumentInfo::set_is_trading(int32_t value) {
  _internal_set_is_trading(value);
  // @@protoc_insertion_point(field_set:InstrumentInfo.is_trading)
}

// string position_type = 22;
inline void InstrumentInfo::clear_position_type() {
  position_type_.ClearToEmpty();
}
inline const std::string& InstrumentInfo::position_type() const {
  // @@protoc_insertion_point(field_get:InstrumentInfo.position_type)
  return _internal_position_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentInfo::set_position_type(ArgT0&& arg0, ArgT... args) {
 
 position_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InstrumentInfo.position_type)
}
inline std::string* InstrumentInfo::mutable_position_type() {
  std::string* _s = _internal_mutable_position_type();
  // @@protoc_insertion_point(field_mutable:InstrumentInfo.position_type)
  return _s;
}
inline const std::string& InstrumentInfo::_internal_position_type() const {
  return position_type_.Get();
}
inline void InstrumentInfo::_internal_set_position_type(const std::string& value) {
  
  position_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::_internal_mutable_position_type() {
  
  return position_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::release_position_type() {
  // @@protoc_insertion_point(field_release:InstrumentInfo.position_type)
  return position_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentInfo::set_allocated_position_type(std::string* position_type) {
  if (position_type != nullptr) {
    
  } else {
    
  }
  position_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), position_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (position_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    position_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InstrumentInfo.position_type)
}

// string position_date_type = 23;
inline void InstrumentInfo::clear_position_date_type() {
  position_date_type_.ClearToEmpty();
}
inline const std::string& InstrumentInfo::position_date_type() const {
  // @@protoc_insertion_point(field_get:InstrumentInfo.position_date_type)
  return _internal_position_date_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentInfo::set_position_date_type(ArgT0&& arg0, ArgT... args) {
 
 position_date_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InstrumentInfo.position_date_type)
}
inline std::string* InstrumentInfo::mutable_position_date_type() {
  std::string* _s = _internal_mutable_position_date_type();
  // @@protoc_insertion_point(field_mutable:InstrumentInfo.position_date_type)
  return _s;
}
inline const std::string& InstrumentInfo::_internal_position_date_type() const {
  return position_date_type_.Get();
}
inline void InstrumentInfo::_internal_set_position_date_type(const std::string& value) {
  
  position_date_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::_internal_mutable_position_date_type() {
  
  return position_date_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::release_position_date_type() {
  // @@protoc_insertion_point(field_release:InstrumentInfo.position_date_type)
  return position_date_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentInfo::set_allocated_position_date_type(std::string* position_date_type) {
  if (position_date_type != nullptr) {
    
  } else {
    
  }
  position_date_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), position_date_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (position_date_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    position_date_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InstrumentInfo.position_date_type)
}

// double long_margin_ratio = 24;
inline void InstrumentInfo::clear_long_margin_ratio() {
  long_margin_ratio_ = 0;
}
inline double InstrumentInfo::_internal_long_margin_ratio() const {
  return long_margin_ratio_;
}
inline double InstrumentInfo::long_margin_ratio() const {
  // @@protoc_insertion_point(field_get:InstrumentInfo.long_margin_ratio)
  return _internal_long_margin_ratio();
}
inline void InstrumentInfo::_internal_set_long_margin_ratio(double value) {
  
  long_margin_ratio_ = value;
}
inline void InstrumentInfo::set_long_margin_ratio(double value) {
  _internal_set_long_margin_ratio(value);
  // @@protoc_insertion_point(field_set:InstrumentInfo.long_margin_ratio)
}

// double short_margin_ratio = 25;
inline void InstrumentInfo::clear_short_margin_ratio() {
  short_margin_ratio_ = 0;
}
inline double InstrumentInfo::_internal_short_margin_ratio() const {
  return short_margin_ratio_;
}
inline double InstrumentInfo::short_margin_ratio() const {
  // @@protoc_insertion_point(field_get:InstrumentInfo.short_margin_ratio)
  return _internal_short_margin_ratio();
}
inline void InstrumentInfo::_internal_set_short_margin_ratio(double value) {
  
  short_margin_ratio_ = value;
}
inline void InstrumentInfo::set_short_margin_ratio(double value) {
  _internal_set_short_margin_ratio(value);
  // @@protoc_insertion_point(field_set:InstrumentInfo.short_margin_ratio)
}

// string max_margin_side_algorithm = 26;
inline void InstrumentInfo::clear_max_margin_side_algorithm() {
  max_margin_side_algorithm_.ClearToEmpty();
}
inline const std::string& InstrumentInfo::max_margin_side_algorithm() const {
  // @@protoc_insertion_point(field_get:InstrumentInfo.max_margin_side_algorithm)
  return _internal_max_margin_side_algorithm();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentInfo::set_max_margin_side_algorithm(ArgT0&& arg0, ArgT... args) {
 
 max_margin_side_algorithm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InstrumentInfo.max_margin_side_algorithm)
}
inline std::string* InstrumentInfo::mutable_max_margin_side_algorithm() {
  std::string* _s = _internal_mutable_max_margin_side_algorithm();
  // @@protoc_insertion_point(field_mutable:InstrumentInfo.max_margin_side_algorithm)
  return _s;
}
inline const std::string& InstrumentInfo::_internal_max_margin_side_algorithm() const {
  return max_margin_side_algorithm_.Get();
}
inline void InstrumentInfo::_internal_set_max_margin_side_algorithm(const std::string& value) {
  
  max_margin_side_algorithm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::_internal_mutable_max_margin_side_algorithm() {
  
  return max_margin_side_algorithm_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::release_max_margin_side_algorithm() {
  // @@protoc_insertion_point(field_release:InstrumentInfo.max_margin_side_algorithm)
  return max_margin_side_algorithm_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentInfo::set_allocated_max_margin_side_algorithm(std::string* max_margin_side_algorithm) {
  if (max_margin_side_algorithm != nullptr) {
    
  } else {
    
  }
  max_margin_side_algorithm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), max_margin_side_algorithm,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (max_margin_side_algorithm_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    max_margin_side_algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InstrumentInfo.max_margin_side_algorithm)
}

// string reserve_4 = 27;
inline void InstrumentInfo::clear_reserve_4() {
  reserve_4_.ClearToEmpty();
}
inline const std::string& InstrumentInfo::reserve_4() const {
  // @@protoc_insertion_point(field_get:InstrumentInfo.reserve_4)
  return _internal_reserve_4();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentInfo::set_reserve_4(ArgT0&& arg0, ArgT... args) {
 
 reserve_4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InstrumentInfo.reserve_4)
}
inline std::string* InstrumentInfo::mutable_reserve_4() {
  std::string* _s = _internal_mutable_reserve_4();
  // @@protoc_insertion_point(field_mutable:InstrumentInfo.reserve_4)
  return _s;
}
inline const std::string& InstrumentInfo::_internal_reserve_4() const {
  return reserve_4_.Get();
}
inline void InstrumentInfo::_internal_set_reserve_4(const std::string& value) {
  
  reserve_4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::_internal_mutable_reserve_4() {
  
  return reserve_4_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::release_reserve_4() {
  // @@protoc_insertion_point(field_release:InstrumentInfo.reserve_4)
  return reserve_4_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentInfo::set_allocated_reserve_4(std::string* reserve_4) {
  if (reserve_4 != nullptr) {
    
  } else {
    
  }
  reserve_4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reserve_4,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reserve_4_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reserve_4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InstrumentInfo.reserve_4)
}

// double strike_price = 28;
inline void InstrumentInfo::clear_strike_price() {
  strike_price_ = 0;
}
inline double InstrumentInfo::_internal_strike_price() const {
  return strike_price_;
}
inline double InstrumentInfo::strike_price() const {
  // @@protoc_insertion_point(field_get:InstrumentInfo.strike_price)
  return _internal_strike_price();
}
inline void InstrumentInfo::_internal_set_strike_price(double value) {
  
  strike_price_ = value;
}
inline void InstrumentInfo::set_strike_price(double value) {
  _internal_set_strike_price(value);
  // @@protoc_insertion_point(field_set:InstrumentInfo.strike_price)
}

// string options_type = 29;
inline void InstrumentInfo::clear_options_type() {
  options_type_.ClearToEmpty();
}
inline const std::string& InstrumentInfo::options_type() const {
  // @@protoc_insertion_point(field_get:InstrumentInfo.options_type)
  return _internal_options_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentInfo::set_options_type(ArgT0&& arg0, ArgT... args) {
 
 options_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InstrumentInfo.options_type)
}
inline std::string* InstrumentInfo::mutable_options_type() {
  std::string* _s = _internal_mutable_options_type();
  // @@protoc_insertion_point(field_mutable:InstrumentInfo.options_type)
  return _s;
}
inline const std::string& InstrumentInfo::_internal_options_type() const {
  return options_type_.Get();
}
inline void InstrumentInfo::_internal_set_options_type(const std::string& value) {
  
  options_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::_internal_mutable_options_type() {
  
  return options_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::release_options_type() {
  // @@protoc_insertion_point(field_release:InstrumentInfo.options_type)
  return options_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentInfo::set_allocated_options_type(std::string* options_type) {
  if (options_type != nullptr) {
    
  } else {
    
  }
  options_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), options_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (options_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    options_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InstrumentInfo.options_type)
}

// double underlying_multiple = 30;
inline void InstrumentInfo::clear_underlying_multiple() {
  underlying_multiple_ = 0;
}
inline double InstrumentInfo::_internal_underlying_multiple() const {
  return underlying_multiple_;
}
inline double InstrumentInfo::underlying_multiple() const {
  // @@protoc_insertion_point(field_get:InstrumentInfo.underlying_multiple)
  return _internal_underlying_multiple();
}
inline void InstrumentInfo::_internal_set_underlying_multiple(double value) {
  
  underlying_multiple_ = value;
}
inline void InstrumentInfo::set_underlying_multiple(double value) {
  _internal_set_underlying_multiple(value);
  // @@protoc_insertion_point(field_set:InstrumentInfo.underlying_multiple)
}

// string combination_type = 31;
inline void InstrumentInfo::clear_combination_type() {
  combination_type_.ClearToEmpty();
}
inline const std::string& InstrumentInfo::combination_type() const {
  // @@protoc_insertion_point(field_get:InstrumentInfo.combination_type)
  return _internal_combination_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentInfo::set_combination_type(ArgT0&& arg0, ArgT... args) {
 
 combination_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InstrumentInfo.combination_type)
}
inline std::string* InstrumentInfo::mutable_combination_type() {
  std::string* _s = _internal_mutable_combination_type();
  // @@protoc_insertion_point(field_mutable:InstrumentInfo.combination_type)
  return _s;
}
inline const std::string& InstrumentInfo::_internal_combination_type() const {
  return combination_type_.Get();
}
inline void InstrumentInfo::_internal_set_combination_type(const std::string& value) {
  
  combination_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::_internal_mutable_combination_type() {
  
  return combination_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::release_combination_type() {
  // @@protoc_insertion_point(field_release:InstrumentInfo.combination_type)
  return combination_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentInfo::set_allocated_combination_type(std::string* combination_type) {
  if (combination_type != nullptr) {
    
  } else {
    
  }
  combination_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), combination_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (combination_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    combination_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InstrumentInfo.combination_type)
}

// string instrument_id = 32;
inline void InstrumentInfo::clear_instrument_id() {
  instrument_id_.ClearToEmpty();
}
inline const std::string& InstrumentInfo::instrument_id() const {
  // @@protoc_insertion_point(field_get:InstrumentInfo.instrument_id)
  return _internal_instrument_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentInfo::set_instrument_id(ArgT0&& arg0, ArgT... args) {
 
 instrument_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InstrumentInfo.instrument_id)
}
inline std::string* InstrumentInfo::mutable_instrument_id() {
  std::string* _s = _internal_mutable_instrument_id();
  // @@protoc_insertion_point(field_mutable:InstrumentInfo.instrument_id)
  return _s;
}
inline const std::string& InstrumentInfo::_internal_instrument_id() const {
  return instrument_id_.Get();
}
inline void InstrumentInfo::_internal_set_instrument_id(const std::string& value) {
  
  instrument_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::_internal_mutable_instrument_id() {
  
  return instrument_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::release_instrument_id() {
  // @@protoc_insertion_point(field_release:InstrumentInfo.instrument_id)
  return instrument_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentInfo::set_allocated_instrument_id(std::string* instrument_id) {
  if (instrument_id != nullptr) {
    
  } else {
    
  }
  instrument_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrument_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (instrument_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InstrumentInfo.instrument_id)
}

// string exchange_inst_id = 33;
inline void InstrumentInfo::clear_exchange_inst_id() {
  exchange_inst_id_.ClearToEmpty();
}
inline const std::string& InstrumentInfo::exchange_inst_id() const {
  // @@protoc_insertion_point(field_get:InstrumentInfo.exchange_inst_id)
  return _internal_exchange_inst_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentInfo::set_exchange_inst_id(ArgT0&& arg0, ArgT... args) {
 
 exchange_inst_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InstrumentInfo.exchange_inst_id)
}
inline std::string* InstrumentInfo::mutable_exchange_inst_id() {
  std::string* _s = _internal_mutable_exchange_inst_id();
  // @@protoc_insertion_point(field_mutable:InstrumentInfo.exchange_inst_id)
  return _s;
}
inline const std::string& InstrumentInfo::_internal_exchange_inst_id() const {
  return exchange_inst_id_.Get();
}
inline void InstrumentInfo::_internal_set_exchange_inst_id(const std::string& value) {
  
  exchange_inst_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::_internal_mutable_exchange_inst_id() {
  
  return exchange_inst_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::release_exchange_inst_id() {
  // @@protoc_insertion_point(field_release:InstrumentInfo.exchange_inst_id)
  return exchange_inst_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentInfo::set_allocated_exchange_inst_id(std::string* exchange_inst_id) {
  if (exchange_inst_id != nullptr) {
    
  } else {
    
  }
  exchange_inst_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_inst_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (exchange_inst_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    exchange_inst_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InstrumentInfo.exchange_inst_id)
}

// string product_id = 34;
inline void InstrumentInfo::clear_product_id() {
  product_id_.ClearToEmpty();
}
inline const std::string& InstrumentInfo::product_id() const {
  // @@protoc_insertion_point(field_get:InstrumentInfo.product_id)
  return _internal_product_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentInfo::set_product_id(ArgT0&& arg0, ArgT... args) {
 
 product_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InstrumentInfo.product_id)
}
inline std::string* InstrumentInfo::mutable_product_id() {
  std::string* _s = _internal_mutable_product_id();
  // @@protoc_insertion_point(field_mutable:InstrumentInfo.product_id)
  return _s;
}
inline const std::string& InstrumentInfo::_internal_product_id() const {
  return product_id_.Get();
}
inline void InstrumentInfo::_internal_set_product_id(const std::string& value) {
  
  product_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::_internal_mutable_product_id() {
  
  return product_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::release_product_id() {
  // @@protoc_insertion_point(field_release:InstrumentInfo.product_id)
  return product_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentInfo::set_allocated_product_id(std::string* product_id) {
  if (product_id != nullptr) {
    
  } else {
    
  }
  product_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (product_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    product_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InstrumentInfo.product_id)
}

// string underlying_instr_id = 35;
inline void InstrumentInfo::clear_underlying_instr_id() {
  underlying_instr_id_.ClearToEmpty();
}
inline const std::string& InstrumentInfo::underlying_instr_id() const {
  // @@protoc_insertion_point(field_get:InstrumentInfo.underlying_instr_id)
  return _internal_underlying_instr_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentInfo::set_underlying_instr_id(ArgT0&& arg0, ArgT... args) {
 
 underlying_instr_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InstrumentInfo.underlying_instr_id)
}
inline std::string* InstrumentInfo::mutable_underlying_instr_id() {
  std::string* _s = _internal_mutable_underlying_instr_id();
  // @@protoc_insertion_point(field_mutable:InstrumentInfo.underlying_instr_id)
  return _s;
}
inline const std::string& InstrumentInfo::_internal_underlying_instr_id() const {
  return underlying_instr_id_.Get();
}
inline void InstrumentInfo::_internal_set_underlying_instr_id(const std::string& value) {
  
  underlying_instr_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::_internal_mutable_underlying_instr_id() {
  
  return underlying_instr_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentInfo::release_underlying_instr_id() {
  // @@protoc_insertion_point(field_release:InstrumentInfo.underlying_instr_id)
  return underlying_instr_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentInfo::set_allocated_underlying_instr_id(std::string* underlying_instr_id) {
  if (underlying_instr_id != nullptr) {
    
  } else {
    
  }
  underlying_instr_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), underlying_instr_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (underlying_instr_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    underlying_instr_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InstrumentInfo.underlying_instr_id)
}

// -------------------------------------------------------------------

// InstrumentStatus

// string exchange_id = 1;
inline void InstrumentStatus::clear_exchange_id() {
  exchange_id_.ClearToEmpty();
}
inline const std::string& InstrumentStatus::exchange_id() const {
  // @@protoc_insertion_point(field_get:InstrumentStatus.exchange_id)
  return _internal_exchange_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentStatus::set_exchange_id(ArgT0&& arg0, ArgT... args) {
 
 exchange_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InstrumentStatus.exchange_id)
}
inline std::string* InstrumentStatus::mutable_exchange_id() {
  std::string* _s = _internal_mutable_exchange_id();
  // @@protoc_insertion_point(field_mutable:InstrumentStatus.exchange_id)
  return _s;
}
inline const std::string& InstrumentStatus::_internal_exchange_id() const {
  return exchange_id_.Get();
}
inline void InstrumentStatus::_internal_set_exchange_id(const std::string& value) {
  
  exchange_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentStatus::_internal_mutable_exchange_id() {
  
  return exchange_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentStatus::release_exchange_id() {
  // @@protoc_insertion_point(field_release:InstrumentStatus.exchange_id)
  return exchange_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentStatus::set_allocated_exchange_id(std::string* exchange_id) {
  if (exchange_id != nullptr) {
    
  } else {
    
  }
  exchange_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (exchange_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InstrumentStatus.exchange_id)
}

// string reserve_1 = 2;
inline void InstrumentStatus::clear_reserve_1() {
  reserve_1_.ClearToEmpty();
}
inline const std::string& InstrumentStatus::reserve_1() const {
  // @@protoc_insertion_point(field_get:InstrumentStatus.reserve_1)
  return _internal_reserve_1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentStatus::set_reserve_1(ArgT0&& arg0, ArgT... args) {
 
 reserve_1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InstrumentStatus.reserve_1)
}
inline std::string* InstrumentStatus::mutable_reserve_1() {
  std::string* _s = _internal_mutable_reserve_1();
  // @@protoc_insertion_point(field_mutable:InstrumentStatus.reserve_1)
  return _s;
}
inline const std::string& InstrumentStatus::_internal_reserve_1() const {
  return reserve_1_.Get();
}
inline void InstrumentStatus::_internal_set_reserve_1(const std::string& value) {
  
  reserve_1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentStatus::_internal_mutable_reserve_1() {
  
  return reserve_1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentStatus::release_reserve_1() {
  // @@protoc_insertion_point(field_release:InstrumentStatus.reserve_1)
  return reserve_1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentStatus::set_allocated_reserve_1(std::string* reserve_1) {
  if (reserve_1 != nullptr) {
    
  } else {
    
  }
  reserve_1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reserve_1,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reserve_1_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reserve_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InstrumentStatus.reserve_1)
}

// string settlement_group_id = 3;
inline void InstrumentStatus::clear_settlement_group_id() {
  settlement_group_id_.ClearToEmpty();
}
inline const std::string& InstrumentStatus::settlement_group_id() const {
  // @@protoc_insertion_point(field_get:InstrumentStatus.settlement_group_id)
  return _internal_settlement_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentStatus::set_settlement_group_id(ArgT0&& arg0, ArgT... args) {
 
 settlement_group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InstrumentStatus.settlement_group_id)
}
inline std::string* InstrumentStatus::mutable_settlement_group_id() {
  std::string* _s = _internal_mutable_settlement_group_id();
  // @@protoc_insertion_point(field_mutable:InstrumentStatus.settlement_group_id)
  return _s;
}
inline const std::string& InstrumentStatus::_internal_settlement_group_id() const {
  return settlement_group_id_.Get();
}
inline void InstrumentStatus::_internal_set_settlement_group_id(const std::string& value) {
  
  settlement_group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentStatus::_internal_mutable_settlement_group_id() {
  
  return settlement_group_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentStatus::release_settlement_group_id() {
  // @@protoc_insertion_point(field_release:InstrumentStatus.settlement_group_id)
  return settlement_group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentStatus::set_allocated_settlement_group_id(std::string* settlement_group_id) {
  if (settlement_group_id != nullptr) {
    
  } else {
    
  }
  settlement_group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), settlement_group_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (settlement_group_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    settlement_group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InstrumentStatus.settlement_group_id)
}

// string reserve_2 = 4;
inline void InstrumentStatus::clear_reserve_2() {
  reserve_2_.ClearToEmpty();
}
inline const std::string& InstrumentStatus::reserve_2() const {
  // @@protoc_insertion_point(field_get:InstrumentStatus.reserve_2)
  return _internal_reserve_2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentStatus::set_reserve_2(ArgT0&& arg0, ArgT... args) {
 
 reserve_2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InstrumentStatus.reserve_2)
}
inline std::string* InstrumentStatus::mutable_reserve_2() {
  std::string* _s = _internal_mutable_reserve_2();
  // @@protoc_insertion_point(field_mutable:InstrumentStatus.reserve_2)
  return _s;
}
inline const std::string& InstrumentStatus::_internal_reserve_2() const {
  return reserve_2_.Get();
}
inline void InstrumentStatus::_internal_set_reserve_2(const std::string& value) {
  
  reserve_2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentStatus::_internal_mutable_reserve_2() {
  
  return reserve_2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentStatus::release_reserve_2() {
  // @@protoc_insertion_point(field_release:InstrumentStatus.reserve_2)
  return reserve_2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentStatus::set_allocated_reserve_2(std::string* reserve_2) {
  if (reserve_2 != nullptr) {
    
  } else {
    
  }
  reserve_2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reserve_2,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reserve_2_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reserve_2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InstrumentStatus.reserve_2)
}

// string instrument_status = 5;
inline void InstrumentStatus::clear_instrument_status() {
  instrument_status_.ClearToEmpty();
}
inline const std::string& InstrumentStatus::instrument_status() const {
  // @@protoc_insertion_point(field_get:InstrumentStatus.instrument_status)
  return _internal_instrument_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentStatus::set_instrument_status(ArgT0&& arg0, ArgT... args) {
 
 instrument_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InstrumentStatus.instrument_status)
}
inline std::string* InstrumentStatus::mutable_instrument_status() {
  std::string* _s = _internal_mutable_instrument_status();
  // @@protoc_insertion_point(field_mutable:InstrumentStatus.instrument_status)
  return _s;
}
inline const std::string& InstrumentStatus::_internal_instrument_status() const {
  return instrument_status_.Get();
}
inline void InstrumentStatus::_internal_set_instrument_status(const std::string& value) {
  
  instrument_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentStatus::_internal_mutable_instrument_status() {
  
  return instrument_status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentStatus::release_instrument_status() {
  // @@protoc_insertion_point(field_release:InstrumentStatus.instrument_status)
  return instrument_status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentStatus::set_allocated_instrument_status(std::string* instrument_status) {
  if (instrument_status != nullptr) {
    
  } else {
    
  }
  instrument_status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrument_status,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (instrument_status_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    instrument_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InstrumentStatus.instrument_status)
}

// int32 trading_segment_sn = 6;
inline void InstrumentStatus::clear_trading_segment_sn() {
  trading_segment_sn_ = 0;
}
inline int32_t InstrumentStatus::_internal_trading_segment_sn() const {
  return trading_segment_sn_;
}
inline int32_t InstrumentStatus::trading_segment_sn() const {
  // @@protoc_insertion_point(field_get:InstrumentStatus.trading_segment_sn)
  return _internal_trading_segment_sn();
}
inline void InstrumentStatus::_internal_set_trading_segment_sn(int32_t value) {
  
  trading_segment_sn_ = value;
}
inline void InstrumentStatus::set_trading_segment_sn(int32_t value) {
  _internal_set_trading_segment_sn(value);
  // @@protoc_insertion_point(field_set:InstrumentStatus.trading_segment_sn)
}

// string enter_time = 7;
inline void InstrumentStatus::clear_enter_time() {
  enter_time_.ClearToEmpty();
}
inline const std::string& InstrumentStatus::enter_time() const {
  // @@protoc_insertion_point(field_get:InstrumentStatus.enter_time)
  return _internal_enter_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentStatus::set_enter_time(ArgT0&& arg0, ArgT... args) {
 
 enter_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InstrumentStatus.enter_time)
}
inline std::string* InstrumentStatus::mutable_enter_time() {
  std::string* _s = _internal_mutable_enter_time();
  // @@protoc_insertion_point(field_mutable:InstrumentStatus.enter_time)
  return _s;
}
inline const std::string& InstrumentStatus::_internal_enter_time() const {
  return enter_time_.Get();
}
inline void InstrumentStatus::_internal_set_enter_time(const std::string& value) {
  
  enter_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentStatus::_internal_mutable_enter_time() {
  
  return enter_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentStatus::release_enter_time() {
  // @@protoc_insertion_point(field_release:InstrumentStatus.enter_time)
  return enter_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentStatus::set_allocated_enter_time(std::string* enter_time) {
  if (enter_time != nullptr) {
    
  } else {
    
  }
  enter_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), enter_time,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (enter_time_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    enter_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InstrumentStatus.enter_time)
}

// string enter_reason = 8;
inline void InstrumentStatus::clear_enter_reason() {
  enter_reason_.ClearToEmpty();
}
inline const std::string& InstrumentStatus::enter_reason() const {
  // @@protoc_insertion_point(field_get:InstrumentStatus.enter_reason)
  return _internal_enter_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentStatus::set_enter_reason(ArgT0&& arg0, ArgT... args) {
 
 enter_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InstrumentStatus.enter_reason)
}
inline std::string* InstrumentStatus::mutable_enter_reason() {
  std::string* _s = _internal_mutable_enter_reason();
  // @@protoc_insertion_point(field_mutable:InstrumentStatus.enter_reason)
  return _s;
}
inline const std::string& InstrumentStatus::_internal_enter_reason() const {
  return enter_reason_.Get();
}
inline void InstrumentStatus::_internal_set_enter_reason(const std::string& value) {
  
  enter_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentStatus::_internal_mutable_enter_reason() {
  
  return enter_reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentStatus::release_enter_reason() {
  // @@protoc_insertion_point(field_release:InstrumentStatus.enter_reason)
  return enter_reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentStatus::set_allocated_enter_reason(std::string* enter_reason) {
  if (enter_reason != nullptr) {
    
  } else {
    
  }
  enter_reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), enter_reason,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (enter_reason_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    enter_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InstrumentStatus.enter_reason)
}

// string exchange_inst_id = 9;
inline void InstrumentStatus::clear_exchange_inst_id() {
  exchange_inst_id_.ClearToEmpty();
}
inline const std::string& InstrumentStatus::exchange_inst_id() const {
  // @@protoc_insertion_point(field_get:InstrumentStatus.exchange_inst_id)
  return _internal_exchange_inst_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentStatus::set_exchange_inst_id(ArgT0&& arg0, ArgT... args) {
 
 exchange_inst_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InstrumentStatus.exchange_inst_id)
}
inline std::string* InstrumentStatus::mutable_exchange_inst_id() {
  std::string* _s = _internal_mutable_exchange_inst_id();
  // @@protoc_insertion_point(field_mutable:InstrumentStatus.exchange_inst_id)
  return _s;
}
inline const std::string& InstrumentStatus::_internal_exchange_inst_id() const {
  return exchange_inst_id_.Get();
}
inline void InstrumentStatus::_internal_set_exchange_inst_id(const std::string& value) {
  
  exchange_inst_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentStatus::_internal_mutable_exchange_inst_id() {
  
  return exchange_inst_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentStatus::release_exchange_inst_id() {
  // @@protoc_insertion_point(field_release:InstrumentStatus.exchange_inst_id)
  return exchange_inst_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentStatus::set_allocated_exchange_inst_id(std::string* exchange_inst_id) {
  if (exchange_inst_id != nullptr) {
    
  } else {
    
  }
  exchange_inst_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_inst_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (exchange_inst_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    exchange_inst_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InstrumentStatus.exchange_inst_id)
}

// string instrument_id = 10;
inline void InstrumentStatus::clear_instrument_id() {
  instrument_id_.ClearToEmpty();
}
inline const std::string& InstrumentStatus::instrument_id() const {
  // @@protoc_insertion_point(field_get:InstrumentStatus.instrument_id)
  return _internal_instrument_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentStatus::set_instrument_id(ArgT0&& arg0, ArgT... args) {
 
 instrument_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InstrumentStatus.instrument_id)
}
inline std::string* InstrumentStatus::mutable_instrument_id() {
  std::string* _s = _internal_mutable_instrument_id();
  // @@protoc_insertion_point(field_mutable:InstrumentStatus.instrument_id)
  return _s;
}
inline const std::string& InstrumentStatus::_internal_instrument_id() const {
  return instrument_id_.Get();
}
inline void InstrumentStatus::_internal_set_instrument_id(const std::string& value) {
  
  instrument_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentStatus::_internal_mutable_instrument_id() {
  
  return instrument_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentStatus::release_instrument_id() {
  // @@protoc_insertion_point(field_release:InstrumentStatus.instrument_id)
  return instrument_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentStatus::set_allocated_instrument_id(std::string* instrument_id) {
  if (instrument_id != nullptr) {
    
  } else {
    
  }
  instrument_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrument_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (instrument_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InstrumentStatus.instrument_id)
}

// string status_zn = 11;
inline void InstrumentStatus::clear_status_zn() {
  status_zn_.ClearToEmpty();
}
inline const std::string& InstrumentStatus::status_zn() const {
  // @@protoc_insertion_point(field_get:InstrumentStatus.status_zn)
  return _internal_status_zn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentStatus::set_status_zn(ArgT0&& arg0, ArgT... args) {
 
 status_zn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InstrumentStatus.status_zn)
}
inline std::string* InstrumentStatus::mutable_status_zn() {
  std::string* _s = _internal_mutable_status_zn();
  // @@protoc_insertion_point(field_mutable:InstrumentStatus.status_zn)
  return _s;
}
inline const std::string& InstrumentStatus::_internal_status_zn() const {
  return status_zn_.Get();
}
inline void InstrumentStatus::_internal_set_status_zn(const std::string& value) {
  
  status_zn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentStatus::_internal_mutable_status_zn() {
  
  return status_zn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentStatus::release_status_zn() {
  // @@protoc_insertion_point(field_release:InstrumentStatus.status_zn)
  return status_zn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentStatus::set_allocated_status_zn(std::string* status_zn) {
  if (status_zn != nullptr) {
    
  } else {
    
  }
  status_zn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status_zn,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_zn_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    status_zn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InstrumentStatus.status_zn)
}

// int32 pre_trading_segment_sn = 12;
inline void InstrumentStatus::clear_pre_trading_segment_sn() {
  pre_trading_segment_sn_ = 0;
}
inline int32_t InstrumentStatus::_internal_pre_trading_segment_sn() const {
  return pre_trading_segment_sn_;
}
inline int32_t InstrumentStatus::pre_trading_segment_sn() const {
  // @@protoc_insertion_point(field_get:InstrumentStatus.pre_trading_segment_sn)
  return _internal_pre_trading_segment_sn();
}
inline void InstrumentStatus::_internal_set_pre_trading_segment_sn(int32_t value) {
  
  pre_trading_segment_sn_ = value;
}
inline void InstrumentStatus::set_pre_trading_segment_sn(int32_t value) {
  _internal_set_pre_trading_segment_sn(value);
  // @@protoc_insertion_point(field_set:InstrumentStatus.pre_trading_segment_sn)
}

// string pre_status = 13;
inline void InstrumentStatus::clear_pre_status() {
  pre_status_.ClearToEmpty();
}
inline const std::string& InstrumentStatus::pre_status() const {
  // @@protoc_insertion_point(field_get:InstrumentStatus.pre_status)
  return _internal_pre_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentStatus::set_pre_status(ArgT0&& arg0, ArgT... args) {
 
 pre_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InstrumentStatus.pre_status)
}
inline std::string* InstrumentStatus::mutable_pre_status() {
  std::string* _s = _internal_mutable_pre_status();
  // @@protoc_insertion_point(field_mutable:InstrumentStatus.pre_status)
  return _s;
}
inline const std::string& InstrumentStatus::_internal_pre_status() const {
  return pre_status_.Get();
}
inline void InstrumentStatus::_internal_set_pre_status(const std::string& value) {
  
  pre_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentStatus::_internal_mutable_pre_status() {
  
  return pre_status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentStatus::release_pre_status() {
  // @@protoc_insertion_point(field_release:InstrumentStatus.pre_status)
  return pre_status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentStatus::set_allocated_pre_status(std::string* pre_status) {
  if (pre_status != nullptr) {
    
  } else {
    
  }
  pre_status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pre_status,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pre_status_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    pre_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InstrumentStatus.pre_status)
}

// string pre_enter_time = 14;
inline void InstrumentStatus::clear_pre_enter_time() {
  pre_enter_time_.ClearToEmpty();
}
inline const std::string& InstrumentStatus::pre_enter_time() const {
  // @@protoc_insertion_point(field_get:InstrumentStatus.pre_enter_time)
  return _internal_pre_enter_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentStatus::set_pre_enter_time(ArgT0&& arg0, ArgT... args) {
 
 pre_enter_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InstrumentStatus.pre_enter_time)
}
inline std::string* InstrumentStatus::mutable_pre_enter_time() {
  std::string* _s = _internal_mutable_pre_enter_time();
  // @@protoc_insertion_point(field_mutable:InstrumentStatus.pre_enter_time)
  return _s;
}
inline const std::string& InstrumentStatus::_internal_pre_enter_time() const {
  return pre_enter_time_.Get();
}
inline void InstrumentStatus::_internal_set_pre_enter_time(const std::string& value) {
  
  pre_enter_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentStatus::_internal_mutable_pre_enter_time() {
  
  return pre_enter_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentStatus::release_pre_enter_time() {
  // @@protoc_insertion_point(field_release:InstrumentStatus.pre_enter_time)
  return pre_enter_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentStatus::set_allocated_pre_enter_time(std::string* pre_enter_time) {
  if (pre_enter_time != nullptr) {
    
  } else {
    
  }
  pre_enter_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pre_enter_time,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pre_enter_time_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    pre_enter_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InstrumentStatus.pre_enter_time)
}

// string pre_enter_reason = 15;
inline void InstrumentStatus::clear_pre_enter_reason() {
  pre_enter_reason_.ClearToEmpty();
}
inline const std::string& InstrumentStatus::pre_enter_reason() const {
  // @@protoc_insertion_point(field_get:InstrumentStatus.pre_enter_reason)
  return _internal_pre_enter_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentStatus::set_pre_enter_reason(ArgT0&& arg0, ArgT... args) {
 
 pre_enter_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InstrumentStatus.pre_enter_reason)
}
inline std::string* InstrumentStatus::mutable_pre_enter_reason() {
  std::string* _s = _internal_mutable_pre_enter_reason();
  // @@protoc_insertion_point(field_mutable:InstrumentStatus.pre_enter_reason)
  return _s;
}
inline const std::string& InstrumentStatus::_internal_pre_enter_reason() const {
  return pre_enter_reason_.Get();
}
inline void InstrumentStatus::_internal_set_pre_enter_reason(const std::string& value) {
  
  pre_enter_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentStatus::_internal_mutable_pre_enter_reason() {
  
  return pre_enter_reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentStatus::release_pre_enter_reason() {
  // @@protoc_insertion_point(field_release:InstrumentStatus.pre_enter_reason)
  return pre_enter_reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentStatus::set_allocated_pre_enter_reason(std::string* pre_enter_reason) {
  if (pre_enter_reason != nullptr) {
    
  } else {
    
  }
  pre_enter_reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pre_enter_reason,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pre_enter_reason_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    pre_enter_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:InstrumentStatus.pre_enter_reason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_instrument_2eproto
