// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tick.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tick_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tick_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tick_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tick_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tick_2eproto;
class DepthTickInfo;
struct DepthTickInfoDefaultTypeInternal;
extern DepthTickInfoDefaultTypeInternal _DepthTickInfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::DepthTickInfo* Arena::CreateMaybeMessage<::DepthTickInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class DepthTickInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DepthTickInfo) */ {
 public:
  inline DepthTickInfo() : DepthTickInfo(nullptr) {}
  ~DepthTickInfo() override;
  explicit constexpr DepthTickInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DepthTickInfo(const DepthTickInfo& from);
  DepthTickInfo(DepthTickInfo&& from) noexcept
    : DepthTickInfo() {
    *this = ::std::move(from);
  }

  inline DepthTickInfo& operator=(const DepthTickInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepthTickInfo& operator=(DepthTickInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DepthTickInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DepthTickInfo* internal_default_instance() {
    return reinterpret_cast<const DepthTickInfo*>(
               &_DepthTickInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DepthTickInfo& a, DepthTickInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DepthTickInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DepthTickInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DepthTickInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DepthTickInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DepthTickInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DepthTickInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DepthTickInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DepthTickInfo";
  }
  protected:
  explicit DepthTickInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradingDayFieldNumber = 1,
    kInstrumentIdFieldNumber = 2,
    kExchangeIdFieldNumber = 3,
    kExchangeInstIdFieldNumber = 4,
    kUpdateTimeFieldNumber = 21,
    kActionDayFieldNumber = 44,
    kLastPriceFieldNumber = 5,
    kPreSettlementPriceFieldNumber = 6,
    kPreClosePriceFieldNumber = 7,
    kPreOpenInterestFieldNumber = 8,
    kOpenPriceFieldNumber = 9,
    kHighestPriceFieldNumber = 10,
    kLowestPriceFieldNumber = 11,
    kTurnoverFieldNumber = 13,
    kOpenInterestFieldNumber = 14,
    kClosePriceFieldNumber = 15,
    kSettlementPriceFieldNumber = 16,
    kUpperLimitPriceFieldNumber = 17,
    kVolumeFieldNumber = 12,
    kUpdateMillisecFieldNumber = 22,
    kLowerLimitPriceFieldNumber = 18,
    kPreDeltaFieldNumber = 19,
    kCurrDeltaFieldNumber = 20,
    kBidPrice1FieldNumber = 23,
    kAskPrice1FieldNumber = 25,
    kBidVolume1FieldNumber = 24,
    kAskVolume1FieldNumber = 26,
    kBidPrice2FieldNumber = 27,
    kAskPrice2FieldNumber = 29,
    kBidVolume2FieldNumber = 28,
    kAskVolume2FieldNumber = 30,
    kBidPrice3FieldNumber = 31,
    kAskPrice3FieldNumber = 33,
    kBidVolume3FieldNumber = 32,
    kAskVolume3FieldNumber = 34,
    kBidPrice4FieldNumber = 35,
    kAskPrice4FieldNumber = 37,
    kBidVolume4FieldNumber = 36,
    kAskVolume4FieldNumber = 38,
    kBidPrice5FieldNumber = 39,
    kAskPrice5FieldNumber = 41,
    kBidVolume5FieldNumber = 40,
    kAskVolume5FieldNumber = 42,
    kAveragePriceFieldNumber = 43,
    kBandingUpperPriceFieldNumber = 45,
    kBandingLowerPriceFieldNumber = 46,
  };
  // string trading_day = 1;
  void clear_trading_day();
  const std::string& trading_day() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trading_day(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trading_day();
  PROTOBUF_NODISCARD std::string* release_trading_day();
  void set_allocated_trading_day(std::string* trading_day);
  private:
  const std::string& _internal_trading_day() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trading_day(const std::string& value);
  std::string* _internal_mutable_trading_day();
  public:

  // string instrument_id = 2;
  void clear_instrument_id();
  const std::string& instrument_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_id();
  PROTOBUF_NODISCARD std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* instrument_id);
  private:
  const std::string& _internal_instrument_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(const std::string& value);
  std::string* _internal_mutable_instrument_id();
  public:

  // string exchange_id = 3;
  void clear_exchange_id();
  const std::string& exchange_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exchange_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exchange_id();
  PROTOBUF_NODISCARD std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* exchange_id);
  private:
  const std::string& _internal_exchange_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_id(const std::string& value);
  std::string* _internal_mutable_exchange_id();
  public:

  // string exchange_inst_id = 4;
  void clear_exchange_inst_id();
  const std::string& exchange_inst_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exchange_inst_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exchange_inst_id();
  PROTOBUF_NODISCARD std::string* release_exchange_inst_id();
  void set_allocated_exchange_inst_id(std::string* exchange_inst_id);
  private:
  const std::string& _internal_exchange_inst_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_inst_id(const std::string& value);
  std::string* _internal_mutable_exchange_inst_id();
  public:

  // string update_time = 21;
  void clear_update_time();
  const std::string& update_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_update_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_update_time();
  PROTOBUF_NODISCARD std::string* release_update_time();
  void set_allocated_update_time(std::string* update_time);
  private:
  const std::string& _internal_update_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_update_time(const std::string& value);
  std::string* _internal_mutable_update_time();
  public:

  // string action_day = 44;
  void clear_action_day();
  const std::string& action_day() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action_day(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action_day();
  PROTOBUF_NODISCARD std::string* release_action_day();
  void set_allocated_action_day(std::string* action_day);
  private:
  const std::string& _internal_action_day() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action_day(const std::string& value);
  std::string* _internal_mutable_action_day();
  public:

  // double last_price = 5;
  void clear_last_price();
  double last_price() const;
  void set_last_price(double value);
  private:
  double _internal_last_price() const;
  void _internal_set_last_price(double value);
  public:

  // double pre_settlement_price = 6;
  void clear_pre_settlement_price();
  double pre_settlement_price() const;
  void set_pre_settlement_price(double value);
  private:
  double _internal_pre_settlement_price() const;
  void _internal_set_pre_settlement_price(double value);
  public:

  // double pre_close_price = 7;
  void clear_pre_close_price();
  double pre_close_price() const;
  void set_pre_close_price(double value);
  private:
  double _internal_pre_close_price() const;
  void _internal_set_pre_close_price(double value);
  public:

  // double pre_open_interest = 8;
  void clear_pre_open_interest();
  double pre_open_interest() const;
  void set_pre_open_interest(double value);
  private:
  double _internal_pre_open_interest() const;
  void _internal_set_pre_open_interest(double value);
  public:

  // double open_price = 9;
  void clear_open_price();
  double open_price() const;
  void set_open_price(double value);
  private:
  double _internal_open_price() const;
  void _internal_set_open_price(double value);
  public:

  // double highest_price = 10;
  void clear_highest_price();
  double highest_price() const;
  void set_highest_price(double value);
  private:
  double _internal_highest_price() const;
  void _internal_set_highest_price(double value);
  public:

  // double lowest_price = 11;
  void clear_lowest_price();
  double lowest_price() const;
  void set_lowest_price(double value);
  private:
  double _internal_lowest_price() const;
  void _internal_set_lowest_price(double value);
  public:

  // double turnover = 13;
  void clear_turnover();
  double turnover() const;
  void set_turnover(double value);
  private:
  double _internal_turnover() const;
  void _internal_set_turnover(double value);
  public:

  // double open_interest = 14;
  void clear_open_interest();
  double open_interest() const;
  void set_open_interest(double value);
  private:
  double _internal_open_interest() const;
  void _internal_set_open_interest(double value);
  public:

  // double close_price = 15;
  void clear_close_price();
  double close_price() const;
  void set_close_price(double value);
  private:
  double _internal_close_price() const;
  void _internal_set_close_price(double value);
  public:

  // double settlement_price = 16;
  void clear_settlement_price();
  double settlement_price() const;
  void set_settlement_price(double value);
  private:
  double _internal_settlement_price() const;
  void _internal_set_settlement_price(double value);
  public:

  // double upper_limit_price = 17;
  void clear_upper_limit_price();
  double upper_limit_price() const;
  void set_upper_limit_price(double value);
  private:
  double _internal_upper_limit_price() const;
  void _internal_set_upper_limit_price(double value);
  public:

  // int32 volume = 12;
  void clear_volume();
  int32_t volume() const;
  void set_volume(int32_t value);
  private:
  int32_t _internal_volume() const;
  void _internal_set_volume(int32_t value);
  public:

  // int32 update_millisec = 22;
  void clear_update_millisec();
  int32_t update_millisec() const;
  void set_update_millisec(int32_t value);
  private:
  int32_t _internal_update_millisec() const;
  void _internal_set_update_millisec(int32_t value);
  public:

  // double lower_limit_price = 18;
  void clear_lower_limit_price();
  double lower_limit_price() const;
  void set_lower_limit_price(double value);
  private:
  double _internal_lower_limit_price() const;
  void _internal_set_lower_limit_price(double value);
  public:

  // double pre_delta = 19;
  void clear_pre_delta();
  double pre_delta() const;
  void set_pre_delta(double value);
  private:
  double _internal_pre_delta() const;
  void _internal_set_pre_delta(double value);
  public:

  // double curr_delta = 20;
  void clear_curr_delta();
  double curr_delta() const;
  void set_curr_delta(double value);
  private:
  double _internal_curr_delta() const;
  void _internal_set_curr_delta(double value);
  public:

  // double bid_price_1 = 23;
  void clear_bid_price_1();
  double bid_price_1() const;
  void set_bid_price_1(double value);
  private:
  double _internal_bid_price_1() const;
  void _internal_set_bid_price_1(double value);
  public:

  // double ask_price_1 = 25;
  void clear_ask_price_1();
  double ask_price_1() const;
  void set_ask_price_1(double value);
  private:
  double _internal_ask_price_1() const;
  void _internal_set_ask_price_1(double value);
  public:

  // int32 bid_volume_1 = 24;
  void clear_bid_volume_1();
  int32_t bid_volume_1() const;
  void set_bid_volume_1(int32_t value);
  private:
  int32_t _internal_bid_volume_1() const;
  void _internal_set_bid_volume_1(int32_t value);
  public:

  // int32 ask_volume_1 = 26;
  void clear_ask_volume_1();
  int32_t ask_volume_1() const;
  void set_ask_volume_1(int32_t value);
  private:
  int32_t _internal_ask_volume_1() const;
  void _internal_set_ask_volume_1(int32_t value);
  public:

  // double bid_price_2 = 27;
  void clear_bid_price_2();
  double bid_price_2() const;
  void set_bid_price_2(double value);
  private:
  double _internal_bid_price_2() const;
  void _internal_set_bid_price_2(double value);
  public:

  // double ask_price_2 = 29;
  void clear_ask_price_2();
  double ask_price_2() const;
  void set_ask_price_2(double value);
  private:
  double _internal_ask_price_2() const;
  void _internal_set_ask_price_2(double value);
  public:

  // int32 bid_volume_2 = 28;
  void clear_bid_volume_2();
  int32_t bid_volume_2() const;
  void set_bid_volume_2(int32_t value);
  private:
  int32_t _internal_bid_volume_2() const;
  void _internal_set_bid_volume_2(int32_t value);
  public:

  // int32 ask_volume_2 = 30;
  void clear_ask_volume_2();
  int32_t ask_volume_2() const;
  void set_ask_volume_2(int32_t value);
  private:
  int32_t _internal_ask_volume_2() const;
  void _internal_set_ask_volume_2(int32_t value);
  public:

  // double bid_price_3 = 31;
  void clear_bid_price_3();
  double bid_price_3() const;
  void set_bid_price_3(double value);
  private:
  double _internal_bid_price_3() const;
  void _internal_set_bid_price_3(double value);
  public:

  // double ask_price_3 = 33;
  void clear_ask_price_3();
  double ask_price_3() const;
  void set_ask_price_3(double value);
  private:
  double _internal_ask_price_3() const;
  void _internal_set_ask_price_3(double value);
  public:

  // int32 bid_volume_3 = 32;
  void clear_bid_volume_3();
  int32_t bid_volume_3() const;
  void set_bid_volume_3(int32_t value);
  private:
  int32_t _internal_bid_volume_3() const;
  void _internal_set_bid_volume_3(int32_t value);
  public:

  // int32 ask_volume_3 = 34;
  void clear_ask_volume_3();
  int32_t ask_volume_3() const;
  void set_ask_volume_3(int32_t value);
  private:
  int32_t _internal_ask_volume_3() const;
  void _internal_set_ask_volume_3(int32_t value);
  public:

  // double bid_price_4 = 35;
  void clear_bid_price_4();
  double bid_price_4() const;
  void set_bid_price_4(double value);
  private:
  double _internal_bid_price_4() const;
  void _internal_set_bid_price_4(double value);
  public:

  // double ask_price_4 = 37;
  void clear_ask_price_4();
  double ask_price_4() const;
  void set_ask_price_4(double value);
  private:
  double _internal_ask_price_4() const;
  void _internal_set_ask_price_4(double value);
  public:

  // int32 bid_volume_4 = 36;
  void clear_bid_volume_4();
  int32_t bid_volume_4() const;
  void set_bid_volume_4(int32_t value);
  private:
  int32_t _internal_bid_volume_4() const;
  void _internal_set_bid_volume_4(int32_t value);
  public:

  // int32 ask_volume_4 = 38;
  void clear_ask_volume_4();
  int32_t ask_volume_4() const;
  void set_ask_volume_4(int32_t value);
  private:
  int32_t _internal_ask_volume_4() const;
  void _internal_set_ask_volume_4(int32_t value);
  public:

  // double bid_price_5 = 39;
  void clear_bid_price_5();
  double bid_price_5() const;
  void set_bid_price_5(double value);
  private:
  double _internal_bid_price_5() const;
  void _internal_set_bid_price_5(double value);
  public:

  // double ask_price_5 = 41;
  void clear_ask_price_5();
  double ask_price_5() const;
  void set_ask_price_5(double value);
  private:
  double _internal_ask_price_5() const;
  void _internal_set_ask_price_5(double value);
  public:

  // int32 bid_volume_5 = 40;
  void clear_bid_volume_5();
  int32_t bid_volume_5() const;
  void set_bid_volume_5(int32_t value);
  private:
  int32_t _internal_bid_volume_5() const;
  void _internal_set_bid_volume_5(int32_t value);
  public:

  // int32 ask_volume_5 = 42;
  void clear_ask_volume_5();
  int32_t ask_volume_5() const;
  void set_ask_volume_5(int32_t value);
  private:
  int32_t _internal_ask_volume_5() const;
  void _internal_set_ask_volume_5(int32_t value);
  public:

  // double average_price = 43;
  void clear_average_price();
  double average_price() const;
  void set_average_price(double value);
  private:
  double _internal_average_price() const;
  void _internal_set_average_price(double value);
  public:

  // double banding_upper_price = 45;
  void clear_banding_upper_price();
  double banding_upper_price() const;
  void set_banding_upper_price(double value);
  private:
  double _internal_banding_upper_price() const;
  void _internal_set_banding_upper_price(double value);
  public:

  // double banding_lower_price = 46;
  void clear_banding_lower_price();
  double banding_lower_price() const;
  void set_banding_lower_price(double value);
  private:
  double _internal_banding_lower_price() const;
  void _internal_set_banding_lower_price(double value);
  public:

  // @@protoc_insertion_point(class_scope:DepthTickInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trading_day_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_inst_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr update_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_day_;
  double last_price_;
  double pre_settlement_price_;
  double pre_close_price_;
  double pre_open_interest_;
  double open_price_;
  double highest_price_;
  double lowest_price_;
  double turnover_;
  double open_interest_;
  double close_price_;
  double settlement_price_;
  double upper_limit_price_;
  int32_t volume_;
  int32_t update_millisec_;
  double lower_limit_price_;
  double pre_delta_;
  double curr_delta_;
  double bid_price_1_;
  double ask_price_1_;
  int32_t bid_volume_1_;
  int32_t ask_volume_1_;
  double bid_price_2_;
  double ask_price_2_;
  int32_t bid_volume_2_;
  int32_t ask_volume_2_;
  double bid_price_3_;
  double ask_price_3_;
  int32_t bid_volume_3_;
  int32_t ask_volume_3_;
  double bid_price_4_;
  double ask_price_4_;
  int32_t bid_volume_4_;
  int32_t ask_volume_4_;
  double bid_price_5_;
  double ask_price_5_;
  int32_t bid_volume_5_;
  int32_t ask_volume_5_;
  double average_price_;
  double banding_upper_price_;
  double banding_lower_price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tick_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DepthTickInfo

// string trading_day = 1;
inline void DepthTickInfo::clear_trading_day() {
  trading_day_.ClearToEmpty();
}
inline const std::string& DepthTickInfo::trading_day() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.trading_day)
  return _internal_trading_day();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DepthTickInfo::set_trading_day(ArgT0&& arg0, ArgT... args) {
 
 trading_day_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DepthTickInfo.trading_day)
}
inline std::string* DepthTickInfo::mutable_trading_day() {
  std::string* _s = _internal_mutable_trading_day();
  // @@protoc_insertion_point(field_mutable:DepthTickInfo.trading_day)
  return _s;
}
inline const std::string& DepthTickInfo::_internal_trading_day() const {
  return trading_day_.Get();
}
inline void DepthTickInfo::_internal_set_trading_day(const std::string& value) {
  
  trading_day_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DepthTickInfo::_internal_mutable_trading_day() {
  
  return trading_day_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DepthTickInfo::release_trading_day() {
  // @@protoc_insertion_point(field_release:DepthTickInfo.trading_day)
  return trading_day_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DepthTickInfo::set_allocated_trading_day(std::string* trading_day) {
  if (trading_day != nullptr) {
    
  } else {
    
  }
  trading_day_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trading_day,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trading_day_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    trading_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DepthTickInfo.trading_day)
}

// string instrument_id = 2;
inline void DepthTickInfo::clear_instrument_id() {
  instrument_id_.ClearToEmpty();
}
inline const std::string& DepthTickInfo::instrument_id() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.instrument_id)
  return _internal_instrument_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DepthTickInfo::set_instrument_id(ArgT0&& arg0, ArgT... args) {
 
 instrument_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DepthTickInfo.instrument_id)
}
inline std::string* DepthTickInfo::mutable_instrument_id() {
  std::string* _s = _internal_mutable_instrument_id();
  // @@protoc_insertion_point(field_mutable:DepthTickInfo.instrument_id)
  return _s;
}
inline const std::string& DepthTickInfo::_internal_instrument_id() const {
  return instrument_id_.Get();
}
inline void DepthTickInfo::_internal_set_instrument_id(const std::string& value) {
  
  instrument_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DepthTickInfo::_internal_mutable_instrument_id() {
  
  return instrument_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DepthTickInfo::release_instrument_id() {
  // @@protoc_insertion_point(field_release:DepthTickInfo.instrument_id)
  return instrument_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DepthTickInfo::set_allocated_instrument_id(std::string* instrument_id) {
  if (instrument_id != nullptr) {
    
  } else {
    
  }
  instrument_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrument_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (instrument_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DepthTickInfo.instrument_id)
}

// string exchange_id = 3;
inline void DepthTickInfo::clear_exchange_id() {
  exchange_id_.ClearToEmpty();
}
inline const std::string& DepthTickInfo::exchange_id() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.exchange_id)
  return _internal_exchange_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DepthTickInfo::set_exchange_id(ArgT0&& arg0, ArgT... args) {
 
 exchange_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DepthTickInfo.exchange_id)
}
inline std::string* DepthTickInfo::mutable_exchange_id() {
  std::string* _s = _internal_mutable_exchange_id();
  // @@protoc_insertion_point(field_mutable:DepthTickInfo.exchange_id)
  return _s;
}
inline const std::string& DepthTickInfo::_internal_exchange_id() const {
  return exchange_id_.Get();
}
inline void DepthTickInfo::_internal_set_exchange_id(const std::string& value) {
  
  exchange_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DepthTickInfo::_internal_mutable_exchange_id() {
  
  return exchange_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DepthTickInfo::release_exchange_id() {
  // @@protoc_insertion_point(field_release:DepthTickInfo.exchange_id)
  return exchange_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DepthTickInfo::set_allocated_exchange_id(std::string* exchange_id) {
  if (exchange_id != nullptr) {
    
  } else {
    
  }
  exchange_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (exchange_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DepthTickInfo.exchange_id)
}

// string exchange_inst_id = 4;
inline void DepthTickInfo::clear_exchange_inst_id() {
  exchange_inst_id_.ClearToEmpty();
}
inline const std::string& DepthTickInfo::exchange_inst_id() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.exchange_inst_id)
  return _internal_exchange_inst_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DepthTickInfo::set_exchange_inst_id(ArgT0&& arg0, ArgT... args) {
 
 exchange_inst_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DepthTickInfo.exchange_inst_id)
}
inline std::string* DepthTickInfo::mutable_exchange_inst_id() {
  std::string* _s = _internal_mutable_exchange_inst_id();
  // @@protoc_insertion_point(field_mutable:DepthTickInfo.exchange_inst_id)
  return _s;
}
inline const std::string& DepthTickInfo::_internal_exchange_inst_id() const {
  return exchange_inst_id_.Get();
}
inline void DepthTickInfo::_internal_set_exchange_inst_id(const std::string& value) {
  
  exchange_inst_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DepthTickInfo::_internal_mutable_exchange_inst_id() {
  
  return exchange_inst_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DepthTickInfo::release_exchange_inst_id() {
  // @@protoc_insertion_point(field_release:DepthTickInfo.exchange_inst_id)
  return exchange_inst_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DepthTickInfo::set_allocated_exchange_inst_id(std::string* exchange_inst_id) {
  if (exchange_inst_id != nullptr) {
    
  } else {
    
  }
  exchange_inst_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_inst_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (exchange_inst_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    exchange_inst_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DepthTickInfo.exchange_inst_id)
}

// double last_price = 5;
inline void DepthTickInfo::clear_last_price() {
  last_price_ = 0;
}
inline double DepthTickInfo::_internal_last_price() const {
  return last_price_;
}
inline double DepthTickInfo::last_price() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.last_price)
  return _internal_last_price();
}
inline void DepthTickInfo::_internal_set_last_price(double value) {
  
  last_price_ = value;
}
inline void DepthTickInfo::set_last_price(double value) {
  _internal_set_last_price(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.last_price)
}

// double pre_settlement_price = 6;
inline void DepthTickInfo::clear_pre_settlement_price() {
  pre_settlement_price_ = 0;
}
inline double DepthTickInfo::_internal_pre_settlement_price() const {
  return pre_settlement_price_;
}
inline double DepthTickInfo::pre_settlement_price() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.pre_settlement_price)
  return _internal_pre_settlement_price();
}
inline void DepthTickInfo::_internal_set_pre_settlement_price(double value) {
  
  pre_settlement_price_ = value;
}
inline void DepthTickInfo::set_pre_settlement_price(double value) {
  _internal_set_pre_settlement_price(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.pre_settlement_price)
}

// double pre_close_price = 7;
inline void DepthTickInfo::clear_pre_close_price() {
  pre_close_price_ = 0;
}
inline double DepthTickInfo::_internal_pre_close_price() const {
  return pre_close_price_;
}
inline double DepthTickInfo::pre_close_price() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.pre_close_price)
  return _internal_pre_close_price();
}
inline void DepthTickInfo::_internal_set_pre_close_price(double value) {
  
  pre_close_price_ = value;
}
inline void DepthTickInfo::set_pre_close_price(double value) {
  _internal_set_pre_close_price(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.pre_close_price)
}

// double pre_open_interest = 8;
inline void DepthTickInfo::clear_pre_open_interest() {
  pre_open_interest_ = 0;
}
inline double DepthTickInfo::_internal_pre_open_interest() const {
  return pre_open_interest_;
}
inline double DepthTickInfo::pre_open_interest() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.pre_open_interest)
  return _internal_pre_open_interest();
}
inline void DepthTickInfo::_internal_set_pre_open_interest(double value) {
  
  pre_open_interest_ = value;
}
inline void DepthTickInfo::set_pre_open_interest(double value) {
  _internal_set_pre_open_interest(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.pre_open_interest)
}

// double open_price = 9;
inline void DepthTickInfo::clear_open_price() {
  open_price_ = 0;
}
inline double DepthTickInfo::_internal_open_price() const {
  return open_price_;
}
inline double DepthTickInfo::open_price() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.open_price)
  return _internal_open_price();
}
inline void DepthTickInfo::_internal_set_open_price(double value) {
  
  open_price_ = value;
}
inline void DepthTickInfo::set_open_price(double value) {
  _internal_set_open_price(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.open_price)
}

// double highest_price = 10;
inline void DepthTickInfo::clear_highest_price() {
  highest_price_ = 0;
}
inline double DepthTickInfo::_internal_highest_price() const {
  return highest_price_;
}
inline double DepthTickInfo::highest_price() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.highest_price)
  return _internal_highest_price();
}
inline void DepthTickInfo::_internal_set_highest_price(double value) {
  
  highest_price_ = value;
}
inline void DepthTickInfo::set_highest_price(double value) {
  _internal_set_highest_price(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.highest_price)
}

// double lowest_price = 11;
inline void DepthTickInfo::clear_lowest_price() {
  lowest_price_ = 0;
}
inline double DepthTickInfo::_internal_lowest_price() const {
  return lowest_price_;
}
inline double DepthTickInfo::lowest_price() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.lowest_price)
  return _internal_lowest_price();
}
inline void DepthTickInfo::_internal_set_lowest_price(double value) {
  
  lowest_price_ = value;
}
inline void DepthTickInfo::set_lowest_price(double value) {
  _internal_set_lowest_price(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.lowest_price)
}

// int32 volume = 12;
inline void DepthTickInfo::clear_volume() {
  volume_ = 0;
}
inline int32_t DepthTickInfo::_internal_volume() const {
  return volume_;
}
inline int32_t DepthTickInfo::volume() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.volume)
  return _internal_volume();
}
inline void DepthTickInfo::_internal_set_volume(int32_t value) {
  
  volume_ = value;
}
inline void DepthTickInfo::set_volume(int32_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.volume)
}

// double turnover = 13;
inline void DepthTickInfo::clear_turnover() {
  turnover_ = 0;
}
inline double DepthTickInfo::_internal_turnover() const {
  return turnover_;
}
inline double DepthTickInfo::turnover() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.turnover)
  return _internal_turnover();
}
inline void DepthTickInfo::_internal_set_turnover(double value) {
  
  turnover_ = value;
}
inline void DepthTickInfo::set_turnover(double value) {
  _internal_set_turnover(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.turnover)
}

// double open_interest = 14;
inline void DepthTickInfo::clear_open_interest() {
  open_interest_ = 0;
}
inline double DepthTickInfo::_internal_open_interest() const {
  return open_interest_;
}
inline double DepthTickInfo::open_interest() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.open_interest)
  return _internal_open_interest();
}
inline void DepthTickInfo::_internal_set_open_interest(double value) {
  
  open_interest_ = value;
}
inline void DepthTickInfo::set_open_interest(double value) {
  _internal_set_open_interest(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.open_interest)
}

// double close_price = 15;
inline void DepthTickInfo::clear_close_price() {
  close_price_ = 0;
}
inline double DepthTickInfo::_internal_close_price() const {
  return close_price_;
}
inline double DepthTickInfo::close_price() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.close_price)
  return _internal_close_price();
}
inline void DepthTickInfo::_internal_set_close_price(double value) {
  
  close_price_ = value;
}
inline void DepthTickInfo::set_close_price(double value) {
  _internal_set_close_price(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.close_price)
}

// double settlement_price = 16;
inline void DepthTickInfo::clear_settlement_price() {
  settlement_price_ = 0;
}
inline double DepthTickInfo::_internal_settlement_price() const {
  return settlement_price_;
}
inline double DepthTickInfo::settlement_price() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.settlement_price)
  return _internal_settlement_price();
}
inline void DepthTickInfo::_internal_set_settlement_price(double value) {
  
  settlement_price_ = value;
}
inline void DepthTickInfo::set_settlement_price(double value) {
  _internal_set_settlement_price(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.settlement_price)
}

// double upper_limit_price = 17;
inline void DepthTickInfo::clear_upper_limit_price() {
  upper_limit_price_ = 0;
}
inline double DepthTickInfo::_internal_upper_limit_price() const {
  return upper_limit_price_;
}
inline double DepthTickInfo::upper_limit_price() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.upper_limit_price)
  return _internal_upper_limit_price();
}
inline void DepthTickInfo::_internal_set_upper_limit_price(double value) {
  
  upper_limit_price_ = value;
}
inline void DepthTickInfo::set_upper_limit_price(double value) {
  _internal_set_upper_limit_price(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.upper_limit_price)
}

// double lower_limit_price = 18;
inline void DepthTickInfo::clear_lower_limit_price() {
  lower_limit_price_ = 0;
}
inline double DepthTickInfo::_internal_lower_limit_price() const {
  return lower_limit_price_;
}
inline double DepthTickInfo::lower_limit_price() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.lower_limit_price)
  return _internal_lower_limit_price();
}
inline void DepthTickInfo::_internal_set_lower_limit_price(double value) {
  
  lower_limit_price_ = value;
}
inline void DepthTickInfo::set_lower_limit_price(double value) {
  _internal_set_lower_limit_price(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.lower_limit_price)
}

// double pre_delta = 19;
inline void DepthTickInfo::clear_pre_delta() {
  pre_delta_ = 0;
}
inline double DepthTickInfo::_internal_pre_delta() const {
  return pre_delta_;
}
inline double DepthTickInfo::pre_delta() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.pre_delta)
  return _internal_pre_delta();
}
inline void DepthTickInfo::_internal_set_pre_delta(double value) {
  
  pre_delta_ = value;
}
inline void DepthTickInfo::set_pre_delta(double value) {
  _internal_set_pre_delta(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.pre_delta)
}

// double curr_delta = 20;
inline void DepthTickInfo::clear_curr_delta() {
  curr_delta_ = 0;
}
inline double DepthTickInfo::_internal_curr_delta() const {
  return curr_delta_;
}
inline double DepthTickInfo::curr_delta() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.curr_delta)
  return _internal_curr_delta();
}
inline void DepthTickInfo::_internal_set_curr_delta(double value) {
  
  curr_delta_ = value;
}
inline void DepthTickInfo::set_curr_delta(double value) {
  _internal_set_curr_delta(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.curr_delta)
}

// string update_time = 21;
inline void DepthTickInfo::clear_update_time() {
  update_time_.ClearToEmpty();
}
inline const std::string& DepthTickInfo::update_time() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.update_time)
  return _internal_update_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DepthTickInfo::set_update_time(ArgT0&& arg0, ArgT... args) {
 
 update_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DepthTickInfo.update_time)
}
inline std::string* DepthTickInfo::mutable_update_time() {
  std::string* _s = _internal_mutable_update_time();
  // @@protoc_insertion_point(field_mutable:DepthTickInfo.update_time)
  return _s;
}
inline const std::string& DepthTickInfo::_internal_update_time() const {
  return update_time_.Get();
}
inline void DepthTickInfo::_internal_set_update_time(const std::string& value) {
  
  update_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DepthTickInfo::_internal_mutable_update_time() {
  
  return update_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DepthTickInfo::release_update_time() {
  // @@protoc_insertion_point(field_release:DepthTickInfo.update_time)
  return update_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DepthTickInfo::set_allocated_update_time(std::string* update_time) {
  if (update_time != nullptr) {
    
  } else {
    
  }
  update_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), update_time,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (update_time_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    update_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DepthTickInfo.update_time)
}

// int32 update_millisec = 22;
inline void DepthTickInfo::clear_update_millisec() {
  update_millisec_ = 0;
}
inline int32_t DepthTickInfo::_internal_update_millisec() const {
  return update_millisec_;
}
inline int32_t DepthTickInfo::update_millisec() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.update_millisec)
  return _internal_update_millisec();
}
inline void DepthTickInfo::_internal_set_update_millisec(int32_t value) {
  
  update_millisec_ = value;
}
inline void DepthTickInfo::set_update_millisec(int32_t value) {
  _internal_set_update_millisec(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.update_millisec)
}

// double bid_price_1 = 23;
inline void DepthTickInfo::clear_bid_price_1() {
  bid_price_1_ = 0;
}
inline double DepthTickInfo::_internal_bid_price_1() const {
  return bid_price_1_;
}
inline double DepthTickInfo::bid_price_1() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.bid_price_1)
  return _internal_bid_price_1();
}
inline void DepthTickInfo::_internal_set_bid_price_1(double value) {
  
  bid_price_1_ = value;
}
inline void DepthTickInfo::set_bid_price_1(double value) {
  _internal_set_bid_price_1(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.bid_price_1)
}

// int32 bid_volume_1 = 24;
inline void DepthTickInfo::clear_bid_volume_1() {
  bid_volume_1_ = 0;
}
inline int32_t DepthTickInfo::_internal_bid_volume_1() const {
  return bid_volume_1_;
}
inline int32_t DepthTickInfo::bid_volume_1() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.bid_volume_1)
  return _internal_bid_volume_1();
}
inline void DepthTickInfo::_internal_set_bid_volume_1(int32_t value) {
  
  bid_volume_1_ = value;
}
inline void DepthTickInfo::set_bid_volume_1(int32_t value) {
  _internal_set_bid_volume_1(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.bid_volume_1)
}

// double ask_price_1 = 25;
inline void DepthTickInfo::clear_ask_price_1() {
  ask_price_1_ = 0;
}
inline double DepthTickInfo::_internal_ask_price_1() const {
  return ask_price_1_;
}
inline double DepthTickInfo::ask_price_1() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.ask_price_1)
  return _internal_ask_price_1();
}
inline void DepthTickInfo::_internal_set_ask_price_1(double value) {
  
  ask_price_1_ = value;
}
inline void DepthTickInfo::set_ask_price_1(double value) {
  _internal_set_ask_price_1(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.ask_price_1)
}

// int32 ask_volume_1 = 26;
inline void DepthTickInfo::clear_ask_volume_1() {
  ask_volume_1_ = 0;
}
inline int32_t DepthTickInfo::_internal_ask_volume_1() const {
  return ask_volume_1_;
}
inline int32_t DepthTickInfo::ask_volume_1() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.ask_volume_1)
  return _internal_ask_volume_1();
}
inline void DepthTickInfo::_internal_set_ask_volume_1(int32_t value) {
  
  ask_volume_1_ = value;
}
inline void DepthTickInfo::set_ask_volume_1(int32_t value) {
  _internal_set_ask_volume_1(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.ask_volume_1)
}

// double bid_price_2 = 27;
inline void DepthTickInfo::clear_bid_price_2() {
  bid_price_2_ = 0;
}
inline double DepthTickInfo::_internal_bid_price_2() const {
  return bid_price_2_;
}
inline double DepthTickInfo::bid_price_2() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.bid_price_2)
  return _internal_bid_price_2();
}
inline void DepthTickInfo::_internal_set_bid_price_2(double value) {
  
  bid_price_2_ = value;
}
inline void DepthTickInfo::set_bid_price_2(double value) {
  _internal_set_bid_price_2(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.bid_price_2)
}

// int32 bid_volume_2 = 28;
inline void DepthTickInfo::clear_bid_volume_2() {
  bid_volume_2_ = 0;
}
inline int32_t DepthTickInfo::_internal_bid_volume_2() const {
  return bid_volume_2_;
}
inline int32_t DepthTickInfo::bid_volume_2() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.bid_volume_2)
  return _internal_bid_volume_2();
}
inline void DepthTickInfo::_internal_set_bid_volume_2(int32_t value) {
  
  bid_volume_2_ = value;
}
inline void DepthTickInfo::set_bid_volume_2(int32_t value) {
  _internal_set_bid_volume_2(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.bid_volume_2)
}

// double ask_price_2 = 29;
inline void DepthTickInfo::clear_ask_price_2() {
  ask_price_2_ = 0;
}
inline double DepthTickInfo::_internal_ask_price_2() const {
  return ask_price_2_;
}
inline double DepthTickInfo::ask_price_2() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.ask_price_2)
  return _internal_ask_price_2();
}
inline void DepthTickInfo::_internal_set_ask_price_2(double value) {
  
  ask_price_2_ = value;
}
inline void DepthTickInfo::set_ask_price_2(double value) {
  _internal_set_ask_price_2(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.ask_price_2)
}

// int32 ask_volume_2 = 30;
inline void DepthTickInfo::clear_ask_volume_2() {
  ask_volume_2_ = 0;
}
inline int32_t DepthTickInfo::_internal_ask_volume_2() const {
  return ask_volume_2_;
}
inline int32_t DepthTickInfo::ask_volume_2() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.ask_volume_2)
  return _internal_ask_volume_2();
}
inline void DepthTickInfo::_internal_set_ask_volume_2(int32_t value) {
  
  ask_volume_2_ = value;
}
inline void DepthTickInfo::set_ask_volume_2(int32_t value) {
  _internal_set_ask_volume_2(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.ask_volume_2)
}

// double bid_price_3 = 31;
inline void DepthTickInfo::clear_bid_price_3() {
  bid_price_3_ = 0;
}
inline double DepthTickInfo::_internal_bid_price_3() const {
  return bid_price_3_;
}
inline double DepthTickInfo::bid_price_3() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.bid_price_3)
  return _internal_bid_price_3();
}
inline void DepthTickInfo::_internal_set_bid_price_3(double value) {
  
  bid_price_3_ = value;
}
inline void DepthTickInfo::set_bid_price_3(double value) {
  _internal_set_bid_price_3(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.bid_price_3)
}

// int32 bid_volume_3 = 32;
inline void DepthTickInfo::clear_bid_volume_3() {
  bid_volume_3_ = 0;
}
inline int32_t DepthTickInfo::_internal_bid_volume_3() const {
  return bid_volume_3_;
}
inline int32_t DepthTickInfo::bid_volume_3() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.bid_volume_3)
  return _internal_bid_volume_3();
}
inline void DepthTickInfo::_internal_set_bid_volume_3(int32_t value) {
  
  bid_volume_3_ = value;
}
inline void DepthTickInfo::set_bid_volume_3(int32_t value) {
  _internal_set_bid_volume_3(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.bid_volume_3)
}

// double ask_price_3 = 33;
inline void DepthTickInfo::clear_ask_price_3() {
  ask_price_3_ = 0;
}
inline double DepthTickInfo::_internal_ask_price_3() const {
  return ask_price_3_;
}
inline double DepthTickInfo::ask_price_3() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.ask_price_3)
  return _internal_ask_price_3();
}
inline void DepthTickInfo::_internal_set_ask_price_3(double value) {
  
  ask_price_3_ = value;
}
inline void DepthTickInfo::set_ask_price_3(double value) {
  _internal_set_ask_price_3(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.ask_price_3)
}

// int32 ask_volume_3 = 34;
inline void DepthTickInfo::clear_ask_volume_3() {
  ask_volume_3_ = 0;
}
inline int32_t DepthTickInfo::_internal_ask_volume_3() const {
  return ask_volume_3_;
}
inline int32_t DepthTickInfo::ask_volume_3() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.ask_volume_3)
  return _internal_ask_volume_3();
}
inline void DepthTickInfo::_internal_set_ask_volume_3(int32_t value) {
  
  ask_volume_3_ = value;
}
inline void DepthTickInfo::set_ask_volume_3(int32_t value) {
  _internal_set_ask_volume_3(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.ask_volume_3)
}

// double bid_price_4 = 35;
inline void DepthTickInfo::clear_bid_price_4() {
  bid_price_4_ = 0;
}
inline double DepthTickInfo::_internal_bid_price_4() const {
  return bid_price_4_;
}
inline double DepthTickInfo::bid_price_4() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.bid_price_4)
  return _internal_bid_price_4();
}
inline void DepthTickInfo::_internal_set_bid_price_4(double value) {
  
  bid_price_4_ = value;
}
inline void DepthTickInfo::set_bid_price_4(double value) {
  _internal_set_bid_price_4(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.bid_price_4)
}

// int32 bid_volume_4 = 36;
inline void DepthTickInfo::clear_bid_volume_4() {
  bid_volume_4_ = 0;
}
inline int32_t DepthTickInfo::_internal_bid_volume_4() const {
  return bid_volume_4_;
}
inline int32_t DepthTickInfo::bid_volume_4() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.bid_volume_4)
  return _internal_bid_volume_4();
}
inline void DepthTickInfo::_internal_set_bid_volume_4(int32_t value) {
  
  bid_volume_4_ = value;
}
inline void DepthTickInfo::set_bid_volume_4(int32_t value) {
  _internal_set_bid_volume_4(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.bid_volume_4)
}

// double ask_price_4 = 37;
inline void DepthTickInfo::clear_ask_price_4() {
  ask_price_4_ = 0;
}
inline double DepthTickInfo::_internal_ask_price_4() const {
  return ask_price_4_;
}
inline double DepthTickInfo::ask_price_4() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.ask_price_4)
  return _internal_ask_price_4();
}
inline void DepthTickInfo::_internal_set_ask_price_4(double value) {
  
  ask_price_4_ = value;
}
inline void DepthTickInfo::set_ask_price_4(double value) {
  _internal_set_ask_price_4(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.ask_price_4)
}

// int32 ask_volume_4 = 38;
inline void DepthTickInfo::clear_ask_volume_4() {
  ask_volume_4_ = 0;
}
inline int32_t DepthTickInfo::_internal_ask_volume_4() const {
  return ask_volume_4_;
}
inline int32_t DepthTickInfo::ask_volume_4() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.ask_volume_4)
  return _internal_ask_volume_4();
}
inline void DepthTickInfo::_internal_set_ask_volume_4(int32_t value) {
  
  ask_volume_4_ = value;
}
inline void DepthTickInfo::set_ask_volume_4(int32_t value) {
  _internal_set_ask_volume_4(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.ask_volume_4)
}

// double bid_price_5 = 39;
inline void DepthTickInfo::clear_bid_price_5() {
  bid_price_5_ = 0;
}
inline double DepthTickInfo::_internal_bid_price_5() const {
  return bid_price_5_;
}
inline double DepthTickInfo::bid_price_5() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.bid_price_5)
  return _internal_bid_price_5();
}
inline void DepthTickInfo::_internal_set_bid_price_5(double value) {
  
  bid_price_5_ = value;
}
inline void DepthTickInfo::set_bid_price_5(double value) {
  _internal_set_bid_price_5(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.bid_price_5)
}

// int32 bid_volume_5 = 40;
inline void DepthTickInfo::clear_bid_volume_5() {
  bid_volume_5_ = 0;
}
inline int32_t DepthTickInfo::_internal_bid_volume_5() const {
  return bid_volume_5_;
}
inline int32_t DepthTickInfo::bid_volume_5() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.bid_volume_5)
  return _internal_bid_volume_5();
}
inline void DepthTickInfo::_internal_set_bid_volume_5(int32_t value) {
  
  bid_volume_5_ = value;
}
inline void DepthTickInfo::set_bid_volume_5(int32_t value) {
  _internal_set_bid_volume_5(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.bid_volume_5)
}

// double ask_price_5 = 41;
inline void DepthTickInfo::clear_ask_price_5() {
  ask_price_5_ = 0;
}
inline double DepthTickInfo::_internal_ask_price_5() const {
  return ask_price_5_;
}
inline double DepthTickInfo::ask_price_5() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.ask_price_5)
  return _internal_ask_price_5();
}
inline void DepthTickInfo::_internal_set_ask_price_5(double value) {
  
  ask_price_5_ = value;
}
inline void DepthTickInfo::set_ask_price_5(double value) {
  _internal_set_ask_price_5(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.ask_price_5)
}

// int32 ask_volume_5 = 42;
inline void DepthTickInfo::clear_ask_volume_5() {
  ask_volume_5_ = 0;
}
inline int32_t DepthTickInfo::_internal_ask_volume_5() const {
  return ask_volume_5_;
}
inline int32_t DepthTickInfo::ask_volume_5() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.ask_volume_5)
  return _internal_ask_volume_5();
}
inline void DepthTickInfo::_internal_set_ask_volume_5(int32_t value) {
  
  ask_volume_5_ = value;
}
inline void DepthTickInfo::set_ask_volume_5(int32_t value) {
  _internal_set_ask_volume_5(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.ask_volume_5)
}

// double average_price = 43;
inline void DepthTickInfo::clear_average_price() {
  average_price_ = 0;
}
inline double DepthTickInfo::_internal_average_price() const {
  return average_price_;
}
inline double DepthTickInfo::average_price() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.average_price)
  return _internal_average_price();
}
inline void DepthTickInfo::_internal_set_average_price(double value) {
  
  average_price_ = value;
}
inline void DepthTickInfo::set_average_price(double value) {
  _internal_set_average_price(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.average_price)
}

// string action_day = 44;
inline void DepthTickInfo::clear_action_day() {
  action_day_.ClearToEmpty();
}
inline const std::string& DepthTickInfo::action_day() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.action_day)
  return _internal_action_day();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DepthTickInfo::set_action_day(ArgT0&& arg0, ArgT... args) {
 
 action_day_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DepthTickInfo.action_day)
}
inline std::string* DepthTickInfo::mutable_action_day() {
  std::string* _s = _internal_mutable_action_day();
  // @@protoc_insertion_point(field_mutable:DepthTickInfo.action_day)
  return _s;
}
inline const std::string& DepthTickInfo::_internal_action_day() const {
  return action_day_.Get();
}
inline void DepthTickInfo::_internal_set_action_day(const std::string& value) {
  
  action_day_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DepthTickInfo::_internal_mutable_action_day() {
  
  return action_day_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DepthTickInfo::release_action_day() {
  // @@protoc_insertion_point(field_release:DepthTickInfo.action_day)
  return action_day_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DepthTickInfo::set_allocated_action_day(std::string* action_day) {
  if (action_day != nullptr) {
    
  } else {
    
  }
  action_day_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action_day,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_day_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    action_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DepthTickInfo.action_day)
}

// double banding_upper_price = 45;
inline void DepthTickInfo::clear_banding_upper_price() {
  banding_upper_price_ = 0;
}
inline double DepthTickInfo::_internal_banding_upper_price() const {
  return banding_upper_price_;
}
inline double DepthTickInfo::banding_upper_price() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.banding_upper_price)
  return _internal_banding_upper_price();
}
inline void DepthTickInfo::_internal_set_banding_upper_price(double value) {
  
  banding_upper_price_ = value;
}
inline void DepthTickInfo::set_banding_upper_price(double value) {
  _internal_set_banding_upper_price(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.banding_upper_price)
}

// double banding_lower_price = 46;
inline void DepthTickInfo::clear_banding_lower_price() {
  banding_lower_price_ = 0;
}
inline double DepthTickInfo::_internal_banding_lower_price() const {
  return banding_lower_price_;
}
inline double DepthTickInfo::banding_lower_price() const {
  // @@protoc_insertion_point(field_get:DepthTickInfo.banding_lower_price)
  return _internal_banding_lower_price();
}
inline void DepthTickInfo::_internal_set_banding_lower_price(double value) {
  
  banding_lower_price_ = value;
}
inline void DepthTickInfo::set_banding_lower_price(double value) {
  _internal_set_banding_lower_price(value);
  // @@protoc_insertion_point(field_set:DepthTickInfo.banding_lower_price)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tick_2eproto
