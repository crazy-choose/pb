// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tick.proto

#include "tick.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr DepthTickInfo::DepthTickInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trading_day_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , instrument_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , exchange_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , exchange_inst_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , update_time_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , action_day_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_price_(0)
  , pre_settlement_price_(0)
  , pre_close_price_(0)
  , pre_open_interest_(0)
  , open_price_(0)
  , highest_price_(0)
  , lowest_price_(0)
  , turnover_(0)
  , open_interest_(0)
  , close_price_(0)
  , settlement_price_(0)
  , upper_limit_price_(0)
  , volume_(0)
  , update_millisec_(0)
  , lower_limit_price_(0)
  , pre_delta_(0)
  , curr_delta_(0)
  , bid_price_1_(0)
  , ask_price_1_(0)
  , bid_volume_1_(0)
  , ask_volume_1_(0)
  , bid_price_2_(0)
  , ask_price_2_(0)
  , bid_volume_2_(0)
  , ask_volume_2_(0)
  , bid_price_3_(0)
  , ask_price_3_(0)
  , bid_volume_3_(0)
  , ask_volume_3_(0)
  , bid_price_4_(0)
  , ask_price_4_(0)
  , bid_volume_4_(0)
  , ask_volume_4_(0)
  , bid_price_5_(0)
  , ask_price_5_(0)
  , bid_volume_5_(0)
  , ask_volume_5_(0)
  , average_price_(0)
  , banding_upper_price_(0)
  , banding_lower_price_(0){}
struct DepthTickInfoDefaultTypeInternal {
  constexpr DepthTickInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DepthTickInfoDefaultTypeInternal() {}
  union {
    DepthTickInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DepthTickInfoDefaultTypeInternal _DepthTickInfo_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tick_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tick_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tick_2eproto = nullptr;

const uint32_t TableStruct_tick_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, trading_day_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, instrument_id_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, exchange_id_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, exchange_inst_id_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, last_price_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, pre_settlement_price_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, pre_close_price_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, pre_open_interest_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, open_price_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, highest_price_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, lowest_price_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, volume_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, turnover_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, open_interest_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, close_price_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, settlement_price_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, upper_limit_price_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, lower_limit_price_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, pre_delta_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, curr_delta_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, update_time_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, update_millisec_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, bid_price_1_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, bid_volume_1_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, ask_price_1_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, ask_volume_1_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, bid_price_2_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, bid_volume_2_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, ask_price_2_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, ask_volume_2_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, bid_price_3_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, bid_volume_3_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, ask_price_3_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, ask_volume_3_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, bid_price_4_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, bid_volume_4_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, ask_price_4_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, ask_volume_4_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, bid_price_5_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, bid_volume_5_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, ask_price_5_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, ask_volume_5_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, average_price_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, action_day_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, banding_upper_price_),
  PROTOBUF_FIELD_OFFSET(::DepthTickInfo, banding_lower_price_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::DepthTickInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DepthTickInfo_default_instance_),
};

const char descriptor_table_protodef_tick_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ntick.proto\"\227\010\n\rDepthTickInfo\022\023\n\013tradin"
  "g_day\030\001 \001(\t\022\025\n\rinstrument_id\030\002 \001(\t\022\023\n\013ex"
  "change_id\030\003 \001(\t\022\030\n\020exchange_inst_id\030\004 \001("
  "\t\022\022\n\nlast_price\030\005 \001(\001\022\034\n\024pre_settlement_"
  "price\030\006 \001(\001\022\027\n\017pre_close_price\030\007 \001(\001\022\031\n\021"
  "pre_open_interest\030\010 \001(\001\022\022\n\nopen_price\030\t "
  "\001(\001\022\025\n\rhighest_price\030\n \001(\001\022\024\n\014lowest_pri"
  "ce\030\013 \001(\001\022\016\n\006volume\030\014 \001(\005\022\020\n\010turnover\030\r \001"
  "(\001\022\025\n\ropen_interest\030\016 \001(\001\022\023\n\013close_price"
  "\030\017 \001(\001\022\030\n\020settlement_price\030\020 \001(\001\022\031\n\021uppe"
  "r_limit_price\030\021 \001(\001\022\031\n\021lower_limit_price"
  "\030\022 \001(\001\022\021\n\tpre_delta\030\023 \001(\001\022\022\n\ncurr_delta\030"
  "\024 \001(\001\022\023\n\013update_time\030\025 \001(\t\022\027\n\017update_mil"
  "lisec\030\026 \001(\005\022\023\n\013bid_price_1\030\027 \001(\001\022\024\n\014bid_"
  "volume_1\030\030 \001(\005\022\023\n\013ask_price_1\030\031 \001(\001\022\024\n\014a"
  "sk_volume_1\030\032 \001(\005\022\023\n\013bid_price_2\030\033 \001(\001\022\024"
  "\n\014bid_volume_2\030\034 \001(\005\022\023\n\013ask_price_2\030\035 \001("
  "\001\022\024\n\014ask_volume_2\030\036 \001(\005\022\023\n\013bid_price_3\030\037"
  " \001(\001\022\024\n\014bid_volume_3\030  \001(\005\022\023\n\013ask_price_"
  "3\030! \001(\001\022\024\n\014ask_volume_3\030\" \001(\005\022\023\n\013bid_pri"
  "ce_4\030# \001(\001\022\024\n\014bid_volume_4\030$ \001(\005\022\023\n\013ask_"
  "price_4\030% \001(\001\022\024\n\014ask_volume_4\030& \001(\005\022\023\n\013b"
  "id_price_5\030\' \001(\001\022\024\n\014bid_volume_5\030( \001(\005\022\023"
  "\n\013ask_price_5\030) \001(\001\022\024\n\014ask_volume_5\030* \001("
  "\005\022\025\n\raverage_price\030+ \001(\001\022\022\n\naction_day\030,"
  " \001(\t\022\033\n\023banding_upper_price\030- \001(\001\022\033\n\023ban"
  "ding_lower_price\030. \001(\001B\014Z\n/out/modelb\006pr"
  "oto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tick_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tick_2eproto = {
  false, false, 1084, descriptor_table_protodef_tick_2eproto, "tick.proto", 
  &descriptor_table_tick_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_tick_2eproto::offsets,
  file_level_metadata_tick_2eproto, file_level_enum_descriptors_tick_2eproto, file_level_service_descriptors_tick_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_tick_2eproto_getter() {
  return &descriptor_table_tick_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_tick_2eproto(&descriptor_table_tick_2eproto);

// ===================================================================

class DepthTickInfo::_Internal {
 public:
};

DepthTickInfo::DepthTickInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DepthTickInfo)
}
DepthTickInfo::DepthTickInfo(const DepthTickInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trading_day_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trading_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trading_day().empty()) {
    trading_day_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_trading_day(), 
      GetArenaForAllocation());
  }
  instrument_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_id().empty()) {
    instrument_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_instrument_id(), 
      GetArenaForAllocation());
  }
  exchange_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange_id().empty()) {
    exchange_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_exchange_id(), 
      GetArenaForAllocation());
  }
  exchange_inst_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    exchange_inst_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange_inst_id().empty()) {
    exchange_inst_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_exchange_inst_id(), 
      GetArenaForAllocation());
  }
  update_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    update_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_update_time().empty()) {
    update_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_update_time(), 
      GetArenaForAllocation());
  }
  action_day_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action_day().empty()) {
    action_day_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action_day(), 
      GetArenaForAllocation());
  }
  ::memcpy(&last_price_, &from.last_price_,
    static_cast<size_t>(reinterpret_cast<char*>(&banding_lower_price_) -
    reinterpret_cast<char*>(&last_price_)) + sizeof(banding_lower_price_));
  // @@protoc_insertion_point(copy_constructor:DepthTickInfo)
}

inline void DepthTickInfo::SharedCtor() {
trading_day_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trading_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
instrument_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
exchange_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
exchange_inst_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  exchange_inst_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
update_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  update_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
action_day_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&last_price_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&banding_lower_price_) -
    reinterpret_cast<char*>(&last_price_)) + sizeof(banding_lower_price_));
}

DepthTickInfo::~DepthTickInfo() {
  // @@protoc_insertion_point(destructor:DepthTickInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DepthTickInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  trading_day_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrument_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_inst_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  update_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_day_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DepthTickInfo::ArenaDtor(void* object) {
  DepthTickInfo* _this = reinterpret_cast< DepthTickInfo* >(object);
  (void)_this;
}
void DepthTickInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DepthTickInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DepthTickInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:DepthTickInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trading_day_.ClearToEmpty();
  instrument_id_.ClearToEmpty();
  exchange_id_.ClearToEmpty();
  exchange_inst_id_.ClearToEmpty();
  update_time_.ClearToEmpty();
  action_day_.ClearToEmpty();
  ::memset(&last_price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&banding_lower_price_) -
      reinterpret_cast<char*>(&last_price_)) + sizeof(banding_lower_price_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DepthTickInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string trading_day = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_trading_day();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DepthTickInfo.trading_day"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string instrument_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DepthTickInfo.instrument_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string exchange_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_exchange_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DepthTickInfo.exchange_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string exchange_inst_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_exchange_inst_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DepthTickInfo.exchange_inst_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double last_price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          last_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double pre_settlement_price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          pre_settlement_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double pre_close_price = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          pre_close_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double pre_open_interest = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          pre_open_interest_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double open_price = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          open_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double highest_price = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          highest_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double lowest_price = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          lowest_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 volume = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double turnover = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          turnover_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double open_interest = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          open_interest_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double close_price = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          close_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double settlement_price = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          settlement_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double upper_limit_price = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          upper_limit_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double lower_limit_price = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          lower_limit_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double pre_delta = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          pre_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double curr_delta = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          curr_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string update_time = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_update_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DepthTickInfo.update_time"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 update_millisec = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          update_millisec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double bid_price_1 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 185)) {
          bid_price_1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 bid_volume_1 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          bid_volume_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double ask_price_1 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          ask_price_1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 ask_volume_1 = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          ask_volume_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double bid_price_2 = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 217)) {
          bid_price_2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 bid_volume_2 = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          bid_volume_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double ask_price_2 = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 233)) {
          ask_price_2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 ask_volume_2 = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          ask_volume_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double bid_price_3 = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 249)) {
          bid_price_3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 bid_volume_3 = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          bid_volume_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double ask_price_3 = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          ask_price_3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 ask_volume_3 = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ask_volume_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double bid_price_4 = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          bid_price_4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 bid_volume_4 = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          bid_volume_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double ask_price_4 = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          ask_price_4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 ask_volume_4 = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ask_volume_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double bid_price_5 = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          bid_price_5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 bid_volume_5 = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          bid_volume_5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double ask_price_5 = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          ask_price_5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 ask_volume_5 = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          ask_volume_5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double average_price = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          average_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string action_day = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_action_day();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DepthTickInfo.action_day"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double banding_upper_price = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          banding_upper_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double banding_lower_price = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          banding_lower_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DepthTickInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DepthTickInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string trading_day = 1;
  if (!this->_internal_trading_day().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trading_day().data(), static_cast<int>(this->_internal_trading_day().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DepthTickInfo.trading_day");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_trading_day(), target);
  }

  // string instrument_id = 2;
  if (!this->_internal_instrument_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DepthTickInfo.instrument_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instrument_id(), target);
  }

  // string exchange_id = 3;
  if (!this->_internal_exchange_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange_id().data(), static_cast<int>(this->_internal_exchange_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DepthTickInfo.exchange_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_exchange_id(), target);
  }

  // string exchange_inst_id = 4;
  if (!this->_internal_exchange_inst_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange_inst_id().data(), static_cast<int>(this->_internal_exchange_inst_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DepthTickInfo.exchange_inst_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_exchange_inst_id(), target);
  }

  // double last_price = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_last_price = this->_internal_last_price();
  uint64_t raw_last_price;
  memcpy(&raw_last_price, &tmp_last_price, sizeof(tmp_last_price));
  if (raw_last_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_last_price(), target);
  }

  // double pre_settlement_price = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pre_settlement_price = this->_internal_pre_settlement_price();
  uint64_t raw_pre_settlement_price;
  memcpy(&raw_pre_settlement_price, &tmp_pre_settlement_price, sizeof(tmp_pre_settlement_price));
  if (raw_pre_settlement_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_pre_settlement_price(), target);
  }

  // double pre_close_price = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pre_close_price = this->_internal_pre_close_price();
  uint64_t raw_pre_close_price;
  memcpy(&raw_pre_close_price, &tmp_pre_close_price, sizeof(tmp_pre_close_price));
  if (raw_pre_close_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_pre_close_price(), target);
  }

  // double pre_open_interest = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pre_open_interest = this->_internal_pre_open_interest();
  uint64_t raw_pre_open_interest;
  memcpy(&raw_pre_open_interest, &tmp_pre_open_interest, sizeof(tmp_pre_open_interest));
  if (raw_pre_open_interest != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_pre_open_interest(), target);
  }

  // double open_price = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_open_price = this->_internal_open_price();
  uint64_t raw_open_price;
  memcpy(&raw_open_price, &tmp_open_price, sizeof(tmp_open_price));
  if (raw_open_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_open_price(), target);
  }

  // double highest_price = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_highest_price = this->_internal_highest_price();
  uint64_t raw_highest_price;
  memcpy(&raw_highest_price, &tmp_highest_price, sizeof(tmp_highest_price));
  if (raw_highest_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_highest_price(), target);
  }

  // double lowest_price = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lowest_price = this->_internal_lowest_price();
  uint64_t raw_lowest_price;
  memcpy(&raw_lowest_price, &tmp_lowest_price, sizeof(tmp_lowest_price));
  if (raw_lowest_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_lowest_price(), target);
  }

  // int32 volume = 12;
  if (this->_internal_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_volume(), target);
  }

  // double turnover = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_turnover = this->_internal_turnover();
  uint64_t raw_turnover;
  memcpy(&raw_turnover, &tmp_turnover, sizeof(tmp_turnover));
  if (raw_turnover != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_turnover(), target);
  }

  // double open_interest = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_open_interest = this->_internal_open_interest();
  uint64_t raw_open_interest;
  memcpy(&raw_open_interest, &tmp_open_interest, sizeof(tmp_open_interest));
  if (raw_open_interest != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_open_interest(), target);
  }

  // double close_price = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_close_price = this->_internal_close_price();
  uint64_t raw_close_price;
  memcpy(&raw_close_price, &tmp_close_price, sizeof(tmp_close_price));
  if (raw_close_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_close_price(), target);
  }

  // double settlement_price = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_settlement_price = this->_internal_settlement_price();
  uint64_t raw_settlement_price;
  memcpy(&raw_settlement_price, &tmp_settlement_price, sizeof(tmp_settlement_price));
  if (raw_settlement_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_settlement_price(), target);
  }

  // double upper_limit_price = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_upper_limit_price = this->_internal_upper_limit_price();
  uint64_t raw_upper_limit_price;
  memcpy(&raw_upper_limit_price, &tmp_upper_limit_price, sizeof(tmp_upper_limit_price));
  if (raw_upper_limit_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_upper_limit_price(), target);
  }

  // double lower_limit_price = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lower_limit_price = this->_internal_lower_limit_price();
  uint64_t raw_lower_limit_price;
  memcpy(&raw_lower_limit_price, &tmp_lower_limit_price, sizeof(tmp_lower_limit_price));
  if (raw_lower_limit_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_lower_limit_price(), target);
  }

  // double pre_delta = 19;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pre_delta = this->_internal_pre_delta();
  uint64_t raw_pre_delta;
  memcpy(&raw_pre_delta, &tmp_pre_delta, sizeof(tmp_pre_delta));
  if (raw_pre_delta != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_pre_delta(), target);
  }

  // double curr_delta = 20;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_curr_delta = this->_internal_curr_delta();
  uint64_t raw_curr_delta;
  memcpy(&raw_curr_delta, &tmp_curr_delta, sizeof(tmp_curr_delta));
  if (raw_curr_delta != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_curr_delta(), target);
  }

  // string update_time = 21;
  if (!this->_internal_update_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_update_time().data(), static_cast<int>(this->_internal_update_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DepthTickInfo.update_time");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_update_time(), target);
  }

  // int32 update_millisec = 22;
  if (this->_internal_update_millisec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_update_millisec(), target);
  }

  // double bid_price_1 = 23;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bid_price_1 = this->_internal_bid_price_1();
  uint64_t raw_bid_price_1;
  memcpy(&raw_bid_price_1, &tmp_bid_price_1, sizeof(tmp_bid_price_1));
  if (raw_bid_price_1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->_internal_bid_price_1(), target);
  }

  // int32 bid_volume_1 = 24;
  if (this->_internal_bid_volume_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_bid_volume_1(), target);
  }

  // double ask_price_1 = 25;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ask_price_1 = this->_internal_ask_price_1();
  uint64_t raw_ask_price_1;
  memcpy(&raw_ask_price_1, &tmp_ask_price_1, sizeof(tmp_ask_price_1));
  if (raw_ask_price_1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_ask_price_1(), target);
  }

  // int32 ask_volume_1 = 26;
  if (this->_internal_ask_volume_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_ask_volume_1(), target);
  }

  // double bid_price_2 = 27;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bid_price_2 = this->_internal_bid_price_2();
  uint64_t raw_bid_price_2;
  memcpy(&raw_bid_price_2, &tmp_bid_price_2, sizeof(tmp_bid_price_2));
  if (raw_bid_price_2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_bid_price_2(), target);
  }

  // int32 bid_volume_2 = 28;
  if (this->_internal_bid_volume_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->_internal_bid_volume_2(), target);
  }

  // double ask_price_2 = 29;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ask_price_2 = this->_internal_ask_price_2();
  uint64_t raw_ask_price_2;
  memcpy(&raw_ask_price_2, &tmp_ask_price_2, sizeof(tmp_ask_price_2));
  if (raw_ask_price_2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(29, this->_internal_ask_price_2(), target);
  }

  // int32 ask_volume_2 = 30;
  if (this->_internal_ask_volume_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_ask_volume_2(), target);
  }

  // double bid_price_3 = 31;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bid_price_3 = this->_internal_bid_price_3();
  uint64_t raw_bid_price_3;
  memcpy(&raw_bid_price_3, &tmp_bid_price_3, sizeof(tmp_bid_price_3));
  if (raw_bid_price_3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(31, this->_internal_bid_price_3(), target);
  }

  // int32 bid_volume_3 = 32;
  if (this->_internal_bid_volume_3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(32, this->_internal_bid_volume_3(), target);
  }

  // double ask_price_3 = 33;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ask_price_3 = this->_internal_ask_price_3();
  uint64_t raw_ask_price_3;
  memcpy(&raw_ask_price_3, &tmp_ask_price_3, sizeof(tmp_ask_price_3));
  if (raw_ask_price_3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(33, this->_internal_ask_price_3(), target);
  }

  // int32 ask_volume_3 = 34;
  if (this->_internal_ask_volume_3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(34, this->_internal_ask_volume_3(), target);
  }

  // double bid_price_4 = 35;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bid_price_4 = this->_internal_bid_price_4();
  uint64_t raw_bid_price_4;
  memcpy(&raw_bid_price_4, &tmp_bid_price_4, sizeof(tmp_bid_price_4));
  if (raw_bid_price_4 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(35, this->_internal_bid_price_4(), target);
  }

  // int32 bid_volume_4 = 36;
  if (this->_internal_bid_volume_4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(36, this->_internal_bid_volume_4(), target);
  }

  // double ask_price_4 = 37;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ask_price_4 = this->_internal_ask_price_4();
  uint64_t raw_ask_price_4;
  memcpy(&raw_ask_price_4, &tmp_ask_price_4, sizeof(tmp_ask_price_4));
  if (raw_ask_price_4 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(37, this->_internal_ask_price_4(), target);
  }

  // int32 ask_volume_4 = 38;
  if (this->_internal_ask_volume_4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(38, this->_internal_ask_volume_4(), target);
  }

  // double bid_price_5 = 39;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bid_price_5 = this->_internal_bid_price_5();
  uint64_t raw_bid_price_5;
  memcpy(&raw_bid_price_5, &tmp_bid_price_5, sizeof(tmp_bid_price_5));
  if (raw_bid_price_5 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(39, this->_internal_bid_price_5(), target);
  }

  // int32 bid_volume_5 = 40;
  if (this->_internal_bid_volume_5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_bid_volume_5(), target);
  }

  // double ask_price_5 = 41;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ask_price_5 = this->_internal_ask_price_5();
  uint64_t raw_ask_price_5;
  memcpy(&raw_ask_price_5, &tmp_ask_price_5, sizeof(tmp_ask_price_5));
  if (raw_ask_price_5 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(41, this->_internal_ask_price_5(), target);
  }

  // int32 ask_volume_5 = 42;
  if (this->_internal_ask_volume_5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(42, this->_internal_ask_volume_5(), target);
  }

  // double average_price = 43;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_average_price = this->_internal_average_price();
  uint64_t raw_average_price;
  memcpy(&raw_average_price, &tmp_average_price, sizeof(tmp_average_price));
  if (raw_average_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(43, this->_internal_average_price(), target);
  }

  // string action_day = 44;
  if (!this->_internal_action_day().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action_day().data(), static_cast<int>(this->_internal_action_day().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DepthTickInfo.action_day");
    target = stream->WriteStringMaybeAliased(
        44, this->_internal_action_day(), target);
  }

  // double banding_upper_price = 45;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_banding_upper_price = this->_internal_banding_upper_price();
  uint64_t raw_banding_upper_price;
  memcpy(&raw_banding_upper_price, &tmp_banding_upper_price, sizeof(tmp_banding_upper_price));
  if (raw_banding_upper_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(45, this->_internal_banding_upper_price(), target);
  }

  // double banding_lower_price = 46;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_banding_lower_price = this->_internal_banding_lower_price();
  uint64_t raw_banding_lower_price;
  memcpy(&raw_banding_lower_price, &tmp_banding_lower_price, sizeof(tmp_banding_lower_price));
  if (raw_banding_lower_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(46, this->_internal_banding_lower_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DepthTickInfo)
  return target;
}

size_t DepthTickInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DepthTickInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trading_day = 1;
  if (!this->_internal_trading_day().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trading_day());
  }

  // string instrument_id = 2;
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_id());
  }

  // string exchange_id = 3;
  if (!this->_internal_exchange_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange_id());
  }

  // string exchange_inst_id = 4;
  if (!this->_internal_exchange_inst_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange_inst_id());
  }

  // string update_time = 21;
  if (!this->_internal_update_time().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_update_time());
  }

  // string action_day = 44;
  if (!this->_internal_action_day().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action_day());
  }

  // double last_price = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_last_price = this->_internal_last_price();
  uint64_t raw_last_price;
  memcpy(&raw_last_price, &tmp_last_price, sizeof(tmp_last_price));
  if (raw_last_price != 0) {
    total_size += 1 + 8;
  }

  // double pre_settlement_price = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pre_settlement_price = this->_internal_pre_settlement_price();
  uint64_t raw_pre_settlement_price;
  memcpy(&raw_pre_settlement_price, &tmp_pre_settlement_price, sizeof(tmp_pre_settlement_price));
  if (raw_pre_settlement_price != 0) {
    total_size += 1 + 8;
  }

  // double pre_close_price = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pre_close_price = this->_internal_pre_close_price();
  uint64_t raw_pre_close_price;
  memcpy(&raw_pre_close_price, &tmp_pre_close_price, sizeof(tmp_pre_close_price));
  if (raw_pre_close_price != 0) {
    total_size += 1 + 8;
  }

  // double pre_open_interest = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pre_open_interest = this->_internal_pre_open_interest();
  uint64_t raw_pre_open_interest;
  memcpy(&raw_pre_open_interest, &tmp_pre_open_interest, sizeof(tmp_pre_open_interest));
  if (raw_pre_open_interest != 0) {
    total_size += 1 + 8;
  }

  // double open_price = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_open_price = this->_internal_open_price();
  uint64_t raw_open_price;
  memcpy(&raw_open_price, &tmp_open_price, sizeof(tmp_open_price));
  if (raw_open_price != 0) {
    total_size += 1 + 8;
  }

  // double highest_price = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_highest_price = this->_internal_highest_price();
  uint64_t raw_highest_price;
  memcpy(&raw_highest_price, &tmp_highest_price, sizeof(tmp_highest_price));
  if (raw_highest_price != 0) {
    total_size += 1 + 8;
  }

  // double lowest_price = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lowest_price = this->_internal_lowest_price();
  uint64_t raw_lowest_price;
  memcpy(&raw_lowest_price, &tmp_lowest_price, sizeof(tmp_lowest_price));
  if (raw_lowest_price != 0) {
    total_size += 1 + 8;
  }

  // double turnover = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_turnover = this->_internal_turnover();
  uint64_t raw_turnover;
  memcpy(&raw_turnover, &tmp_turnover, sizeof(tmp_turnover));
  if (raw_turnover != 0) {
    total_size += 1 + 8;
  }

  // double open_interest = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_open_interest = this->_internal_open_interest();
  uint64_t raw_open_interest;
  memcpy(&raw_open_interest, &tmp_open_interest, sizeof(tmp_open_interest));
  if (raw_open_interest != 0) {
    total_size += 1 + 8;
  }

  // double close_price = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_close_price = this->_internal_close_price();
  uint64_t raw_close_price;
  memcpy(&raw_close_price, &tmp_close_price, sizeof(tmp_close_price));
  if (raw_close_price != 0) {
    total_size += 1 + 8;
  }

  // double settlement_price = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_settlement_price = this->_internal_settlement_price();
  uint64_t raw_settlement_price;
  memcpy(&raw_settlement_price, &tmp_settlement_price, sizeof(tmp_settlement_price));
  if (raw_settlement_price != 0) {
    total_size += 2 + 8;
  }

  // double upper_limit_price = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_upper_limit_price = this->_internal_upper_limit_price();
  uint64_t raw_upper_limit_price;
  memcpy(&raw_upper_limit_price, &tmp_upper_limit_price, sizeof(tmp_upper_limit_price));
  if (raw_upper_limit_price != 0) {
    total_size += 2 + 8;
  }

  // int32 volume = 12;
  if (this->_internal_volume() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_volume());
  }

  // int32 update_millisec = 22;
  if (this->_internal_update_millisec() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_update_millisec());
  }

  // double lower_limit_price = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lower_limit_price = this->_internal_lower_limit_price();
  uint64_t raw_lower_limit_price;
  memcpy(&raw_lower_limit_price, &tmp_lower_limit_price, sizeof(tmp_lower_limit_price));
  if (raw_lower_limit_price != 0) {
    total_size += 2 + 8;
  }

  // double pre_delta = 19;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pre_delta = this->_internal_pre_delta();
  uint64_t raw_pre_delta;
  memcpy(&raw_pre_delta, &tmp_pre_delta, sizeof(tmp_pre_delta));
  if (raw_pre_delta != 0) {
    total_size += 2 + 8;
  }

  // double curr_delta = 20;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_curr_delta = this->_internal_curr_delta();
  uint64_t raw_curr_delta;
  memcpy(&raw_curr_delta, &tmp_curr_delta, sizeof(tmp_curr_delta));
  if (raw_curr_delta != 0) {
    total_size += 2 + 8;
  }

  // double bid_price_1 = 23;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bid_price_1 = this->_internal_bid_price_1();
  uint64_t raw_bid_price_1;
  memcpy(&raw_bid_price_1, &tmp_bid_price_1, sizeof(tmp_bid_price_1));
  if (raw_bid_price_1 != 0) {
    total_size += 2 + 8;
  }

  // double ask_price_1 = 25;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ask_price_1 = this->_internal_ask_price_1();
  uint64_t raw_ask_price_1;
  memcpy(&raw_ask_price_1, &tmp_ask_price_1, sizeof(tmp_ask_price_1));
  if (raw_ask_price_1 != 0) {
    total_size += 2 + 8;
  }

  // int32 bid_volume_1 = 24;
  if (this->_internal_bid_volume_1() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bid_volume_1());
  }

  // int32 ask_volume_1 = 26;
  if (this->_internal_ask_volume_1() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ask_volume_1());
  }

  // double bid_price_2 = 27;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bid_price_2 = this->_internal_bid_price_2();
  uint64_t raw_bid_price_2;
  memcpy(&raw_bid_price_2, &tmp_bid_price_2, sizeof(tmp_bid_price_2));
  if (raw_bid_price_2 != 0) {
    total_size += 2 + 8;
  }

  // double ask_price_2 = 29;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ask_price_2 = this->_internal_ask_price_2();
  uint64_t raw_ask_price_2;
  memcpy(&raw_ask_price_2, &tmp_ask_price_2, sizeof(tmp_ask_price_2));
  if (raw_ask_price_2 != 0) {
    total_size += 2 + 8;
  }

  // int32 bid_volume_2 = 28;
  if (this->_internal_bid_volume_2() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bid_volume_2());
  }

  // int32 ask_volume_2 = 30;
  if (this->_internal_ask_volume_2() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ask_volume_2());
  }

  // double bid_price_3 = 31;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bid_price_3 = this->_internal_bid_price_3();
  uint64_t raw_bid_price_3;
  memcpy(&raw_bid_price_3, &tmp_bid_price_3, sizeof(tmp_bid_price_3));
  if (raw_bid_price_3 != 0) {
    total_size += 2 + 8;
  }

  // double ask_price_3 = 33;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ask_price_3 = this->_internal_ask_price_3();
  uint64_t raw_ask_price_3;
  memcpy(&raw_ask_price_3, &tmp_ask_price_3, sizeof(tmp_ask_price_3));
  if (raw_ask_price_3 != 0) {
    total_size += 2 + 8;
  }

  // int32 bid_volume_3 = 32;
  if (this->_internal_bid_volume_3() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bid_volume_3());
  }

  // int32 ask_volume_3 = 34;
  if (this->_internal_ask_volume_3() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ask_volume_3());
  }

  // double bid_price_4 = 35;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bid_price_4 = this->_internal_bid_price_4();
  uint64_t raw_bid_price_4;
  memcpy(&raw_bid_price_4, &tmp_bid_price_4, sizeof(tmp_bid_price_4));
  if (raw_bid_price_4 != 0) {
    total_size += 2 + 8;
  }

  // double ask_price_4 = 37;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ask_price_4 = this->_internal_ask_price_4();
  uint64_t raw_ask_price_4;
  memcpy(&raw_ask_price_4, &tmp_ask_price_4, sizeof(tmp_ask_price_4));
  if (raw_ask_price_4 != 0) {
    total_size += 2 + 8;
  }

  // int32 bid_volume_4 = 36;
  if (this->_internal_bid_volume_4() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bid_volume_4());
  }

  // int32 ask_volume_4 = 38;
  if (this->_internal_ask_volume_4() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ask_volume_4());
  }

  // double bid_price_5 = 39;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bid_price_5 = this->_internal_bid_price_5();
  uint64_t raw_bid_price_5;
  memcpy(&raw_bid_price_5, &tmp_bid_price_5, sizeof(tmp_bid_price_5));
  if (raw_bid_price_5 != 0) {
    total_size += 2 + 8;
  }

  // double ask_price_5 = 41;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ask_price_5 = this->_internal_ask_price_5();
  uint64_t raw_ask_price_5;
  memcpy(&raw_ask_price_5, &tmp_ask_price_5, sizeof(tmp_ask_price_5));
  if (raw_ask_price_5 != 0) {
    total_size += 2 + 8;
  }

  // int32 bid_volume_5 = 40;
  if (this->_internal_bid_volume_5() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bid_volume_5());
  }

  // int32 ask_volume_5 = 42;
  if (this->_internal_ask_volume_5() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ask_volume_5());
  }

  // double average_price = 43;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_average_price = this->_internal_average_price();
  uint64_t raw_average_price;
  memcpy(&raw_average_price, &tmp_average_price, sizeof(tmp_average_price));
  if (raw_average_price != 0) {
    total_size += 2 + 8;
  }

  // double banding_upper_price = 45;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_banding_upper_price = this->_internal_banding_upper_price();
  uint64_t raw_banding_upper_price;
  memcpy(&raw_banding_upper_price, &tmp_banding_upper_price, sizeof(tmp_banding_upper_price));
  if (raw_banding_upper_price != 0) {
    total_size += 2 + 8;
  }

  // double banding_lower_price = 46;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_banding_lower_price = this->_internal_banding_lower_price();
  uint64_t raw_banding_lower_price;
  memcpy(&raw_banding_lower_price, &tmp_banding_lower_price, sizeof(tmp_banding_lower_price));
  if (raw_banding_lower_price != 0) {
    total_size += 2 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DepthTickInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DepthTickInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DepthTickInfo::GetClassData() const { return &_class_data_; }

void DepthTickInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DepthTickInfo *>(to)->MergeFrom(
      static_cast<const DepthTickInfo &>(from));
}


void DepthTickInfo::MergeFrom(const DepthTickInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DepthTickInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_trading_day().empty()) {
    _internal_set_trading_day(from._internal_trading_day());
  }
  if (!from._internal_instrument_id().empty()) {
    _internal_set_instrument_id(from._internal_instrument_id());
  }
  if (!from._internal_exchange_id().empty()) {
    _internal_set_exchange_id(from._internal_exchange_id());
  }
  if (!from._internal_exchange_inst_id().empty()) {
    _internal_set_exchange_inst_id(from._internal_exchange_inst_id());
  }
  if (!from._internal_update_time().empty()) {
    _internal_set_update_time(from._internal_update_time());
  }
  if (!from._internal_action_day().empty()) {
    _internal_set_action_day(from._internal_action_day());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_last_price = from._internal_last_price();
  uint64_t raw_last_price;
  memcpy(&raw_last_price, &tmp_last_price, sizeof(tmp_last_price));
  if (raw_last_price != 0) {
    _internal_set_last_price(from._internal_last_price());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pre_settlement_price = from._internal_pre_settlement_price();
  uint64_t raw_pre_settlement_price;
  memcpy(&raw_pre_settlement_price, &tmp_pre_settlement_price, sizeof(tmp_pre_settlement_price));
  if (raw_pre_settlement_price != 0) {
    _internal_set_pre_settlement_price(from._internal_pre_settlement_price());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pre_close_price = from._internal_pre_close_price();
  uint64_t raw_pre_close_price;
  memcpy(&raw_pre_close_price, &tmp_pre_close_price, sizeof(tmp_pre_close_price));
  if (raw_pre_close_price != 0) {
    _internal_set_pre_close_price(from._internal_pre_close_price());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pre_open_interest = from._internal_pre_open_interest();
  uint64_t raw_pre_open_interest;
  memcpy(&raw_pre_open_interest, &tmp_pre_open_interest, sizeof(tmp_pre_open_interest));
  if (raw_pre_open_interest != 0) {
    _internal_set_pre_open_interest(from._internal_pre_open_interest());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_open_price = from._internal_open_price();
  uint64_t raw_open_price;
  memcpy(&raw_open_price, &tmp_open_price, sizeof(tmp_open_price));
  if (raw_open_price != 0) {
    _internal_set_open_price(from._internal_open_price());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_highest_price = from._internal_highest_price();
  uint64_t raw_highest_price;
  memcpy(&raw_highest_price, &tmp_highest_price, sizeof(tmp_highest_price));
  if (raw_highest_price != 0) {
    _internal_set_highest_price(from._internal_highest_price());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lowest_price = from._internal_lowest_price();
  uint64_t raw_lowest_price;
  memcpy(&raw_lowest_price, &tmp_lowest_price, sizeof(tmp_lowest_price));
  if (raw_lowest_price != 0) {
    _internal_set_lowest_price(from._internal_lowest_price());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_turnover = from._internal_turnover();
  uint64_t raw_turnover;
  memcpy(&raw_turnover, &tmp_turnover, sizeof(tmp_turnover));
  if (raw_turnover != 0) {
    _internal_set_turnover(from._internal_turnover());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_open_interest = from._internal_open_interest();
  uint64_t raw_open_interest;
  memcpy(&raw_open_interest, &tmp_open_interest, sizeof(tmp_open_interest));
  if (raw_open_interest != 0) {
    _internal_set_open_interest(from._internal_open_interest());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_close_price = from._internal_close_price();
  uint64_t raw_close_price;
  memcpy(&raw_close_price, &tmp_close_price, sizeof(tmp_close_price));
  if (raw_close_price != 0) {
    _internal_set_close_price(from._internal_close_price());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_settlement_price = from._internal_settlement_price();
  uint64_t raw_settlement_price;
  memcpy(&raw_settlement_price, &tmp_settlement_price, sizeof(tmp_settlement_price));
  if (raw_settlement_price != 0) {
    _internal_set_settlement_price(from._internal_settlement_price());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_upper_limit_price = from._internal_upper_limit_price();
  uint64_t raw_upper_limit_price;
  memcpy(&raw_upper_limit_price, &tmp_upper_limit_price, sizeof(tmp_upper_limit_price));
  if (raw_upper_limit_price != 0) {
    _internal_set_upper_limit_price(from._internal_upper_limit_price());
  }
  if (from._internal_volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
  if (from._internal_update_millisec() != 0) {
    _internal_set_update_millisec(from._internal_update_millisec());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lower_limit_price = from._internal_lower_limit_price();
  uint64_t raw_lower_limit_price;
  memcpy(&raw_lower_limit_price, &tmp_lower_limit_price, sizeof(tmp_lower_limit_price));
  if (raw_lower_limit_price != 0) {
    _internal_set_lower_limit_price(from._internal_lower_limit_price());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pre_delta = from._internal_pre_delta();
  uint64_t raw_pre_delta;
  memcpy(&raw_pre_delta, &tmp_pre_delta, sizeof(tmp_pre_delta));
  if (raw_pre_delta != 0) {
    _internal_set_pre_delta(from._internal_pre_delta());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_curr_delta = from._internal_curr_delta();
  uint64_t raw_curr_delta;
  memcpy(&raw_curr_delta, &tmp_curr_delta, sizeof(tmp_curr_delta));
  if (raw_curr_delta != 0) {
    _internal_set_curr_delta(from._internal_curr_delta());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bid_price_1 = from._internal_bid_price_1();
  uint64_t raw_bid_price_1;
  memcpy(&raw_bid_price_1, &tmp_bid_price_1, sizeof(tmp_bid_price_1));
  if (raw_bid_price_1 != 0) {
    _internal_set_bid_price_1(from._internal_bid_price_1());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ask_price_1 = from._internal_ask_price_1();
  uint64_t raw_ask_price_1;
  memcpy(&raw_ask_price_1, &tmp_ask_price_1, sizeof(tmp_ask_price_1));
  if (raw_ask_price_1 != 0) {
    _internal_set_ask_price_1(from._internal_ask_price_1());
  }
  if (from._internal_bid_volume_1() != 0) {
    _internal_set_bid_volume_1(from._internal_bid_volume_1());
  }
  if (from._internal_ask_volume_1() != 0) {
    _internal_set_ask_volume_1(from._internal_ask_volume_1());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bid_price_2 = from._internal_bid_price_2();
  uint64_t raw_bid_price_2;
  memcpy(&raw_bid_price_2, &tmp_bid_price_2, sizeof(tmp_bid_price_2));
  if (raw_bid_price_2 != 0) {
    _internal_set_bid_price_2(from._internal_bid_price_2());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ask_price_2 = from._internal_ask_price_2();
  uint64_t raw_ask_price_2;
  memcpy(&raw_ask_price_2, &tmp_ask_price_2, sizeof(tmp_ask_price_2));
  if (raw_ask_price_2 != 0) {
    _internal_set_ask_price_2(from._internal_ask_price_2());
  }
  if (from._internal_bid_volume_2() != 0) {
    _internal_set_bid_volume_2(from._internal_bid_volume_2());
  }
  if (from._internal_ask_volume_2() != 0) {
    _internal_set_ask_volume_2(from._internal_ask_volume_2());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bid_price_3 = from._internal_bid_price_3();
  uint64_t raw_bid_price_3;
  memcpy(&raw_bid_price_3, &tmp_bid_price_3, sizeof(tmp_bid_price_3));
  if (raw_bid_price_3 != 0) {
    _internal_set_bid_price_3(from._internal_bid_price_3());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ask_price_3 = from._internal_ask_price_3();
  uint64_t raw_ask_price_3;
  memcpy(&raw_ask_price_3, &tmp_ask_price_3, sizeof(tmp_ask_price_3));
  if (raw_ask_price_3 != 0) {
    _internal_set_ask_price_3(from._internal_ask_price_3());
  }
  if (from._internal_bid_volume_3() != 0) {
    _internal_set_bid_volume_3(from._internal_bid_volume_3());
  }
  if (from._internal_ask_volume_3() != 0) {
    _internal_set_ask_volume_3(from._internal_ask_volume_3());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bid_price_4 = from._internal_bid_price_4();
  uint64_t raw_bid_price_4;
  memcpy(&raw_bid_price_4, &tmp_bid_price_4, sizeof(tmp_bid_price_4));
  if (raw_bid_price_4 != 0) {
    _internal_set_bid_price_4(from._internal_bid_price_4());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ask_price_4 = from._internal_ask_price_4();
  uint64_t raw_ask_price_4;
  memcpy(&raw_ask_price_4, &tmp_ask_price_4, sizeof(tmp_ask_price_4));
  if (raw_ask_price_4 != 0) {
    _internal_set_ask_price_4(from._internal_ask_price_4());
  }
  if (from._internal_bid_volume_4() != 0) {
    _internal_set_bid_volume_4(from._internal_bid_volume_4());
  }
  if (from._internal_ask_volume_4() != 0) {
    _internal_set_ask_volume_4(from._internal_ask_volume_4());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bid_price_5 = from._internal_bid_price_5();
  uint64_t raw_bid_price_5;
  memcpy(&raw_bid_price_5, &tmp_bid_price_5, sizeof(tmp_bid_price_5));
  if (raw_bid_price_5 != 0) {
    _internal_set_bid_price_5(from._internal_bid_price_5());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ask_price_5 = from._internal_ask_price_5();
  uint64_t raw_ask_price_5;
  memcpy(&raw_ask_price_5, &tmp_ask_price_5, sizeof(tmp_ask_price_5));
  if (raw_ask_price_5 != 0) {
    _internal_set_ask_price_5(from._internal_ask_price_5());
  }
  if (from._internal_bid_volume_5() != 0) {
    _internal_set_bid_volume_5(from._internal_bid_volume_5());
  }
  if (from._internal_ask_volume_5() != 0) {
    _internal_set_ask_volume_5(from._internal_ask_volume_5());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_average_price = from._internal_average_price();
  uint64_t raw_average_price;
  memcpy(&raw_average_price, &tmp_average_price, sizeof(tmp_average_price));
  if (raw_average_price != 0) {
    _internal_set_average_price(from._internal_average_price());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_banding_upper_price = from._internal_banding_upper_price();
  uint64_t raw_banding_upper_price;
  memcpy(&raw_banding_upper_price, &tmp_banding_upper_price, sizeof(tmp_banding_upper_price));
  if (raw_banding_upper_price != 0) {
    _internal_set_banding_upper_price(from._internal_banding_upper_price());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_banding_lower_price = from._internal_banding_lower_price();
  uint64_t raw_banding_lower_price;
  memcpy(&raw_banding_lower_price, &tmp_banding_lower_price, sizeof(tmp_banding_lower_price));
  if (raw_banding_lower_price != 0) {
    _internal_set_banding_lower_price(from._internal_banding_lower_price());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DepthTickInfo::CopyFrom(const DepthTickInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DepthTickInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepthTickInfo::IsInitialized() const {
  return true;
}

void DepthTickInfo::InternalSwap(DepthTickInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &trading_day_, lhs_arena,
      &other->trading_day_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &instrument_id_, lhs_arena,
      &other->instrument_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &exchange_id_, lhs_arena,
      &other->exchange_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &exchange_inst_id_, lhs_arena,
      &other->exchange_inst_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &update_time_, lhs_arena,
      &other->update_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_day_, lhs_arena,
      &other->action_day_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DepthTickInfo, banding_lower_price_)
      + sizeof(DepthTickInfo::banding_lower_price_)
      - PROTOBUF_FIELD_OFFSET(DepthTickInfo, last_price_)>(
          reinterpret_cast<char*>(&last_price_),
          reinterpret_cast<char*>(&other->last_price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DepthTickInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tick_2eproto_getter, &descriptor_table_tick_2eproto_once,
      file_level_metadata_tick_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DepthTickInfo* Arena::CreateMaybeMessage< ::DepthTickInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DepthTickInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
