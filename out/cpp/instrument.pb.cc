// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: instrument.proto

#include "instrument.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr InstrumentInfo::InstrumentInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reserve_1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , exchange_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , instrument_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reserve_2_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reserve_3_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , product_class_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_date_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , open_date_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , expire_date_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_deliv_date_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , end_deliv_date_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , inst_life_phase_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , position_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , position_date_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , max_margin_side_algorithm_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reserve_4_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , options_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , combination_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , instrument_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , exchange_inst_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , product_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , underlying_instr_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , delivery_year_(0)
  , delivery_month_(0)
  , max_market_order_volume_(0)
  , min_market_order_volume_(0)
  , max_limit_order_volume_(0)
  , min_limit_order_volume_(0)
  , price_tick_(0)
  , volume_multiple_(0)
  , is_trading_(0)
  , long_margin_ratio_(0)
  , short_margin_ratio_(0)
  , strike_price_(0)
  , underlying_multiple_(0){}
struct InstrumentInfoDefaultTypeInternal {
  constexpr InstrumentInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InstrumentInfoDefaultTypeInternal() {}
  union {
    InstrumentInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InstrumentInfoDefaultTypeInternal _InstrumentInfo_default_instance_;
constexpr InstrumentStatus::InstrumentStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : exchange_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reserve_1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , settlement_group_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reserve_2_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , instrument_status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , enter_time_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , enter_reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , exchange_inst_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , instrument_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_zn_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pre_status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pre_enter_time_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pre_enter_reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , trading_segment_sn_(0)
  , pre_trading_segment_sn_(0){}
struct InstrumentStatusDefaultTypeInternal {
  constexpr InstrumentStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InstrumentStatusDefaultTypeInternal() {}
  union {
    InstrumentStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InstrumentStatusDefaultTypeInternal _InstrumentStatus_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_instrument_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_instrument_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_instrument_2eproto = nullptr;

const uint32_t TableStruct_instrument_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, reserve_1_),
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, exchange_id_),
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, instrument_name_),
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, reserve_2_),
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, reserve_3_),
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, product_class_),
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, delivery_year_),
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, delivery_month_),
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, max_market_order_volume_),
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, min_market_order_volume_),
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, max_limit_order_volume_),
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, min_limit_order_volume_),
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, volume_multiple_),
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, price_tick_),
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, create_date_),
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, open_date_),
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, expire_date_),
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, start_deliv_date_),
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, end_deliv_date_),
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, inst_life_phase_),
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, is_trading_),
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, position_type_),
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, position_date_type_),
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, long_margin_ratio_),
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, short_margin_ratio_),
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, max_margin_side_algorithm_),
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, reserve_4_),
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, strike_price_),
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, options_type_),
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, underlying_multiple_),
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, combination_type_),
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, instrument_id_),
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, exchange_inst_id_),
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, product_id_),
  PROTOBUF_FIELD_OFFSET(::InstrumentInfo, underlying_instr_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InstrumentStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::InstrumentStatus, exchange_id_),
  PROTOBUF_FIELD_OFFSET(::InstrumentStatus, reserve_1_),
  PROTOBUF_FIELD_OFFSET(::InstrumentStatus, settlement_group_id_),
  PROTOBUF_FIELD_OFFSET(::InstrumentStatus, reserve_2_),
  PROTOBUF_FIELD_OFFSET(::InstrumentStatus, instrument_status_),
  PROTOBUF_FIELD_OFFSET(::InstrumentStatus, trading_segment_sn_),
  PROTOBUF_FIELD_OFFSET(::InstrumentStatus, enter_time_),
  PROTOBUF_FIELD_OFFSET(::InstrumentStatus, enter_reason_),
  PROTOBUF_FIELD_OFFSET(::InstrumentStatus, exchange_inst_id_),
  PROTOBUF_FIELD_OFFSET(::InstrumentStatus, instrument_id_),
  PROTOBUF_FIELD_OFFSET(::InstrumentStatus, status_zn_),
  PROTOBUF_FIELD_OFFSET(::InstrumentStatus, pre_trading_segment_sn_),
  PROTOBUF_FIELD_OFFSET(::InstrumentStatus, pre_status_),
  PROTOBUF_FIELD_OFFSET(::InstrumentStatus, pre_enter_time_),
  PROTOBUF_FIELD_OFFSET(::InstrumentStatus, pre_enter_reason_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::InstrumentInfo)},
  { 41, -1, -1, sizeof(::InstrumentStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_InstrumentInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_InstrumentStatus_default_instance_),
};

const char descriptor_table_protodef_instrument_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020instrument.proto\"\355\006\n\016InstrumentInfo\022\021\n"
  "\treserve_1\030\001 \001(\t\022\023\n\013exchange_id\030\002 \001(\t\022\027\n"
  "\017instrument_name\030\003 \001(\t\022\021\n\treserve_2\030\004 \001("
  "\t\022\021\n\treserve_3\030\005 \001(\t\022\025\n\rproduct_class\030\006 "
  "\001(\t\022\025\n\rdelivery_year\030\007 \001(\005\022\026\n\016delivery_m"
  "onth\030\010 \001(\005\022\037\n\027max_market_order_volume\030\t "
  "\001(\005\022\037\n\027min_market_order_volume\030\n \001(\005\022\036\n\026"
  "max_limit_order_volume\030\013 \001(\005\022\036\n\026min_limi"
  "t_order_volume\030\014 \001(\005\022\027\n\017volume_multiple\030"
  "\r \001(\005\022\022\n\nprice_tick\030\016 \001(\001\022\023\n\013create_date"
  "\030\017 \001(\t\022\021\n\topen_date\030\020 \001(\t\022\023\n\013expire_date"
  "\030\021 \001(\t\022\030\n\020start_deliv_date\030\022 \001(\t\022\026\n\016end_"
  "deliv_date\030\023 \001(\t\022\027\n\017inst_life_phase\030\024 \001("
  "\t\022\022\n\nis_trading\030\025 \001(\005\022\025\n\rposition_type\030\026"
  " \001(\t\022\032\n\022position_date_type\030\027 \001(\t\022\031\n\021long"
  "_margin_ratio\030\030 \001(\001\022\032\n\022short_margin_rati"
  "o\030\031 \001(\001\022!\n\031max_margin_side_algorithm\030\032 \001"
  "(\t\022\021\n\treserve_4\030\033 \001(\t\022\024\n\014strike_price\030\034 "
  "\001(\001\022\024\n\014options_type\030\035 \001(\t\022\033\n\023underlying_"
  "multiple\030\036 \001(\001\022\030\n\020combination_type\030\037 \001(\t"
  "\022\025\n\rinstrument_id\030  \001(\t\022\030\n\020exchange_inst"
  "_id\030! \001(\t\022\022\n\nproduct_id\030\" \001(\t\022\033\n\023underly"
  "ing_instr_id\030# \001(\t\"\365\002\n\020InstrumentStatus\022"
  "\023\n\013exchange_id\030\001 \001(\t\022\021\n\treserve_1\030\002 \001(\t\022"
  "\033\n\023settlement_group_id\030\003 \001(\t\022\021\n\treserve_"
  "2\030\004 \001(\t\022\031\n\021instrument_status\030\005 \001(\t\022\032\n\022tr"
  "ading_segment_sn\030\006 \001(\005\022\022\n\nenter_time\030\007 \001"
  "(\t\022\024\n\014enter_reason\030\010 \001(\t\022\030\n\020exchange_ins"
  "t_id\030\t \001(\t\022\025\n\rinstrument_id\030\n \001(\t\022\021\n\tsta"
  "tus_zn\030\013 \001(\t\022\036\n\026pre_trading_segment_sn\030\014"
  " \001(\005\022\022\n\npre_status\030\r \001(\t\022\026\n\016pre_enter_ti"
  "me\030\016 \001(\t\022\030\n\020pre_enter_reason\030\017 \001(\tB\014Z\n/o"
  "ut/modelb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_instrument_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_instrument_2eproto = {
  false, false, 1296, descriptor_table_protodef_instrument_2eproto, "instrument.proto", 
  &descriptor_table_instrument_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_instrument_2eproto::offsets,
  file_level_metadata_instrument_2eproto, file_level_enum_descriptors_instrument_2eproto, file_level_service_descriptors_instrument_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_instrument_2eproto_getter() {
  return &descriptor_table_instrument_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_instrument_2eproto(&descriptor_table_instrument_2eproto);

// ===================================================================

class InstrumentInfo::_Internal {
 public:
};

InstrumentInfo::InstrumentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:InstrumentInfo)
}
InstrumentInfo::InstrumentInfo(const InstrumentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reserve_1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reserve_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reserve_1().empty()) {
    reserve_1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reserve_1(), 
      GetArenaForAllocation());
  }
  exchange_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange_id().empty()) {
    exchange_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_exchange_id(), 
      GetArenaForAllocation());
  }
  instrument_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    instrument_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_name().empty()) {
    instrument_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_instrument_name(), 
      GetArenaForAllocation());
  }
  reserve_2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reserve_2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reserve_2().empty()) {
    reserve_2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reserve_2(), 
      GetArenaForAllocation());
  }
  reserve_3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reserve_3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reserve_3().empty()) {
    reserve_3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reserve_3(), 
      GetArenaForAllocation());
  }
  product_class_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    product_class_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_product_class().empty()) {
    product_class_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_product_class(), 
      GetArenaForAllocation());
  }
  create_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    create_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_create_date().empty()) {
    create_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_date(), 
      GetArenaForAllocation());
  }
  open_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    open_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_open_date().empty()) {
    open_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_open_date(), 
      GetArenaForAllocation());
  }
  expire_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    expire_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_expire_date().empty()) {
    expire_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_expire_date(), 
      GetArenaForAllocation());
  }
  start_deliv_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    start_deliv_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_start_deliv_date().empty()) {
    start_deliv_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_start_deliv_date(), 
      GetArenaForAllocation());
  }
  end_deliv_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    end_deliv_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_end_deliv_date().empty()) {
    end_deliv_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_end_deliv_date(), 
      GetArenaForAllocation());
  }
  inst_life_phase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    inst_life_phase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_inst_life_phase().empty()) {
    inst_life_phase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_inst_life_phase(), 
      GetArenaForAllocation());
  }
  position_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    position_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_position_type().empty()) {
    position_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_position_type(), 
      GetArenaForAllocation());
  }
  position_date_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    position_date_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_position_date_type().empty()) {
    position_date_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_position_date_type(), 
      GetArenaForAllocation());
  }
  max_margin_side_algorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    max_margin_side_algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_max_margin_side_algorithm().empty()) {
    max_margin_side_algorithm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_max_margin_side_algorithm(), 
      GetArenaForAllocation());
  }
  reserve_4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reserve_4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reserve_4().empty()) {
    reserve_4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reserve_4(), 
      GetArenaForAllocation());
  }
  options_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    options_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_options_type().empty()) {
    options_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_options_type(), 
      GetArenaForAllocation());
  }
  combination_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    combination_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_combination_type().empty()) {
    combination_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_combination_type(), 
      GetArenaForAllocation());
  }
  instrument_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_id().empty()) {
    instrument_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_instrument_id(), 
      GetArenaForAllocation());
  }
  exchange_inst_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    exchange_inst_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange_inst_id().empty()) {
    exchange_inst_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_exchange_inst_id(), 
      GetArenaForAllocation());
  }
  product_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    product_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_product_id().empty()) {
    product_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_product_id(), 
      GetArenaForAllocation());
  }
  underlying_instr_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    underlying_instr_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_underlying_instr_id().empty()) {
    underlying_instr_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_underlying_instr_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&delivery_year_, &from.delivery_year_,
    static_cast<size_t>(reinterpret_cast<char*>(&underlying_multiple_) -
    reinterpret_cast<char*>(&delivery_year_)) + sizeof(underlying_multiple_));
  // @@protoc_insertion_point(copy_constructor:InstrumentInfo)
}

inline void InstrumentInfo::SharedCtor() {
reserve_1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reserve_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
exchange_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
instrument_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  instrument_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
reserve_2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reserve_2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
reserve_3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reserve_3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
product_class_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  product_class_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
create_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  create_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
open_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  open_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
expire_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  expire_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
start_deliv_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  start_deliv_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
end_deliv_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  end_deliv_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
inst_life_phase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  inst_life_phase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
position_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  position_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
position_date_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  position_date_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
max_margin_side_algorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  max_margin_side_algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
reserve_4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reserve_4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
options_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  options_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
combination_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  combination_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
instrument_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
exchange_inst_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  exchange_inst_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
product_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  product_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
underlying_instr_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  underlying_instr_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&delivery_year_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&underlying_multiple_) -
    reinterpret_cast<char*>(&delivery_year_)) + sizeof(underlying_multiple_));
}

InstrumentInfo::~InstrumentInfo() {
  // @@protoc_insertion_point(destructor:InstrumentInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InstrumentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  reserve_1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrument_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reserve_2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reserve_3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_class_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  open_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expire_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_deliv_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_deliv_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inst_life_phase_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  position_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  position_date_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_margin_side_algorithm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reserve_4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  options_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  combination_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrument_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_inst_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  underlying_instr_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InstrumentInfo::ArenaDtor(void* object) {
  InstrumentInfo* _this = reinterpret_cast< InstrumentInfo* >(object);
  (void)_this;
}
void InstrumentInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstrumentInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InstrumentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:InstrumentInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reserve_1_.ClearToEmpty();
  exchange_id_.ClearToEmpty();
  instrument_name_.ClearToEmpty();
  reserve_2_.ClearToEmpty();
  reserve_3_.ClearToEmpty();
  product_class_.ClearToEmpty();
  create_date_.ClearToEmpty();
  open_date_.ClearToEmpty();
  expire_date_.ClearToEmpty();
  start_deliv_date_.ClearToEmpty();
  end_deliv_date_.ClearToEmpty();
  inst_life_phase_.ClearToEmpty();
  position_type_.ClearToEmpty();
  position_date_type_.ClearToEmpty();
  max_margin_side_algorithm_.ClearToEmpty();
  reserve_4_.ClearToEmpty();
  options_type_.ClearToEmpty();
  combination_type_.ClearToEmpty();
  instrument_id_.ClearToEmpty();
  exchange_inst_id_.ClearToEmpty();
  product_id_.ClearToEmpty();
  underlying_instr_id_.ClearToEmpty();
  ::memset(&delivery_year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&underlying_multiple_) -
      reinterpret_cast<char*>(&delivery_year_)) + sizeof(underlying_multiple_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstrumentInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string reserve_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_reserve_1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstrumentInfo.reserve_1"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string exchange_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_exchange_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstrumentInfo.exchange_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string instrument_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_instrument_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstrumentInfo.instrument_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string reserve_2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_reserve_2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstrumentInfo.reserve_2"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string reserve_3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_reserve_3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstrumentInfo.reserve_3"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string product_class = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_product_class();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstrumentInfo.product_class"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 delivery_year = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          delivery_year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 delivery_month = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          delivery_month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_market_order_volume = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          max_market_order_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 min_market_order_volume = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          min_market_order_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_limit_order_volume = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          max_limit_order_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 min_limit_order_volume = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          min_limit_order_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 volume_multiple = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          volume_multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double price_tick = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          price_tick_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string create_date = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_create_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstrumentInfo.create_date"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string open_date = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_open_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstrumentInfo.open_date"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string expire_date = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_expire_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstrumentInfo.expire_date"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string start_deliv_date = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_start_deliv_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstrumentInfo.start_deliv_date"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string end_deliv_date = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_end_deliv_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstrumentInfo.end_deliv_date"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string inst_life_phase = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_inst_life_phase();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstrumentInfo.inst_life_phase"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 is_trading = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          is_trading_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string position_type = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_position_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstrumentInfo.position_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string position_date_type = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_position_date_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstrumentInfo.position_date_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double long_margin_ratio = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          long_margin_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double short_margin_ratio = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          short_margin_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string max_margin_side_algorithm = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_max_margin_side_algorithm();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstrumentInfo.max_margin_side_algorithm"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string reserve_4 = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_reserve_4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstrumentInfo.reserve_4"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double strike_price = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 225)) {
          strike_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string options_type = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_options_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstrumentInfo.options_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double underlying_multiple = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 241)) {
          underlying_multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string combination_type = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_combination_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstrumentInfo.combination_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string instrument_id = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstrumentInfo.instrument_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string exchange_inst_id = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_exchange_inst_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstrumentInfo.exchange_inst_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string product_id = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_product_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstrumentInfo.product_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string underlying_instr_id = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_underlying_instr_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstrumentInfo.underlying_instr_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InstrumentInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InstrumentInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string reserve_1 = 1;
  if (!this->_internal_reserve_1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reserve_1().data(), static_cast<int>(this->_internal_reserve_1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstrumentInfo.reserve_1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reserve_1(), target);
  }

  // string exchange_id = 2;
  if (!this->_internal_exchange_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange_id().data(), static_cast<int>(this->_internal_exchange_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstrumentInfo.exchange_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_exchange_id(), target);
  }

  // string instrument_name = 3;
  if (!this->_internal_instrument_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_name().data(), static_cast<int>(this->_internal_instrument_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstrumentInfo.instrument_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_instrument_name(), target);
  }

  // string reserve_2 = 4;
  if (!this->_internal_reserve_2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reserve_2().data(), static_cast<int>(this->_internal_reserve_2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstrumentInfo.reserve_2");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reserve_2(), target);
  }

  // string reserve_3 = 5;
  if (!this->_internal_reserve_3().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reserve_3().data(), static_cast<int>(this->_internal_reserve_3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstrumentInfo.reserve_3");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_reserve_3(), target);
  }

  // string product_class = 6;
  if (!this->_internal_product_class().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_product_class().data(), static_cast<int>(this->_internal_product_class().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstrumentInfo.product_class");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_product_class(), target);
  }

  // int32 delivery_year = 7;
  if (this->_internal_delivery_year() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_delivery_year(), target);
  }

  // int32 delivery_month = 8;
  if (this->_internal_delivery_month() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_delivery_month(), target);
  }

  // int32 max_market_order_volume = 9;
  if (this->_internal_max_market_order_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_max_market_order_volume(), target);
  }

  // int32 min_market_order_volume = 10;
  if (this->_internal_min_market_order_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_min_market_order_volume(), target);
  }

  // int32 max_limit_order_volume = 11;
  if (this->_internal_max_limit_order_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_max_limit_order_volume(), target);
  }

  // int32 min_limit_order_volume = 12;
  if (this->_internal_min_limit_order_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_min_limit_order_volume(), target);
  }

  // int32 volume_multiple = 13;
  if (this->_internal_volume_multiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_volume_multiple(), target);
  }

  // double price_tick = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price_tick = this->_internal_price_tick();
  uint64_t raw_price_tick;
  memcpy(&raw_price_tick, &tmp_price_tick, sizeof(tmp_price_tick));
  if (raw_price_tick != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_price_tick(), target);
  }

  // string create_date = 15;
  if (!this->_internal_create_date().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_date().data(), static_cast<int>(this->_internal_create_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstrumentInfo.create_date");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_create_date(), target);
  }

  // string open_date = 16;
  if (!this->_internal_open_date().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_open_date().data(), static_cast<int>(this->_internal_open_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstrumentInfo.open_date");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_open_date(), target);
  }

  // string expire_date = 17;
  if (!this->_internal_expire_date().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_expire_date().data(), static_cast<int>(this->_internal_expire_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstrumentInfo.expire_date");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_expire_date(), target);
  }

  // string start_deliv_date = 18;
  if (!this->_internal_start_deliv_date().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start_deliv_date().data(), static_cast<int>(this->_internal_start_deliv_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstrumentInfo.start_deliv_date");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_start_deliv_date(), target);
  }

  // string end_deliv_date = 19;
  if (!this->_internal_end_deliv_date().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_end_deliv_date().data(), static_cast<int>(this->_internal_end_deliv_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstrumentInfo.end_deliv_date");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_end_deliv_date(), target);
  }

  // string inst_life_phase = 20;
  if (!this->_internal_inst_life_phase().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inst_life_phase().data(), static_cast<int>(this->_internal_inst_life_phase().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstrumentInfo.inst_life_phase");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_inst_life_phase(), target);
  }

  // int32 is_trading = 21;
  if (this->_internal_is_trading() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_is_trading(), target);
  }

  // string position_type = 22;
  if (!this->_internal_position_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_position_type().data(), static_cast<int>(this->_internal_position_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstrumentInfo.position_type");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_position_type(), target);
  }

  // string position_date_type = 23;
  if (!this->_internal_position_date_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_position_date_type().data(), static_cast<int>(this->_internal_position_date_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstrumentInfo.position_date_type");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_position_date_type(), target);
  }

  // double long_margin_ratio = 24;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_long_margin_ratio = this->_internal_long_margin_ratio();
  uint64_t raw_long_margin_ratio;
  memcpy(&raw_long_margin_ratio, &tmp_long_margin_ratio, sizeof(tmp_long_margin_ratio));
  if (raw_long_margin_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_long_margin_ratio(), target);
  }

  // double short_margin_ratio = 25;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_short_margin_ratio = this->_internal_short_margin_ratio();
  uint64_t raw_short_margin_ratio;
  memcpy(&raw_short_margin_ratio, &tmp_short_margin_ratio, sizeof(tmp_short_margin_ratio));
  if (raw_short_margin_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_short_margin_ratio(), target);
  }

  // string max_margin_side_algorithm = 26;
  if (!this->_internal_max_margin_side_algorithm().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_max_margin_side_algorithm().data(), static_cast<int>(this->_internal_max_margin_side_algorithm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstrumentInfo.max_margin_side_algorithm");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_max_margin_side_algorithm(), target);
  }

  // string reserve_4 = 27;
  if (!this->_internal_reserve_4().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reserve_4().data(), static_cast<int>(this->_internal_reserve_4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstrumentInfo.reserve_4");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_reserve_4(), target);
  }

  // double strike_price = 28;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_strike_price = this->_internal_strike_price();
  uint64_t raw_strike_price;
  memcpy(&raw_strike_price, &tmp_strike_price, sizeof(tmp_strike_price));
  if (raw_strike_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(28, this->_internal_strike_price(), target);
  }

  // string options_type = 29;
  if (!this->_internal_options_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_options_type().data(), static_cast<int>(this->_internal_options_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstrumentInfo.options_type");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_options_type(), target);
  }

  // double underlying_multiple = 30;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_underlying_multiple = this->_internal_underlying_multiple();
  uint64_t raw_underlying_multiple;
  memcpy(&raw_underlying_multiple, &tmp_underlying_multiple, sizeof(tmp_underlying_multiple));
  if (raw_underlying_multiple != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(30, this->_internal_underlying_multiple(), target);
  }

  // string combination_type = 31;
  if (!this->_internal_combination_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_combination_type().data(), static_cast<int>(this->_internal_combination_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstrumentInfo.combination_type");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_combination_type(), target);
  }

  // string instrument_id = 32;
  if (!this->_internal_instrument_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstrumentInfo.instrument_id");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_instrument_id(), target);
  }

  // string exchange_inst_id = 33;
  if (!this->_internal_exchange_inst_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange_inst_id().data(), static_cast<int>(this->_internal_exchange_inst_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstrumentInfo.exchange_inst_id");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_exchange_inst_id(), target);
  }

  // string product_id = 34;
  if (!this->_internal_product_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_product_id().data(), static_cast<int>(this->_internal_product_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstrumentInfo.product_id");
    target = stream->WriteStringMaybeAliased(
        34, this->_internal_product_id(), target);
  }

  // string underlying_instr_id = 35;
  if (!this->_internal_underlying_instr_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_underlying_instr_id().data(), static_cast<int>(this->_internal_underlying_instr_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstrumentInfo.underlying_instr_id");
    target = stream->WriteStringMaybeAliased(
        35, this->_internal_underlying_instr_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InstrumentInfo)
  return target;
}

size_t InstrumentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InstrumentInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reserve_1 = 1;
  if (!this->_internal_reserve_1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reserve_1());
  }

  // string exchange_id = 2;
  if (!this->_internal_exchange_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange_id());
  }

  // string instrument_name = 3;
  if (!this->_internal_instrument_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_name());
  }

  // string reserve_2 = 4;
  if (!this->_internal_reserve_2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reserve_2());
  }

  // string reserve_3 = 5;
  if (!this->_internal_reserve_3().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reserve_3());
  }

  // string product_class = 6;
  if (!this->_internal_product_class().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_product_class());
  }

  // string create_date = 15;
  if (!this->_internal_create_date().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_date());
  }

  // string open_date = 16;
  if (!this->_internal_open_date().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_open_date());
  }

  // string expire_date = 17;
  if (!this->_internal_expire_date().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_expire_date());
  }

  // string start_deliv_date = 18;
  if (!this->_internal_start_deliv_date().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_start_deliv_date());
  }

  // string end_deliv_date = 19;
  if (!this->_internal_end_deliv_date().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_end_deliv_date());
  }

  // string inst_life_phase = 20;
  if (!this->_internal_inst_life_phase().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inst_life_phase());
  }

  // string position_type = 22;
  if (!this->_internal_position_type().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_position_type());
  }

  // string position_date_type = 23;
  if (!this->_internal_position_date_type().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_position_date_type());
  }

  // string max_margin_side_algorithm = 26;
  if (!this->_internal_max_margin_side_algorithm().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_max_margin_side_algorithm());
  }

  // string reserve_4 = 27;
  if (!this->_internal_reserve_4().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reserve_4());
  }

  // string options_type = 29;
  if (!this->_internal_options_type().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_options_type());
  }

  // string combination_type = 31;
  if (!this->_internal_combination_type().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_combination_type());
  }

  // string instrument_id = 32;
  if (!this->_internal_instrument_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_id());
  }

  // string exchange_inst_id = 33;
  if (!this->_internal_exchange_inst_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange_inst_id());
  }

  // string product_id = 34;
  if (!this->_internal_product_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_product_id());
  }

  // string underlying_instr_id = 35;
  if (!this->_internal_underlying_instr_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_underlying_instr_id());
  }

  // int32 delivery_year = 7;
  if (this->_internal_delivery_year() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_delivery_year());
  }

  // int32 delivery_month = 8;
  if (this->_internal_delivery_month() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_delivery_month());
  }

  // int32 max_market_order_volume = 9;
  if (this->_internal_max_market_order_volume() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_market_order_volume());
  }

  // int32 min_market_order_volume = 10;
  if (this->_internal_min_market_order_volume() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_min_market_order_volume());
  }

  // int32 max_limit_order_volume = 11;
  if (this->_internal_max_limit_order_volume() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_limit_order_volume());
  }

  // int32 min_limit_order_volume = 12;
  if (this->_internal_min_limit_order_volume() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_min_limit_order_volume());
  }

  // double price_tick = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price_tick = this->_internal_price_tick();
  uint64_t raw_price_tick;
  memcpy(&raw_price_tick, &tmp_price_tick, sizeof(tmp_price_tick));
  if (raw_price_tick != 0) {
    total_size += 1 + 8;
  }

  // int32 volume_multiple = 13;
  if (this->_internal_volume_multiple() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_volume_multiple());
  }

  // int32 is_trading = 21;
  if (this->_internal_is_trading() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_trading());
  }

  // double long_margin_ratio = 24;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_long_margin_ratio = this->_internal_long_margin_ratio();
  uint64_t raw_long_margin_ratio;
  memcpy(&raw_long_margin_ratio, &tmp_long_margin_ratio, sizeof(tmp_long_margin_ratio));
  if (raw_long_margin_ratio != 0) {
    total_size += 2 + 8;
  }

  // double short_margin_ratio = 25;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_short_margin_ratio = this->_internal_short_margin_ratio();
  uint64_t raw_short_margin_ratio;
  memcpy(&raw_short_margin_ratio, &tmp_short_margin_ratio, sizeof(tmp_short_margin_ratio));
  if (raw_short_margin_ratio != 0) {
    total_size += 2 + 8;
  }

  // double strike_price = 28;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_strike_price = this->_internal_strike_price();
  uint64_t raw_strike_price;
  memcpy(&raw_strike_price, &tmp_strike_price, sizeof(tmp_strike_price));
  if (raw_strike_price != 0) {
    total_size += 2 + 8;
  }

  // double underlying_multiple = 30;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_underlying_multiple = this->_internal_underlying_multiple();
  uint64_t raw_underlying_multiple;
  memcpy(&raw_underlying_multiple, &tmp_underlying_multiple, sizeof(tmp_underlying_multiple));
  if (raw_underlying_multiple != 0) {
    total_size += 2 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstrumentInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InstrumentInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstrumentInfo::GetClassData() const { return &_class_data_; }

void InstrumentInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InstrumentInfo *>(to)->MergeFrom(
      static_cast<const InstrumentInfo &>(from));
}


void InstrumentInfo::MergeFrom(const InstrumentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InstrumentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reserve_1().empty()) {
    _internal_set_reserve_1(from._internal_reserve_1());
  }
  if (!from._internal_exchange_id().empty()) {
    _internal_set_exchange_id(from._internal_exchange_id());
  }
  if (!from._internal_instrument_name().empty()) {
    _internal_set_instrument_name(from._internal_instrument_name());
  }
  if (!from._internal_reserve_2().empty()) {
    _internal_set_reserve_2(from._internal_reserve_2());
  }
  if (!from._internal_reserve_3().empty()) {
    _internal_set_reserve_3(from._internal_reserve_3());
  }
  if (!from._internal_product_class().empty()) {
    _internal_set_product_class(from._internal_product_class());
  }
  if (!from._internal_create_date().empty()) {
    _internal_set_create_date(from._internal_create_date());
  }
  if (!from._internal_open_date().empty()) {
    _internal_set_open_date(from._internal_open_date());
  }
  if (!from._internal_expire_date().empty()) {
    _internal_set_expire_date(from._internal_expire_date());
  }
  if (!from._internal_start_deliv_date().empty()) {
    _internal_set_start_deliv_date(from._internal_start_deliv_date());
  }
  if (!from._internal_end_deliv_date().empty()) {
    _internal_set_end_deliv_date(from._internal_end_deliv_date());
  }
  if (!from._internal_inst_life_phase().empty()) {
    _internal_set_inst_life_phase(from._internal_inst_life_phase());
  }
  if (!from._internal_position_type().empty()) {
    _internal_set_position_type(from._internal_position_type());
  }
  if (!from._internal_position_date_type().empty()) {
    _internal_set_position_date_type(from._internal_position_date_type());
  }
  if (!from._internal_max_margin_side_algorithm().empty()) {
    _internal_set_max_margin_side_algorithm(from._internal_max_margin_side_algorithm());
  }
  if (!from._internal_reserve_4().empty()) {
    _internal_set_reserve_4(from._internal_reserve_4());
  }
  if (!from._internal_options_type().empty()) {
    _internal_set_options_type(from._internal_options_type());
  }
  if (!from._internal_combination_type().empty()) {
    _internal_set_combination_type(from._internal_combination_type());
  }
  if (!from._internal_instrument_id().empty()) {
    _internal_set_instrument_id(from._internal_instrument_id());
  }
  if (!from._internal_exchange_inst_id().empty()) {
    _internal_set_exchange_inst_id(from._internal_exchange_inst_id());
  }
  if (!from._internal_product_id().empty()) {
    _internal_set_product_id(from._internal_product_id());
  }
  if (!from._internal_underlying_instr_id().empty()) {
    _internal_set_underlying_instr_id(from._internal_underlying_instr_id());
  }
  if (from._internal_delivery_year() != 0) {
    _internal_set_delivery_year(from._internal_delivery_year());
  }
  if (from._internal_delivery_month() != 0) {
    _internal_set_delivery_month(from._internal_delivery_month());
  }
  if (from._internal_max_market_order_volume() != 0) {
    _internal_set_max_market_order_volume(from._internal_max_market_order_volume());
  }
  if (from._internal_min_market_order_volume() != 0) {
    _internal_set_min_market_order_volume(from._internal_min_market_order_volume());
  }
  if (from._internal_max_limit_order_volume() != 0) {
    _internal_set_max_limit_order_volume(from._internal_max_limit_order_volume());
  }
  if (from._internal_min_limit_order_volume() != 0) {
    _internal_set_min_limit_order_volume(from._internal_min_limit_order_volume());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price_tick = from._internal_price_tick();
  uint64_t raw_price_tick;
  memcpy(&raw_price_tick, &tmp_price_tick, sizeof(tmp_price_tick));
  if (raw_price_tick != 0) {
    _internal_set_price_tick(from._internal_price_tick());
  }
  if (from._internal_volume_multiple() != 0) {
    _internal_set_volume_multiple(from._internal_volume_multiple());
  }
  if (from._internal_is_trading() != 0) {
    _internal_set_is_trading(from._internal_is_trading());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_long_margin_ratio = from._internal_long_margin_ratio();
  uint64_t raw_long_margin_ratio;
  memcpy(&raw_long_margin_ratio, &tmp_long_margin_ratio, sizeof(tmp_long_margin_ratio));
  if (raw_long_margin_ratio != 0) {
    _internal_set_long_margin_ratio(from._internal_long_margin_ratio());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_short_margin_ratio = from._internal_short_margin_ratio();
  uint64_t raw_short_margin_ratio;
  memcpy(&raw_short_margin_ratio, &tmp_short_margin_ratio, sizeof(tmp_short_margin_ratio));
  if (raw_short_margin_ratio != 0) {
    _internal_set_short_margin_ratio(from._internal_short_margin_ratio());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_strike_price = from._internal_strike_price();
  uint64_t raw_strike_price;
  memcpy(&raw_strike_price, &tmp_strike_price, sizeof(tmp_strike_price));
  if (raw_strike_price != 0) {
    _internal_set_strike_price(from._internal_strike_price());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_underlying_multiple = from._internal_underlying_multiple();
  uint64_t raw_underlying_multiple;
  memcpy(&raw_underlying_multiple, &tmp_underlying_multiple, sizeof(tmp_underlying_multiple));
  if (raw_underlying_multiple != 0) {
    _internal_set_underlying_multiple(from._internal_underlying_multiple());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstrumentInfo::CopyFrom(const InstrumentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InstrumentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentInfo::IsInitialized() const {
  return true;
}

void InstrumentInfo::InternalSwap(InstrumentInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reserve_1_, lhs_arena,
      &other->reserve_1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &exchange_id_, lhs_arena,
      &other->exchange_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &instrument_name_, lhs_arena,
      &other->instrument_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reserve_2_, lhs_arena,
      &other->reserve_2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reserve_3_, lhs_arena,
      &other->reserve_3_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &product_class_, lhs_arena,
      &other->product_class_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_date_, lhs_arena,
      &other->create_date_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &open_date_, lhs_arena,
      &other->open_date_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &expire_date_, lhs_arena,
      &other->expire_date_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &start_deliv_date_, lhs_arena,
      &other->start_deliv_date_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &end_deliv_date_, lhs_arena,
      &other->end_deliv_date_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &inst_life_phase_, lhs_arena,
      &other->inst_life_phase_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &position_type_, lhs_arena,
      &other->position_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &position_date_type_, lhs_arena,
      &other->position_date_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &max_margin_side_algorithm_, lhs_arena,
      &other->max_margin_side_algorithm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reserve_4_, lhs_arena,
      &other->reserve_4_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &options_type_, lhs_arena,
      &other->options_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &combination_type_, lhs_arena,
      &other->combination_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &instrument_id_, lhs_arena,
      &other->instrument_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &exchange_inst_id_, lhs_arena,
      &other->exchange_inst_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &product_id_, lhs_arena,
      &other->product_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &underlying_instr_id_, lhs_arena,
      &other->underlying_instr_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstrumentInfo, underlying_multiple_)
      + sizeof(InstrumentInfo::underlying_multiple_)
      - PROTOBUF_FIELD_OFFSET(InstrumentInfo, delivery_year_)>(
          reinterpret_cast<char*>(&delivery_year_),
          reinterpret_cast<char*>(&other->delivery_year_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstrumentInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_instrument_2eproto_getter, &descriptor_table_instrument_2eproto_once,
      file_level_metadata_instrument_2eproto[0]);
}

// ===================================================================

class InstrumentStatus::_Internal {
 public:
};

InstrumentStatus::InstrumentStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:InstrumentStatus)
}
InstrumentStatus::InstrumentStatus(const InstrumentStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  exchange_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange_id().empty()) {
    exchange_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_exchange_id(), 
      GetArenaForAllocation());
  }
  reserve_1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reserve_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reserve_1().empty()) {
    reserve_1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reserve_1(), 
      GetArenaForAllocation());
  }
  settlement_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    settlement_group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_settlement_group_id().empty()) {
    settlement_group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_settlement_group_id(), 
      GetArenaForAllocation());
  }
  reserve_2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reserve_2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reserve_2().empty()) {
    reserve_2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reserve_2(), 
      GetArenaForAllocation());
  }
  instrument_status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    instrument_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_status().empty()) {
    instrument_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_instrument_status(), 
      GetArenaForAllocation());
  }
  enter_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    enter_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_enter_time().empty()) {
    enter_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_enter_time(), 
      GetArenaForAllocation());
  }
  enter_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    enter_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_enter_reason().empty()) {
    enter_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_enter_reason(), 
      GetArenaForAllocation());
  }
  exchange_inst_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    exchange_inst_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange_inst_id().empty()) {
    exchange_inst_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_exchange_inst_id(), 
      GetArenaForAllocation());
  }
  instrument_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_id().empty()) {
    instrument_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_instrument_id(), 
      GetArenaForAllocation());
  }
  status_zn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    status_zn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status_zn().empty()) {
    status_zn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status_zn(), 
      GetArenaForAllocation());
  }
  pre_status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pre_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pre_status().empty()) {
    pre_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pre_status(), 
      GetArenaForAllocation());
  }
  pre_enter_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pre_enter_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pre_enter_time().empty()) {
    pre_enter_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pre_enter_time(), 
      GetArenaForAllocation());
  }
  pre_enter_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pre_enter_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pre_enter_reason().empty()) {
    pre_enter_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pre_enter_reason(), 
      GetArenaForAllocation());
  }
  ::memcpy(&trading_segment_sn_, &from.trading_segment_sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&pre_trading_segment_sn_) -
    reinterpret_cast<char*>(&trading_segment_sn_)) + sizeof(pre_trading_segment_sn_));
  // @@protoc_insertion_point(copy_constructor:InstrumentStatus)
}

inline void InstrumentStatus::SharedCtor() {
exchange_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
reserve_1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reserve_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
settlement_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  settlement_group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
reserve_2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reserve_2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
instrument_status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  instrument_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
enter_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  enter_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
enter_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  enter_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
exchange_inst_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  exchange_inst_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
instrument_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
status_zn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  status_zn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pre_status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pre_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pre_enter_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pre_enter_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pre_enter_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pre_enter_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&trading_segment_sn_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pre_trading_segment_sn_) -
    reinterpret_cast<char*>(&trading_segment_sn_)) + sizeof(pre_trading_segment_sn_));
}

InstrumentStatus::~InstrumentStatus() {
  // @@protoc_insertion_point(destructor:InstrumentStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InstrumentStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  exchange_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reserve_1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  settlement_group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reserve_2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrument_status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enter_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enter_reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_inst_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrument_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_zn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pre_status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pre_enter_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pre_enter_reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InstrumentStatus::ArenaDtor(void* object) {
  InstrumentStatus* _this = reinterpret_cast< InstrumentStatus* >(object);
  (void)_this;
}
void InstrumentStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstrumentStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InstrumentStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:InstrumentStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exchange_id_.ClearToEmpty();
  reserve_1_.ClearToEmpty();
  settlement_group_id_.ClearToEmpty();
  reserve_2_.ClearToEmpty();
  instrument_status_.ClearToEmpty();
  enter_time_.ClearToEmpty();
  enter_reason_.ClearToEmpty();
  exchange_inst_id_.ClearToEmpty();
  instrument_id_.ClearToEmpty();
  status_zn_.ClearToEmpty();
  pre_status_.ClearToEmpty();
  pre_enter_time_.ClearToEmpty();
  pre_enter_reason_.ClearToEmpty();
  ::memset(&trading_segment_sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pre_trading_segment_sn_) -
      reinterpret_cast<char*>(&trading_segment_sn_)) + sizeof(pre_trading_segment_sn_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstrumentStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string exchange_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_exchange_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstrumentStatus.exchange_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string reserve_1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_reserve_1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstrumentStatus.reserve_1"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string settlement_group_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_settlement_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstrumentStatus.settlement_group_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string reserve_2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_reserve_2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstrumentStatus.reserve_2"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string instrument_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_instrument_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstrumentStatus.instrument_status"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 trading_segment_sn = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          trading_segment_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string enter_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_enter_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstrumentStatus.enter_time"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string enter_reason = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_enter_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstrumentStatus.enter_reason"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string exchange_inst_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_exchange_inst_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstrumentStatus.exchange_inst_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string instrument_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstrumentStatus.instrument_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string status_zn = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_status_zn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstrumentStatus.status_zn"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pre_trading_segment_sn = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          pre_trading_segment_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pre_status = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_pre_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstrumentStatus.pre_status"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pre_enter_time = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_pre_enter_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstrumentStatus.pre_enter_time"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pre_enter_reason = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_pre_enter_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstrumentStatus.pre_enter_reason"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InstrumentStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InstrumentStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string exchange_id = 1;
  if (!this->_internal_exchange_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange_id().data(), static_cast<int>(this->_internal_exchange_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstrumentStatus.exchange_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_exchange_id(), target);
  }

  // string reserve_1 = 2;
  if (!this->_internal_reserve_1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reserve_1().data(), static_cast<int>(this->_internal_reserve_1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstrumentStatus.reserve_1");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reserve_1(), target);
  }

  // string settlement_group_id = 3;
  if (!this->_internal_settlement_group_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_settlement_group_id().data(), static_cast<int>(this->_internal_settlement_group_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstrumentStatus.settlement_group_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_settlement_group_id(), target);
  }

  // string reserve_2 = 4;
  if (!this->_internal_reserve_2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reserve_2().data(), static_cast<int>(this->_internal_reserve_2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstrumentStatus.reserve_2");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reserve_2(), target);
  }

  // string instrument_status = 5;
  if (!this->_internal_instrument_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_status().data(), static_cast<int>(this->_internal_instrument_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstrumentStatus.instrument_status");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_instrument_status(), target);
  }

  // int32 trading_segment_sn = 6;
  if (this->_internal_trading_segment_sn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_trading_segment_sn(), target);
  }

  // string enter_time = 7;
  if (!this->_internal_enter_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enter_time().data(), static_cast<int>(this->_internal_enter_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstrumentStatus.enter_time");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_enter_time(), target);
  }

  // string enter_reason = 8;
  if (!this->_internal_enter_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enter_reason().data(), static_cast<int>(this->_internal_enter_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstrumentStatus.enter_reason");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_enter_reason(), target);
  }

  // string exchange_inst_id = 9;
  if (!this->_internal_exchange_inst_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange_inst_id().data(), static_cast<int>(this->_internal_exchange_inst_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstrumentStatus.exchange_inst_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_exchange_inst_id(), target);
  }

  // string instrument_id = 10;
  if (!this->_internal_instrument_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstrumentStatus.instrument_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_instrument_id(), target);
  }

  // string status_zn = 11;
  if (!this->_internal_status_zn().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status_zn().data(), static_cast<int>(this->_internal_status_zn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstrumentStatus.status_zn");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_status_zn(), target);
  }

  // int32 pre_trading_segment_sn = 12;
  if (this->_internal_pre_trading_segment_sn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_pre_trading_segment_sn(), target);
  }

  // string pre_status = 13;
  if (!this->_internal_pre_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pre_status().data(), static_cast<int>(this->_internal_pre_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstrumentStatus.pre_status");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_pre_status(), target);
  }

  // string pre_enter_time = 14;
  if (!this->_internal_pre_enter_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pre_enter_time().data(), static_cast<int>(this->_internal_pre_enter_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstrumentStatus.pre_enter_time");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_pre_enter_time(), target);
  }

  // string pre_enter_reason = 15;
  if (!this->_internal_pre_enter_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pre_enter_reason().data(), static_cast<int>(this->_internal_pre_enter_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstrumentStatus.pre_enter_reason");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_pre_enter_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InstrumentStatus)
  return target;
}

size_t InstrumentStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InstrumentStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string exchange_id = 1;
  if (!this->_internal_exchange_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange_id());
  }

  // string reserve_1 = 2;
  if (!this->_internal_reserve_1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reserve_1());
  }

  // string settlement_group_id = 3;
  if (!this->_internal_settlement_group_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_settlement_group_id());
  }

  // string reserve_2 = 4;
  if (!this->_internal_reserve_2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reserve_2());
  }

  // string instrument_status = 5;
  if (!this->_internal_instrument_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_status());
  }

  // string enter_time = 7;
  if (!this->_internal_enter_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enter_time());
  }

  // string enter_reason = 8;
  if (!this->_internal_enter_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enter_reason());
  }

  // string exchange_inst_id = 9;
  if (!this->_internal_exchange_inst_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange_inst_id());
  }

  // string instrument_id = 10;
  if (!this->_internal_instrument_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_id());
  }

  // string status_zn = 11;
  if (!this->_internal_status_zn().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status_zn());
  }

  // string pre_status = 13;
  if (!this->_internal_pre_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pre_status());
  }

  // string pre_enter_time = 14;
  if (!this->_internal_pre_enter_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pre_enter_time());
  }

  // string pre_enter_reason = 15;
  if (!this->_internal_pre_enter_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pre_enter_reason());
  }

  // int32 trading_segment_sn = 6;
  if (this->_internal_trading_segment_sn() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_trading_segment_sn());
  }

  // int32 pre_trading_segment_sn = 12;
  if (this->_internal_pre_trading_segment_sn() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_pre_trading_segment_sn());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstrumentStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InstrumentStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstrumentStatus::GetClassData() const { return &_class_data_; }

void InstrumentStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InstrumentStatus *>(to)->MergeFrom(
      static_cast<const InstrumentStatus &>(from));
}


void InstrumentStatus::MergeFrom(const InstrumentStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InstrumentStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_exchange_id().empty()) {
    _internal_set_exchange_id(from._internal_exchange_id());
  }
  if (!from._internal_reserve_1().empty()) {
    _internal_set_reserve_1(from._internal_reserve_1());
  }
  if (!from._internal_settlement_group_id().empty()) {
    _internal_set_settlement_group_id(from._internal_settlement_group_id());
  }
  if (!from._internal_reserve_2().empty()) {
    _internal_set_reserve_2(from._internal_reserve_2());
  }
  if (!from._internal_instrument_status().empty()) {
    _internal_set_instrument_status(from._internal_instrument_status());
  }
  if (!from._internal_enter_time().empty()) {
    _internal_set_enter_time(from._internal_enter_time());
  }
  if (!from._internal_enter_reason().empty()) {
    _internal_set_enter_reason(from._internal_enter_reason());
  }
  if (!from._internal_exchange_inst_id().empty()) {
    _internal_set_exchange_inst_id(from._internal_exchange_inst_id());
  }
  if (!from._internal_instrument_id().empty()) {
    _internal_set_instrument_id(from._internal_instrument_id());
  }
  if (!from._internal_status_zn().empty()) {
    _internal_set_status_zn(from._internal_status_zn());
  }
  if (!from._internal_pre_status().empty()) {
    _internal_set_pre_status(from._internal_pre_status());
  }
  if (!from._internal_pre_enter_time().empty()) {
    _internal_set_pre_enter_time(from._internal_pre_enter_time());
  }
  if (!from._internal_pre_enter_reason().empty()) {
    _internal_set_pre_enter_reason(from._internal_pre_enter_reason());
  }
  if (from._internal_trading_segment_sn() != 0) {
    _internal_set_trading_segment_sn(from._internal_trading_segment_sn());
  }
  if (from._internal_pre_trading_segment_sn() != 0) {
    _internal_set_pre_trading_segment_sn(from._internal_pre_trading_segment_sn());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstrumentStatus::CopyFrom(const InstrumentStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InstrumentStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentStatus::IsInitialized() const {
  return true;
}

void InstrumentStatus::InternalSwap(InstrumentStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &exchange_id_, lhs_arena,
      &other->exchange_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reserve_1_, lhs_arena,
      &other->reserve_1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &settlement_group_id_, lhs_arena,
      &other->settlement_group_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reserve_2_, lhs_arena,
      &other->reserve_2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &instrument_status_, lhs_arena,
      &other->instrument_status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &enter_time_, lhs_arena,
      &other->enter_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &enter_reason_, lhs_arena,
      &other->enter_reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &exchange_inst_id_, lhs_arena,
      &other->exchange_inst_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &instrument_id_, lhs_arena,
      &other->instrument_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_zn_, lhs_arena,
      &other->status_zn_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pre_status_, lhs_arena,
      &other->pre_status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pre_enter_time_, lhs_arena,
      &other->pre_enter_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pre_enter_reason_, lhs_arena,
      &other->pre_enter_reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstrumentStatus, pre_trading_segment_sn_)
      + sizeof(InstrumentStatus::pre_trading_segment_sn_)
      - PROTOBUF_FIELD_OFFSET(InstrumentStatus, trading_segment_sn_)>(
          reinterpret_cast<char*>(&trading_segment_sn_),
          reinterpret_cast<char*>(&other->trading_segment_sn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstrumentStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_instrument_2eproto_getter, &descriptor_table_instrument_2eproto_once,
      file_level_metadata_instrument_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::InstrumentInfo* Arena::CreateMaybeMessage< ::InstrumentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InstrumentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::InstrumentStatus* Arena::CreateMaybeMessage< ::InstrumentStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InstrumentStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
