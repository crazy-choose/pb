// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: account.proto

package model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 资金账户
type AccountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerId                       string  `protobuf:"bytes,1,opt,name=broker_id,json=brokerId,proto3" json:"broker_id,omitempty"`                                                                              // 经纪公司代码
	AccountId                      string  `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                                                           // 投资者帐号
	PreMortgage                    float64 `protobuf:"fixed64,3,opt,name=pre_mortgage,json=preMortgage,proto3" json:"pre_mortgage,omitempty"`                                                                   // 上次质押金额
	PreCredit                      float64 `protobuf:"fixed64,4,opt,name=pre_credit,json=preCredit,proto3" json:"pre_credit,omitempty"`                                                                         // 上次信用额度
	PreDeposit                     float64 `protobuf:"fixed64,5,opt,name=pre_deposit,json=preDeposit,proto3" json:"pre_deposit,omitempty"`                                                                      // 上次存款额
	PreBalance                     float64 `protobuf:"fixed64,6,opt,name=pre_balance,json=preBalance,proto3" json:"pre_balance,omitempty"`                                                                      // 上次结算准备金
	PreMargin                      float64 `protobuf:"fixed64,7,opt,name=pre_margin,json=preMargin,proto3" json:"pre_margin,omitempty"`                                                                         // 上次占用的保证金
	InterestBase                   float64 `protobuf:"fixed64,8,opt,name=interest_base,json=interestBase,proto3" json:"interest_base,omitempty"`                                                                // 利息基数
	Interest                       float64 `protobuf:"fixed64,9,opt,name=interest,proto3" json:"interest,omitempty"`                                                                                            // 利息收入
	Deposit                        float64 `protobuf:"fixed64,10,opt,name=deposit,proto3" json:"deposit,omitempty"`                                                                                             // 入金金额
	Withdraw                       float64 `protobuf:"fixed64,11,opt,name=withdraw,proto3" json:"withdraw,omitempty"`                                                                                           // 出金金额
	FrozenMargin                   float64 `protobuf:"fixed64,12,opt,name=frozen_margin,json=frozenMargin,proto3" json:"frozen_margin,omitempty"`                                                               // 冻结的保证金
	FrozenCash                     float64 `protobuf:"fixed64,13,opt,name=frozen_cash,json=frozenCash,proto3" json:"frozen_cash,omitempty"`                                                                     // 冻结的资金
	FrozenCommission               float64 `protobuf:"fixed64,14,opt,name=frozen_commission,json=frozenCommission,proto3" json:"frozen_commission,omitempty"`                                                   // 冻结的手续费
	CurrMargin                     float64 `protobuf:"fixed64,15,opt,name=curr_margin,json=currMargin,proto3" json:"curr_margin,omitempty"`                                                                     // 当前保证金总额
	CashIn                         float64 `protobuf:"fixed64,16,opt,name=cash_in,json=cashIn,proto3" json:"cash_in,omitempty"`                                                                                 // 资金差额
	Commission                     float64 `protobuf:"fixed64,17,opt,name=commission,proto3" json:"commission,omitempty"`                                                                                       // 手续费
	CloseProfit                    float64 `protobuf:"fixed64,18,opt,name=close_profit,json=closeProfit,proto3" json:"close_profit,omitempty"`                                                                  // 平仓盈亏
	PositionProfit                 float64 `protobuf:"fixed64,19,opt,name=position_profit,json=positionProfit,proto3" json:"position_profit,omitempty"`                                                         // 持仓盈亏
	Balance                        float64 `protobuf:"fixed64,20,opt,name=balance,proto3" json:"balance,omitempty"`                                                                                             // 期货结算准备金
	Available                      float64 `protobuf:"fixed64,21,opt,name=available,proto3" json:"available,omitempty"`                                                                                         // 可用资金
	WithdrawQuota                  float64 `protobuf:"fixed64,22,opt,name=withdraw_quota,json=withdrawQuota,proto3" json:"withdraw_quota,omitempty"`                                                            // 可取资金
	Reserve                        float64 `protobuf:"fixed64,23,opt,name=reserve,proto3" json:"reserve,omitempty"`                                                                                             // 基本准备金
	TradingDay                     string  `protobuf:"bytes,24,opt,name=trading_day,json=tradingDay,proto3" json:"trading_day,omitempty"`                                                                       // 交易日
	SettlementId                   int32   `protobuf:"varint,25,opt,name=settlement_id,json=settlementId,proto3" json:"settlement_id,omitempty"`                                                                // 结算编号
	Credit                         float64 `protobuf:"fixed64,26,opt,name=credit,proto3" json:"credit,omitempty"`                                                                                               // 信用额度
	Mortgage                       float64 `protobuf:"fixed64,27,opt,name=mortgage,proto3" json:"mortgage,omitempty"`                                                                                           // 质押金额
	ExchangeMargin                 float64 `protobuf:"fixed64,28,opt,name=exchange_margin,json=exchangeMargin,proto3" json:"exchange_margin,omitempty"`                                                         // 交易所保证金
	DeliveryMargin                 float64 `protobuf:"fixed64,29,opt,name=delivery_margin,json=deliveryMargin,proto3" json:"delivery_margin,omitempty"`                                                         // 投资者交割保证金
	ExchangeDeliveryMargin         float64 `protobuf:"fixed64,30,opt,name=exchange_delivery_margin,json=exchangeDeliveryMargin,proto3" json:"exchange_delivery_margin,omitempty"`                               // 交易所交割保证金
	ReserveBalance                 float64 `protobuf:"fixed64,31,opt,name=reserve_balance,json=reserveBalance,proto3" json:"reserve_balance,omitempty"`                                                         // 保底期货结算准备金
	CurrencyId                     string  `protobuf:"bytes,32,opt,name=currency_id,json=currencyId,proto3" json:"currency_id,omitempty"`                                                                       // 币种代码
	PreFundMortgageIn              float64 `protobuf:"fixed64,33,opt,name=pre_fund_mortgage_in,json=preFundMortgageIn,proto3" json:"pre_fund_mortgage_in,omitempty"`                                            // 上次货币质入金额
	PreFundMortgageOut             float64 `protobuf:"fixed64,34,opt,name=pre_fund_mortgage_out,json=preFundMortgageOut,proto3" json:"pre_fund_mortgage_out,omitempty"`                                         // 上次货币质出金额
	FundMortgageIn                 float64 `protobuf:"fixed64,35,opt,name=fund_mortgage_in,json=fundMortgageIn,proto3" json:"fund_mortgage_in,omitempty"`                                                       // 货币质入金额
	FundMortgageOut                float64 `protobuf:"fixed64,36,opt,name=fund_mortgage_out,json=fundMortgageOut,proto3" json:"fund_mortgage_out,omitempty"`                                                    // 货币质出金额
	FundMortgageAvailable          float64 `protobuf:"fixed64,37,opt,name=fund_mortgage_available,json=fundMortgageAvailable,proto3" json:"fund_mortgage_available,omitempty"`                                  // 货币质押余额
	MortgageableFund               float64 `protobuf:"fixed64,38,opt,name=mortgageable_fund,json=mortgageableFund,proto3" json:"mortgageable_fund,omitempty"`                                                   // 可质押货币金额
	SpecProductMargin              float64 `protobuf:"fixed64,39,opt,name=spec_product_margin,json=specProductMargin,proto3" json:"spec_product_margin,omitempty"`                                              // 特殊产品占用保证金
	SpecProductFrozenMargin        float64 `protobuf:"fixed64,40,opt,name=spec_product_frozen_margin,json=specProductFrozenMargin,proto3" json:"spec_product_frozen_margin,omitempty"`                          // 特殊产品冻结保证金
	SpecProductCommission          float64 `protobuf:"fixed64,41,opt,name=spec_product_commission,json=specProductCommission,proto3" json:"spec_product_commission,omitempty"`                                  // 特殊产品手续费
	SpecProductFrozenCommission    float64 `protobuf:"fixed64,42,opt,name=spec_product_frozen_commission,json=specProductFrozenCommission,proto3" json:"spec_product_frozen_commission,omitempty"`              // 特殊产品冻结手续费
	SpecProductPositionProfit      float64 `protobuf:"fixed64,43,opt,name=spec_product_position_profit,json=specProductPositionProfit,proto3" json:"spec_product_position_profit,omitempty"`                    // 特殊产品持仓盈亏
	SpecProductCloseProfit         float64 `protobuf:"fixed64,44,opt,name=spec_product_close_profit,json=specProductCloseProfit,proto3" json:"spec_product_close_profit,omitempty"`                             // 特殊产品平仓盈亏
	SpecProductPositionProfitByAlg float64 `protobuf:"fixed64,45,opt,name=spec_product_position_profit_by_alg,json=specProductPositionProfitByAlg,proto3" json:"spec_product_position_profit_by_alg,omitempty"` // 根据持仓盈亏算法计算的特殊产品持仓盈亏
	SpecProductExchangeMargin      float64 `protobuf:"fixed64,46,opt,name=spec_product_exchange_margin,json=specProductExchangeMargin,proto3" json:"spec_product_exchange_margin,omitempty"`                    // 特殊产品交易所保证金
	BizType                        string  `protobuf:"bytes,47,opt,name=biz_type,json=bizType,proto3" json:"biz_type,omitempty"`                                                                                // 业务类型
	FrozenSwap                     float64 `protobuf:"fixed64,48,opt,name=frozen_swap,json=frozenSwap,proto3" json:"frozen_swap,omitempty"`                                                                     // 延时换汇冻结金额
	RemainSwap                     float64 `protobuf:"fixed64,49,opt,name=remain_swap,json=remainSwap,proto3" json:"remain_swap,omitempty"`                                                                     // 剩余换汇额度
}

func (x *AccountInfo) Reset() {
	*x = AccountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountInfo) ProtoMessage() {}

func (x *AccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountInfo.ProtoReflect.Descriptor instead.
func (*AccountInfo) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{0}
}

func (x *AccountInfo) GetBrokerId() string {
	if x != nil {
		return x.BrokerId
	}
	return ""
}

func (x *AccountInfo) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AccountInfo) GetPreMortgage() float64 {
	if x != nil {
		return x.PreMortgage
	}
	return 0
}

func (x *AccountInfo) GetPreCredit() float64 {
	if x != nil {
		return x.PreCredit
	}
	return 0
}

func (x *AccountInfo) GetPreDeposit() float64 {
	if x != nil {
		return x.PreDeposit
	}
	return 0
}

func (x *AccountInfo) GetPreBalance() float64 {
	if x != nil {
		return x.PreBalance
	}
	return 0
}

func (x *AccountInfo) GetPreMargin() float64 {
	if x != nil {
		return x.PreMargin
	}
	return 0
}

func (x *AccountInfo) GetInterestBase() float64 {
	if x != nil {
		return x.InterestBase
	}
	return 0
}

func (x *AccountInfo) GetInterest() float64 {
	if x != nil {
		return x.Interest
	}
	return 0
}

func (x *AccountInfo) GetDeposit() float64 {
	if x != nil {
		return x.Deposit
	}
	return 0
}

func (x *AccountInfo) GetWithdraw() float64 {
	if x != nil {
		return x.Withdraw
	}
	return 0
}

func (x *AccountInfo) GetFrozenMargin() float64 {
	if x != nil {
		return x.FrozenMargin
	}
	return 0
}

func (x *AccountInfo) GetFrozenCash() float64 {
	if x != nil {
		return x.FrozenCash
	}
	return 0
}

func (x *AccountInfo) GetFrozenCommission() float64 {
	if x != nil {
		return x.FrozenCommission
	}
	return 0
}

func (x *AccountInfo) GetCurrMargin() float64 {
	if x != nil {
		return x.CurrMargin
	}
	return 0
}

func (x *AccountInfo) GetCashIn() float64 {
	if x != nil {
		return x.CashIn
	}
	return 0
}

func (x *AccountInfo) GetCommission() float64 {
	if x != nil {
		return x.Commission
	}
	return 0
}

func (x *AccountInfo) GetCloseProfit() float64 {
	if x != nil {
		return x.CloseProfit
	}
	return 0
}

func (x *AccountInfo) GetPositionProfit() float64 {
	if x != nil {
		return x.PositionProfit
	}
	return 0
}

func (x *AccountInfo) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *AccountInfo) GetAvailable() float64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *AccountInfo) GetWithdrawQuota() float64 {
	if x != nil {
		return x.WithdrawQuota
	}
	return 0
}

func (x *AccountInfo) GetReserve() float64 {
	if x != nil {
		return x.Reserve
	}
	return 0
}

func (x *AccountInfo) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *AccountInfo) GetSettlementId() int32 {
	if x != nil {
		return x.SettlementId
	}
	return 0
}

func (x *AccountInfo) GetCredit() float64 {
	if x != nil {
		return x.Credit
	}
	return 0
}

func (x *AccountInfo) GetMortgage() float64 {
	if x != nil {
		return x.Mortgage
	}
	return 0
}

func (x *AccountInfo) GetExchangeMargin() float64 {
	if x != nil {
		return x.ExchangeMargin
	}
	return 0
}

func (x *AccountInfo) GetDeliveryMargin() float64 {
	if x != nil {
		return x.DeliveryMargin
	}
	return 0
}

func (x *AccountInfo) GetExchangeDeliveryMargin() float64 {
	if x != nil {
		return x.ExchangeDeliveryMargin
	}
	return 0
}

func (x *AccountInfo) GetReserveBalance() float64 {
	if x != nil {
		return x.ReserveBalance
	}
	return 0
}

func (x *AccountInfo) GetCurrencyId() string {
	if x != nil {
		return x.CurrencyId
	}
	return ""
}

func (x *AccountInfo) GetPreFundMortgageIn() float64 {
	if x != nil {
		return x.PreFundMortgageIn
	}
	return 0
}

func (x *AccountInfo) GetPreFundMortgageOut() float64 {
	if x != nil {
		return x.PreFundMortgageOut
	}
	return 0
}

func (x *AccountInfo) GetFundMortgageIn() float64 {
	if x != nil {
		return x.FundMortgageIn
	}
	return 0
}

func (x *AccountInfo) GetFundMortgageOut() float64 {
	if x != nil {
		return x.FundMortgageOut
	}
	return 0
}

func (x *AccountInfo) GetFundMortgageAvailable() float64 {
	if x != nil {
		return x.FundMortgageAvailable
	}
	return 0
}

func (x *AccountInfo) GetMortgageableFund() float64 {
	if x != nil {
		return x.MortgageableFund
	}
	return 0
}

func (x *AccountInfo) GetSpecProductMargin() float64 {
	if x != nil {
		return x.SpecProductMargin
	}
	return 0
}

func (x *AccountInfo) GetSpecProductFrozenMargin() float64 {
	if x != nil {
		return x.SpecProductFrozenMargin
	}
	return 0
}

func (x *AccountInfo) GetSpecProductCommission() float64 {
	if x != nil {
		return x.SpecProductCommission
	}
	return 0
}

func (x *AccountInfo) GetSpecProductFrozenCommission() float64 {
	if x != nil {
		return x.SpecProductFrozenCommission
	}
	return 0
}

func (x *AccountInfo) GetSpecProductPositionProfit() float64 {
	if x != nil {
		return x.SpecProductPositionProfit
	}
	return 0
}

func (x *AccountInfo) GetSpecProductCloseProfit() float64 {
	if x != nil {
		return x.SpecProductCloseProfit
	}
	return 0
}

func (x *AccountInfo) GetSpecProductPositionProfitByAlg() float64 {
	if x != nil {
		return x.SpecProductPositionProfitByAlg
	}
	return 0
}

func (x *AccountInfo) GetSpecProductExchangeMargin() float64 {
	if x != nil {
		return x.SpecProductExchangeMargin
	}
	return 0
}

func (x *AccountInfo) GetBizType() string {
	if x != nil {
		return x.BizType
	}
	return ""
}

func (x *AccountInfo) GetFrozenSwap() float64 {
	if x != nil {
		return x.FrozenSwap
	}
	return 0
}

func (x *AccountInfo) GetRemainSwap() float64 {
	if x != nil {
		return x.RemainSwap
	}
	return 0
}

//持仓
type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reserve1           string  `protobuf:"bytes,1,opt,name=reserve1,proto3" json:"reserve1,omitempty"`                                                      //保留的无效字段
	BrokerId           string  `protobuf:"bytes,2,opt,name=broker_id,json=brokerId,proto3" json:"broker_id,omitempty"`                                      //经纪公司代码
	InvestorId         string  `protobuf:"bytes,3,opt,name=investor_id,json=investorId,proto3" json:"investor_id,omitempty"`                                //投资者代码
	PosiDirection      string  `protobuf:"bytes,4,opt,name=posi_direction,json=posiDirection,proto3" json:"posi_direction,omitempty"`                       //持仓多空方向
	HedgeFlag          string  `protobuf:"bytes,5,opt,name=hedge_flag,json=hedgeFlag,proto3" json:"hedge_flag,omitempty"`                                   // 投机套保标志
	PositionDate       string  `protobuf:"bytes,6,opt,name=position_date,json=positionDate,proto3" json:"position_date,omitempty"`                          // 持仓日期
	Position           int32   `protobuf:"varint,7,opt,name=position,proto3" json:"position,omitempty"`                                                     // 当前总持仓
	YdPosition         int32   `protobuf:"varint,8,opt,name=yd_position,json=ydPosition,proto3" json:"yd_position,omitempty"`                               // 上日持仓
	TodayPosition      int32   `protobuf:"varint,9,opt,name=today_position,json=todayPosition,proto3" json:"today_position,omitempty"`                      // 表示今新开仓
	OpenVolume         int32   `protobuf:"varint,10,opt,name=open_volume,json=openVolume,proto3" json:"open_volume,omitempty"`                              // 开仓量
	CloseVolume        int32   `protobuf:"varint,11,opt,name=close_volume,json=closeVolume,proto3" json:"close_volume,omitempty"`                           // 平仓量
	OpenAmount         float64 `protobuf:"fixed64,12,opt,name=open_amount,json=openAmount,proto3" json:"open_amount,omitempty"`                             // 开仓金额
	CloseAmount        float64 `protobuf:"fixed64,13,opt,name=close_amount,json=closeAmount,proto3" json:"close_amount,omitempty"`                          // 平仓金额
	PositionCost       float64 `protobuf:"fixed64,14,opt,name=position_cost,json=positionCost,proto3" json:"position_cost,omitempty"`                       // 持仓成本=上日持仓 * 昨结算价 * 合约乘数 + SUM（今日持仓 * 开仓价 * 合约乘数）
	CloseProfit        float64 `protobuf:"fixed64,15,opt,name=close_profit,json=closeProfit,proto3" json:"close_profit,omitempty"`                          // 平仓盈亏
	PositionProfit     float64 `protobuf:"fixed64,16,opt,name=position_profit,json=positionProfit,proto3" json:"position_profit,omitempty"`                 // 持仓盈亏
	OpenCost           float64 `protobuf:"fixed64,17,opt,name=open_cost,json=openCost,proto3" json:"open_cost,omitempty"`                                   // 开仓成本
	LongFrozen         int32   `protobuf:"varint,18,opt,name=long_frozen,json=longFrozen,proto3" json:"long_frozen,omitempty"`                              // 多头冻结
	ShortFrozen        int32   `protobuf:"varint,19,opt,name=short_frozen,json=shortFrozen,proto3" json:"short_frozen,omitempty"`                           // 空头冻结
	LongFrozenAmount   float64 `protobuf:"fixed64,20,opt,name=long_frozen_amount,json=longFrozenAmount,proto3" json:"long_frozen_amount,omitempty"`         // 开仓冻结金额
	ShortFrozenAmount  float64 `protobuf:"fixed64,21,opt,name=short_frozen_amount,json=shortFrozenAmount,proto3" json:"short_frozen_amount,omitempty"`      // 开仓冻结金额
	PreMargin          float64 `protobuf:"fixed64,22,opt,name=pre_margin,json=preMargin,proto3" json:"pre_margin,omitempty"`                                // 上次占用的保证金
	UseMargin          float64 `protobuf:"fixed64,23,opt,name=use_margin,json=useMargin,proto3" json:"use_margin,omitempty"`                                // 占用的保证金
	FrozenMargin       float64 `protobuf:"fixed64,24,opt,name=frozen_margin,json=frozenMargin,proto3" json:"frozen_margin,omitempty"`                       // 冻结的保证金
	FrozenCash         float64 `protobuf:"fixed64,25,opt,name=frozen_cash,json=frozenCash,proto3" json:"frozen_cash,omitempty"`                             // 冻结的资金
	FrozenCommission   float64 `protobuf:"fixed64,26,opt,name=frozen_commission,json=frozenCommission,proto3" json:"frozen_commission,omitempty"`           // 冻结的手续费
	CashIn             float64 `protobuf:"fixed64,27,opt,name=cash_in,json=cashIn,proto3" json:"cash_in,omitempty"`                                         // 资金差额
	Commission         float64 `protobuf:"fixed64,28,opt,name=commission,proto3" json:"commission,omitempty"`                                               // 手续费
	PreSettlementPrice float64 `protobuf:"fixed64,29,opt,name=pre_settlement_price,json=preSettlementPrice,proto3" json:"pre_settlement_price,omitempty"`   // 上次结算价
	SettlementPrice    float64 `protobuf:"fixed64,30,opt,name=settlement_price,json=settlementPrice,proto3" json:"settlement_price,omitempty"`              // 本次结算价
	SettlementId       int32   `protobuf:"varint,31,opt,name=settlement_id,json=settlementId,proto3" json:"settlement_id,omitempty"`                        //结算编号
	ExchangeMargin     float64 `protobuf:"fixed64,32,opt,name=exchange_margin,json=exchangeMargin,proto3" json:"exchange_margin,omitempty"`                 // 交易所保证金
	CombPosition       int32   `protobuf:"varint,33,opt,name=comb_position,json=combPosition,proto3" json:"comb_position,omitempty"`                        // 组合成交形成的持仓
	CombLongFrozen     int32   `protobuf:"varint,34,opt,name=comb_long_frozen,json=combLongFrozen,proto3" json:"comb_long_frozen,omitempty"`                // 组合多头冻结
	CombShortFrozen    int32   `protobuf:"varint,35,opt,name=comb_short_frozen,json=combShortFrozen,proto3" json:"comb_short_frozen,omitempty"`             // 组合空头冻结
	CloseProfitByDate  float64 `protobuf:"fixed64,36,opt,name=close_profit_by_date,json=closeProfitByDate,proto3" json:"close_profit_by_date,omitempty"`    // 逐日盯市平仓盈亏
	CloseProfitByTrade float64 `protobuf:"fixed64,37,opt,name=close_profit_by_trade,json=closeProfitByTrade,proto3" json:"close_profit_by_trade,omitempty"` // 逐笔对冲平仓盈亏
	StrikeFrozen       int32   `protobuf:"varint,38,opt,name=strike_frozen,json=strikeFrozen,proto3" json:"strike_frozen,omitempty"`                        // 执行冻结
	StrikeFrozenAmount float64 `protobuf:"fixed64,39,opt,name=strike_frozen_amount,json=strikeFrozenAmount,proto3" json:"strike_frozen_amount,omitempty"`   // 执行冻结金额
	AbandonFrozen      int32   `protobuf:"varint,40,opt,name=abandon_frozen,json=abandonFrozen,proto3" json:"abandon_frozen,omitempty"`                     // 放弃执行冻结
	ExchangeId         string  `protobuf:"bytes,41,opt,name=exchange_id,json=exchangeId,proto3" json:"exchange_id,omitempty"`                               // 交易所代码
	YdStrikeFrozen     int32   `protobuf:"varint,42,opt,name=yd_strike_frozen,json=ydStrikeFrozen,proto3" json:"yd_strike_frozen,omitempty"`                // 执行冻结的昨仓
	PositionCostOffset float64 `protobuf:"fixed64,43,opt,name=position_cost_offset,json=positionCostOffset,proto3" json:"position_cost_offset,omitempty"`   // 大商所持仓成本差值，只有大商所使用
	InstrumentId       string  `protobuf:"bytes,44,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"`                         // 合约代码
	InstrumentName     string  `protobuf:"bytes,45,opt,name=instrument_name,json=instrumentName,proto3" json:"instrument_name,omitempty"`                   // 合约名
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{1}
}

func (x *Position) GetReserve1() string {
	if x != nil {
		return x.Reserve1
	}
	return ""
}

func (x *Position) GetBrokerId() string {
	if x != nil {
		return x.BrokerId
	}
	return ""
}

func (x *Position) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *Position) GetPosiDirection() string {
	if x != nil {
		return x.PosiDirection
	}
	return ""
}

func (x *Position) GetHedgeFlag() string {
	if x != nil {
		return x.HedgeFlag
	}
	return ""
}

func (x *Position) GetPositionDate() string {
	if x != nil {
		return x.PositionDate
	}
	return ""
}

func (x *Position) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *Position) GetYdPosition() int32 {
	if x != nil {
		return x.YdPosition
	}
	return 0
}

func (x *Position) GetTodayPosition() int32 {
	if x != nil {
		return x.TodayPosition
	}
	return 0
}

func (x *Position) GetOpenVolume() int32 {
	if x != nil {
		return x.OpenVolume
	}
	return 0
}

func (x *Position) GetCloseVolume() int32 {
	if x != nil {
		return x.CloseVolume
	}
	return 0
}

func (x *Position) GetOpenAmount() float64 {
	if x != nil {
		return x.OpenAmount
	}
	return 0
}

func (x *Position) GetCloseAmount() float64 {
	if x != nil {
		return x.CloseAmount
	}
	return 0
}

func (x *Position) GetPositionCost() float64 {
	if x != nil {
		return x.PositionCost
	}
	return 0
}

func (x *Position) GetCloseProfit() float64 {
	if x != nil {
		return x.CloseProfit
	}
	return 0
}

func (x *Position) GetPositionProfit() float64 {
	if x != nil {
		return x.PositionProfit
	}
	return 0
}

func (x *Position) GetOpenCost() float64 {
	if x != nil {
		return x.OpenCost
	}
	return 0
}

func (x *Position) GetLongFrozen() int32 {
	if x != nil {
		return x.LongFrozen
	}
	return 0
}

func (x *Position) GetShortFrozen() int32 {
	if x != nil {
		return x.ShortFrozen
	}
	return 0
}

func (x *Position) GetLongFrozenAmount() float64 {
	if x != nil {
		return x.LongFrozenAmount
	}
	return 0
}

func (x *Position) GetShortFrozenAmount() float64 {
	if x != nil {
		return x.ShortFrozenAmount
	}
	return 0
}

func (x *Position) GetPreMargin() float64 {
	if x != nil {
		return x.PreMargin
	}
	return 0
}

func (x *Position) GetUseMargin() float64 {
	if x != nil {
		return x.UseMargin
	}
	return 0
}

func (x *Position) GetFrozenMargin() float64 {
	if x != nil {
		return x.FrozenMargin
	}
	return 0
}

func (x *Position) GetFrozenCash() float64 {
	if x != nil {
		return x.FrozenCash
	}
	return 0
}

func (x *Position) GetFrozenCommission() float64 {
	if x != nil {
		return x.FrozenCommission
	}
	return 0
}

func (x *Position) GetCashIn() float64 {
	if x != nil {
		return x.CashIn
	}
	return 0
}

func (x *Position) GetCommission() float64 {
	if x != nil {
		return x.Commission
	}
	return 0
}

func (x *Position) GetPreSettlementPrice() float64 {
	if x != nil {
		return x.PreSettlementPrice
	}
	return 0
}

func (x *Position) GetSettlementPrice() float64 {
	if x != nil {
		return x.SettlementPrice
	}
	return 0
}

func (x *Position) GetSettlementId() int32 {
	if x != nil {
		return x.SettlementId
	}
	return 0
}

func (x *Position) GetExchangeMargin() float64 {
	if x != nil {
		return x.ExchangeMargin
	}
	return 0
}

func (x *Position) GetCombPosition() int32 {
	if x != nil {
		return x.CombPosition
	}
	return 0
}

func (x *Position) GetCombLongFrozen() int32 {
	if x != nil {
		return x.CombLongFrozen
	}
	return 0
}

func (x *Position) GetCombShortFrozen() int32 {
	if x != nil {
		return x.CombShortFrozen
	}
	return 0
}

func (x *Position) GetCloseProfitByDate() float64 {
	if x != nil {
		return x.CloseProfitByDate
	}
	return 0
}

func (x *Position) GetCloseProfitByTrade() float64 {
	if x != nil {
		return x.CloseProfitByTrade
	}
	return 0
}

func (x *Position) GetStrikeFrozen() int32 {
	if x != nil {
		return x.StrikeFrozen
	}
	return 0
}

func (x *Position) GetStrikeFrozenAmount() float64 {
	if x != nil {
		return x.StrikeFrozenAmount
	}
	return 0
}

func (x *Position) GetAbandonFrozen() int32 {
	if x != nil {
		return x.AbandonFrozen
	}
	return 0
}

func (x *Position) GetExchangeId() string {
	if x != nil {
		return x.ExchangeId
	}
	return ""
}

func (x *Position) GetYdStrikeFrozen() int32 {
	if x != nil {
		return x.YdStrikeFrozen
	}
	return 0
}

func (x *Position) GetPositionCostOffset() float64 {
	if x != nil {
		return x.PositionCostOffset
	}
	return 0
}

func (x *Position) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

func (x *Position) GetInstrumentName() string {
	if x != nil {
		return x.InstrumentName
	}
	return ""
}

var File_account_proto protoreflect.FileDescriptor

var file_account_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xb5, 0x0f, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x72, 0x65, 0x5f, 0x6d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x70, 0x72, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x72, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x72, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x42,
	0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f,
	0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x66, 0x72,
	0x6f, 0x7a, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72,
	0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x61, 0x73, 0x68, 0x12, 0x2b, 0x0a, 0x11, 0x66,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72,
	0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63,
	0x75, 0x72, 0x72, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x73,
	0x68, 0x5f, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x63, 0x61, 0x73, 0x68,
	0x49, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x5f, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x70, 0x72, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x4d, 0x6f,
	0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x5f,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75,
	0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x70, 0x72, 0x65, 0x46, 0x75, 0x6e, 0x64,
	0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x66, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x72, 0x74, 0x67,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x6f,
	0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x66, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x4f, 0x75,
	0x74, 0x12, 0x36, 0x0a, 0x17, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x72, 0x74, 0x67, 0x61,
	0x67, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x15, 0x66, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x6f, 0x72,
	0x74, 0x67, 0x61, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x6d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x73, 0x70, 0x65, 0x63,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x73, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x1e, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x1b, 0x73, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x3f, 0x0a, 0x1c, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x73, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x73, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x4b, 0x0a, 0x23,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x62, 0x79, 0x5f,
	0x61, 0x6c, 0x67, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1e, 0x73, 0x70, 0x65, 0x63, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x42, 0x79, 0x41, 0x6c, 0x67, 0x12, 0x3f, 0x0a, 0x1c, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x19, 0x73, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69,
	0x7a, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69,
	0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f,
	0x73, 0x77, 0x61, 0x70, 0x18, 0x30, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x73, 0x77, 0x61, 0x70, 0x18, 0x31, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x22, 0xa8, 0x0d, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x31,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x31,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x79, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x79, 0x64, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x74, 0x6f, 0x64, 0x61, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x43,
	0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x6f, 0x6e, 0x67, 0x46, 0x72,
	0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x72,
	0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x6f, 0x6e, 0x67, 0x5f,
	0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x6c, 0x6f, 0x6e, 0x67, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x66,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x72, 0x65, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x75, 0x73, 0x65, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x6d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x66,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x61, 0x73, 0x68, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x72, 0x6f,
	0x7a, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x69,
	0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x63, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x30, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x70,
	0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f,
	0x6d, 0x62, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x62, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x62, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x6f,
	0x7a, 0x65, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x62, 0x4c,
	0x6f, 0x6e, 0x67, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6d,
	0x62, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x62, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x46,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x11, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x42, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x72,
	0x69, 0x6b, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x30,
	0x0a, 0x14, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x73, 0x74,
	0x72, 0x69, 0x6b, 0x65, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f,
	0x6e, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x79, 0x64, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6b, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x79, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x46, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x12, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x42, 0x0c, 0x5a, 0x0a, 0x2f, 0x6f, 0x75, 0x74, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_account_proto_rawDescOnce sync.Once
	file_account_proto_rawDescData = file_account_proto_rawDesc
)

func file_account_proto_rawDescGZIP() []byte {
	file_account_proto_rawDescOnce.Do(func() {
		file_account_proto_rawDescData = protoimpl.X.CompressGZIP(file_account_proto_rawDescData)
	})
	return file_account_proto_rawDescData
}

var file_account_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_account_proto_goTypes = []interface{}{
	(*AccountInfo)(nil), // 0: AccountInfo
	(*Position)(nil),    // 1: Position
}
var file_account_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_account_proto_init() }
func file_account_proto_init() {
	if File_account_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_account_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_account_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_account_proto_goTypes,
		DependencyIndexes: file_account_proto_depIdxs,
		MessageInfos:      file_account_proto_msgTypes,
	}.Build()
	File_account_proto = out.File
	file_account_proto_rawDesc = nil
	file_account_proto_goTypes = nil
	file_account_proto_depIdxs = nil
}
