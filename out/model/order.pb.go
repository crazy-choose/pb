// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: order.proto

package model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 订单信息 && 报单响应
type OrderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerId             string  `protobuf:"bytes,1,opt,name=broker_id,json=brokerId,proto3" json:"broker_id,omitempty"`       // 经纪公司代码
	InvestorId           string  `protobuf:"bytes,2,opt,name=investor_id,json=investorId,proto3" json:"investor_id,omitempty"` // 投资者代码
	Reserve_1            string  `protobuf:"bytes,3,opt,name=reserve_1,json=reserve1,proto3" json:"reserve_1,omitempty"`       // 保留的无效字段
	OrderRef             string  `protobuf:"bytes,4,opt,name=order_ref,json=orderRef,proto3" json:"order_ref,omitempty"`
	UserId               string  `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                 // 用户代码
	OrderPriceType       string  `protobuf:"bytes,6,opt,name=order_price_type,json=orderPriceType,proto3" json:"order_price_type,omitempty"`                       // 报单价格条件
	Direction            string  `protobuf:"bytes,7,opt,name=direction,proto3" json:"direction,omitempty"`                                                         // 买卖方向
	CombOffsetFlag       string  `protobuf:"bytes,8,opt,name=comb_offset_flag,json=combOffsetFlag,proto3" json:"comb_offset_flag,omitempty"`                       // 组合开平标志
	CombHedgeFlag        string  `protobuf:"bytes,9,opt,name=comb_hedge_flag,json=combHedgeFlag,proto3" json:"comb_hedge_flag,omitempty"`                          // 组合投机套保标志
	LimitPrice           float64 `protobuf:"fixed64,10,opt,name=limit_price,json=limitPrice,proto3" json:"limit_price,omitempty"`                                  // 价格
	VolumeTotalOriginal  int32   `protobuf:"varint,11,opt,name=volume_total_original,json=volumeTotalOriginal,proto3" json:"volume_total_original,omitempty"`      // 数量
	TimeCondition        string  `protobuf:"bytes,12,opt,name=time_condition,json=timeCondition,proto3" json:"time_condition,omitempty"`                           // 有效期类型
	GtdDate              string  `protobuf:"bytes,13,opt,name=gtd_date,json=gtdDate,proto3" json:"gtd_date,omitempty"`                                             // GTD日期
	VolumeCondition      string  `protobuf:"bytes,14,opt,name=volume_condition,json=volumeCondition,proto3" json:"volume_condition,omitempty"`                     // 成交量类型
	MinVolume            int32   `protobuf:"varint,15,opt,name=min_volume,json=minVolume,proto3" json:"min_volume,omitempty"`                                      // 最小成交量
	ContingentCondition  string  `protobuf:"bytes,16,opt,name=contingent_condition,json=contingentCondition,proto3" json:"contingent_condition,omitempty"`         // 触发条件
	StopPrice            float64 `protobuf:"fixed64,17,opt,name=stop_price,json=stopPrice,proto3" json:"stop_price,omitempty"`                                     // 止损价
	ForceCloseReason     string  `protobuf:"bytes,18,opt,name=force_close_reason,json=forceCloseReason,proto3" json:"force_close_reason,omitempty"`                // 强平原因
	IsAutoSuspend        int32   `protobuf:"varint,19,opt,name=is_auto_suspend,json=isAutoSuspend,proto3" json:"is_auto_suspend,omitempty"`                        // 自动挂起标志
	BusinessUnit         string  `protobuf:"bytes,20,opt,name=business_unit,json=businessUnit,proto3" json:"business_unit,omitempty"`                              // 业务单元
	RequestId            int32   `protobuf:"varint,21,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`                                      // 请求编号
	OrderLocalId         string  `protobuf:"bytes,22,opt,name=order_local_id,json=orderLocalId,proto3" json:"order_local_id,omitempty"`                            // 本地报单编号
	ExchangeId           string  `protobuf:"bytes,23,opt,name=exchange_id,json=exchangeId,proto3" json:"exchange_id,omitempty"`                                    // 交易所代码
	ParticipantId        string  `protobuf:"bytes,24,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`                           // 会员代码
	ClientId             string  `protobuf:"bytes,25,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`                                          // 客户代码
	Reserve_2            string  `protobuf:"bytes,26,opt,name=reserve_2,json=reserve2,proto3" json:"reserve_2,omitempty"`                                          // 保留的无效字段
	TraderId             string  `protobuf:"bytes,27,opt,name=trader_id,json=traderId,proto3" json:"trader_id,omitempty"`                                          // 交易所交易员代码
	InstallId            int32   `protobuf:"varint,28,opt,name=install_id,json=installId,proto3" json:"install_id,omitempty"`                                      // 安装编号
	OrderSubmitStatus    string  `protobuf:"bytes,29,opt,name=order_submit_status,json=orderSubmitStatus,proto3" json:"order_submit_status,omitempty"`             // 报单提交状态
	NotifySequence       int32   `protobuf:"varint,30,opt,name=notify_sequence,json=notifySequence,proto3" json:"notify_sequence,omitempty"`                       // 报单提示序号
	TradingDay           string  `protobuf:"bytes,31,opt,name=trading_day,json=tradingDay,proto3" json:"trading_day,omitempty"`                                    // 交易日
	SettlementId         int32   `protobuf:"varint,32,opt,name=settlement_id,json=settlementId,proto3" json:"settlement_id,omitempty"`                             // 结算编号
	OrderSysId           string  `protobuf:"bytes,33,opt,name=order_sys_id,json=orderSysId,proto3" json:"order_sys_id,omitempty"`                                  // 报单编号
	OrderSource          string  `protobuf:"bytes,34,opt,name=order_source,json=orderSource,proto3" json:"order_source,omitempty"`                                 // 报单来源
	OrderStatus          string  `protobuf:"bytes,35,opt,name=order_status,json=orderStatus,proto3" json:"order_status,omitempty"`                                 // 报单状态
	OrderType            string  `protobuf:"bytes,36,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`                                       // 报单类型
	VolumeTraded         int32   `protobuf:"varint,37,opt,name=volume_traded,json=volumeTraded,proto3" json:"volume_traded,omitempty"`                             // 今成交数量
	VolumeTotal          int32   `protobuf:"varint,38,opt,name=volume_total,json=volumeTotal,proto3" json:"volume_total,omitempty"`                                // 剩余数量
	InsertDate           string  `protobuf:"bytes,39,opt,name=insert_date,json=insertDate,proto3" json:"insert_date,omitempty"`                                    // 报单日期
	InsertTime           string  `protobuf:"bytes,40,opt,name=insert_time,json=insertTime,proto3" json:"insert_time,omitempty"`                                    // 委托时间
	ActiveTime           string  `protobuf:"bytes,41,opt,name=active_time,json=activeTime,proto3" json:"active_time,omitempty"`                                    // 激活时间
	SuspendTime          string  `protobuf:"bytes,42,opt,name=suspend_time,json=suspendTime,proto3" json:"suspend_time,omitempty"`                                 // 挂起时间
	UpdateTime           string  `protobuf:"bytes,43,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                                    // 最后修改时间
	CancelTime           string  `protobuf:"bytes,44,opt,name=cancel_time,json=cancelTime,proto3" json:"cancel_time,omitempty"`                                    // 撤销时间
	ActiveTraderId       string  `protobuf:"bytes,45,opt,name=active_trader_id,json=activeTraderId,proto3" json:"active_trader_id,omitempty"`                      // 最后修改交易所交易员代码
	ClearingPartId       string  `protobuf:"bytes,46,opt,name=clearing_part_id,json=clearingPartId,proto3" json:"clearing_part_id,omitempty"`                      // 结算会员编号
	SequenceNo           int32   `protobuf:"varint,47,opt,name=sequence_no,json=sequenceNo,proto3" json:"sequence_no,omitempty"`                                   // 序号
	FrontId              int32   `protobuf:"varint,48,opt,name=front_id,json=frontId,proto3" json:"front_id,omitempty"`                                            // 前置编号
	SessionId            int32   `protobuf:"varint,49,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`                                      // 会话编号
	UserProductInfo      string  `protobuf:"bytes,50,opt,name=user_product_info,json=userProductInfo,proto3" json:"user_product_info,omitempty"`                   // 用户端产品信息
	StatusMsg            string  `protobuf:"bytes,51,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`                                       // 状态信息
	UserForceClose       int32   `protobuf:"varint,52,opt,name=user_force_close,json=userForceClose,proto3" json:"user_force_close,omitempty"`                     // 用户强评标志
	ActiveUserId         string  `protobuf:"bytes,53,opt,name=active_user_id,json=activeUserId,proto3" json:"active_user_id,omitempty"`                            // 操作用户代码
	BrokerOrderSeq       int32   `protobuf:"varint,54,opt,name=broker_order_seq,json=brokerOrderSeq,proto3" json:"broker_order_seq,omitempty"`                     // 经纪公司报单编号
	RelativeOrderSysId   string  `protobuf:"bytes,55,opt,name=relative_order_sys_id,json=relativeOrderSysId,proto3" json:"relative_order_sys_id,omitempty"`        // 相关报单
	ZceTotalTradedVolume int32   `protobuf:"varint,56,opt,name=zce_total_traded_volume,json=zceTotalTradedVolume,proto3" json:"zce_total_traded_volume,omitempty"` // 郑商所成交数量
	IsSwapOrder          int32   `protobuf:"varint,57,opt,name=is_swap_order,json=isSwapOrder,proto3" json:"is_swap_order,omitempty"`                              // 互换单标志
	BranchId             string  `protobuf:"bytes,58,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`                                          // 营业部编号
	InvestUnitId         string  `protobuf:"bytes,59,opt,name=invest_unit_id,json=investUnitId,proto3" json:"invest_unit_id,omitempty"`                            // 投资单元代码
	AccountId            string  `protobuf:"bytes,60,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                       // 资金账号
	CurrencyId           string  `protobuf:"bytes,61,opt,name=currency_id,json=currencyId,proto3" json:"currency_id,omitempty"`                                    // 币种代码
	Reserve_3            string  `protobuf:"bytes,62,opt,name=reserve_3,json=reserve3,proto3" json:"reserve_3,omitempty"`                                          // 保留的无效字段
	MacAddress           string  `protobuf:"bytes,63,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`                                    // Mac地址
	InstrumentId         string  `protobuf:"bytes,64,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"`                              // 合约代码
	ExchangeInstId       string  `protobuf:"bytes,65,opt,name=exchange_inst_id,json=exchangeInstId,proto3" json:"exchange_inst_id,omitempty"`                      // 合约在交易所的代码
	IpAddress            string  `protobuf:"bytes,66,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`                                       // IP地址
	DirectionZn          string  `protobuf:"bytes,67,opt,name=direction_zn,json=directionZn,proto3" json:"direction_zn,omitempty"`                                 // 买卖方向(转)
	OrderStatusZn        string  `protobuf:"bytes,68,opt,name=order_status_zn,json=orderStatusZn,proto3" json:"order_status_zn,omitempty"`
	StatusMsgZn          string  `protobuf:"bytes,69,opt,name=status_msg_zn,json=statusMsgZn,proto3" json:"status_msg_zn,omitempty"`
	CombOffsetFlagZn     string  `protobuf:"bytes,70,opt,name=comb_offset_flag_zn,json=combOffsetFlagZn,proto3" json:"comb_offset_flag_zn,omitempty"`
}

func (x *OrderInfo) Reset() {
	*x = OrderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderInfo) ProtoMessage() {}

func (x *OrderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderInfo.ProtoReflect.Descriptor instead.
func (*OrderInfo) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{0}
}

func (x *OrderInfo) GetBrokerId() string {
	if x != nil {
		return x.BrokerId
	}
	return ""
}

func (x *OrderInfo) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *OrderInfo) GetReserve_1() string {
	if x != nil {
		return x.Reserve_1
	}
	return ""
}

func (x *OrderInfo) GetOrderRef() string {
	if x != nil {
		return x.OrderRef
	}
	return ""
}

func (x *OrderInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *OrderInfo) GetOrderPriceType() string {
	if x != nil {
		return x.OrderPriceType
	}
	return ""
}

func (x *OrderInfo) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *OrderInfo) GetCombOffsetFlag() string {
	if x != nil {
		return x.CombOffsetFlag
	}
	return ""
}

func (x *OrderInfo) GetCombHedgeFlag() string {
	if x != nil {
		return x.CombHedgeFlag
	}
	return ""
}

func (x *OrderInfo) GetLimitPrice() float64 {
	if x != nil {
		return x.LimitPrice
	}
	return 0
}

func (x *OrderInfo) GetVolumeTotalOriginal() int32 {
	if x != nil {
		return x.VolumeTotalOriginal
	}
	return 0
}

func (x *OrderInfo) GetTimeCondition() string {
	if x != nil {
		return x.TimeCondition
	}
	return ""
}

func (x *OrderInfo) GetGtdDate() string {
	if x != nil {
		return x.GtdDate
	}
	return ""
}

func (x *OrderInfo) GetVolumeCondition() string {
	if x != nil {
		return x.VolumeCondition
	}
	return ""
}

func (x *OrderInfo) GetMinVolume() int32 {
	if x != nil {
		return x.MinVolume
	}
	return 0
}

func (x *OrderInfo) GetContingentCondition() string {
	if x != nil {
		return x.ContingentCondition
	}
	return ""
}

func (x *OrderInfo) GetStopPrice() float64 {
	if x != nil {
		return x.StopPrice
	}
	return 0
}

func (x *OrderInfo) GetForceCloseReason() string {
	if x != nil {
		return x.ForceCloseReason
	}
	return ""
}

func (x *OrderInfo) GetIsAutoSuspend() int32 {
	if x != nil {
		return x.IsAutoSuspend
	}
	return 0
}

func (x *OrderInfo) GetBusinessUnit() string {
	if x != nil {
		return x.BusinessUnit
	}
	return ""
}

func (x *OrderInfo) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *OrderInfo) GetOrderLocalId() string {
	if x != nil {
		return x.OrderLocalId
	}
	return ""
}

func (x *OrderInfo) GetExchangeId() string {
	if x != nil {
		return x.ExchangeId
	}
	return ""
}

func (x *OrderInfo) GetParticipantId() string {
	if x != nil {
		return x.ParticipantId
	}
	return ""
}

func (x *OrderInfo) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *OrderInfo) GetReserve_2() string {
	if x != nil {
		return x.Reserve_2
	}
	return ""
}

func (x *OrderInfo) GetTraderId() string {
	if x != nil {
		return x.TraderId
	}
	return ""
}

func (x *OrderInfo) GetInstallId() int32 {
	if x != nil {
		return x.InstallId
	}
	return 0
}

func (x *OrderInfo) GetOrderSubmitStatus() string {
	if x != nil {
		return x.OrderSubmitStatus
	}
	return ""
}

func (x *OrderInfo) GetNotifySequence() int32 {
	if x != nil {
		return x.NotifySequence
	}
	return 0
}

func (x *OrderInfo) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *OrderInfo) GetSettlementId() int32 {
	if x != nil {
		return x.SettlementId
	}
	return 0
}

func (x *OrderInfo) GetOrderSysId() string {
	if x != nil {
		return x.OrderSysId
	}
	return ""
}

func (x *OrderInfo) GetOrderSource() string {
	if x != nil {
		return x.OrderSource
	}
	return ""
}

func (x *OrderInfo) GetOrderStatus() string {
	if x != nil {
		return x.OrderStatus
	}
	return ""
}

func (x *OrderInfo) GetOrderType() string {
	if x != nil {
		return x.OrderType
	}
	return ""
}

func (x *OrderInfo) GetVolumeTraded() int32 {
	if x != nil {
		return x.VolumeTraded
	}
	return 0
}

func (x *OrderInfo) GetVolumeTotal() int32 {
	if x != nil {
		return x.VolumeTotal
	}
	return 0
}

func (x *OrderInfo) GetInsertDate() string {
	if x != nil {
		return x.InsertDate
	}
	return ""
}

func (x *OrderInfo) GetInsertTime() string {
	if x != nil {
		return x.InsertTime
	}
	return ""
}

func (x *OrderInfo) GetActiveTime() string {
	if x != nil {
		return x.ActiveTime
	}
	return ""
}

func (x *OrderInfo) GetSuspendTime() string {
	if x != nil {
		return x.SuspendTime
	}
	return ""
}

func (x *OrderInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *OrderInfo) GetCancelTime() string {
	if x != nil {
		return x.CancelTime
	}
	return ""
}

func (x *OrderInfo) GetActiveTraderId() string {
	if x != nil {
		return x.ActiveTraderId
	}
	return ""
}

func (x *OrderInfo) GetClearingPartId() string {
	if x != nil {
		return x.ClearingPartId
	}
	return ""
}

func (x *OrderInfo) GetSequenceNo() int32 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *OrderInfo) GetFrontId() int32 {
	if x != nil {
		return x.FrontId
	}
	return 0
}

func (x *OrderInfo) GetSessionId() int32 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *OrderInfo) GetUserProductInfo() string {
	if x != nil {
		return x.UserProductInfo
	}
	return ""
}

func (x *OrderInfo) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *OrderInfo) GetUserForceClose() int32 {
	if x != nil {
		return x.UserForceClose
	}
	return 0
}

func (x *OrderInfo) GetActiveUserId() string {
	if x != nil {
		return x.ActiveUserId
	}
	return ""
}

func (x *OrderInfo) GetBrokerOrderSeq() int32 {
	if x != nil {
		return x.BrokerOrderSeq
	}
	return 0
}

func (x *OrderInfo) GetRelativeOrderSysId() string {
	if x != nil {
		return x.RelativeOrderSysId
	}
	return ""
}

func (x *OrderInfo) GetZceTotalTradedVolume() int32 {
	if x != nil {
		return x.ZceTotalTradedVolume
	}
	return 0
}

func (x *OrderInfo) GetIsSwapOrder() int32 {
	if x != nil {
		return x.IsSwapOrder
	}
	return 0
}

func (x *OrderInfo) GetBranchId() string {
	if x != nil {
		return x.BranchId
	}
	return ""
}

func (x *OrderInfo) GetInvestUnitId() string {
	if x != nil {
		return x.InvestUnitId
	}
	return ""
}

func (x *OrderInfo) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *OrderInfo) GetCurrencyId() string {
	if x != nil {
		return x.CurrencyId
	}
	return ""
}

func (x *OrderInfo) GetReserve_3() string {
	if x != nil {
		return x.Reserve_3
	}
	return ""
}

func (x *OrderInfo) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *OrderInfo) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

func (x *OrderInfo) GetExchangeInstId() string {
	if x != nil {
		return x.ExchangeInstId
	}
	return ""
}

func (x *OrderInfo) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *OrderInfo) GetDirectionZn() string {
	if x != nil {
		return x.DirectionZn
	}
	return ""
}

func (x *OrderInfo) GetOrderStatusZn() string {
	if x != nil {
		return x.OrderStatusZn
	}
	return ""
}

func (x *OrderInfo) GetStatusMsgZn() string {
	if x != nil {
		return x.StatusMsgZn
	}
	return ""
}

func (x *OrderInfo) GetCombOffsetFlagZn() string {
	if x != nil {
		return x.CombOffsetFlagZn
	}
	return ""
}

// 报单操作(如：撤单)
type OrderActionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerId          string  `protobuf:"bytes,1,opt,name=broker_id,json=brokerId,proto3" json:"broker_id,omitempty"`                               // 经纪公司代码
	InvestorId        string  `protobuf:"bytes,2,opt,name=investor_id,json=investorId,proto3" json:"investor_id,omitempty"`                         // 投资者代码
	OrderActionRef    int32   `protobuf:"varint,3,opt,name=order_action_ref,json=orderActionRef,proto3" json:"order_action_ref,omitempty"`          // 报单操作引用
	OrderRef          string  `protobuf:"bytes,4,opt,name=order_ref,json=orderRef,proto3" json:"order_ref,omitempty"`                               // 报单引用
	RequestId         int32   `protobuf:"varint,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`                           // 请求编号
	FrontId           int32   `protobuf:"varint,6,opt,name=front_id,json=frontId,proto3" json:"front_id,omitempty"`                                 // 前置编号
	SessionId         int32   `protobuf:"varint,7,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`                           // 会话编号
	ExchangeId        string  `protobuf:"bytes,8,opt,name=exchange_id,json=exchangeId,proto3" json:"exchange_id,omitempty"`                         // 交易所代码
	OrderSysId        string  `protobuf:"bytes,9,opt,name=order_sys_id,json=orderSysId,proto3" json:"order_sys_id,omitempty"`                       // 报单编号
	ActionFlag        string  `protobuf:"bytes,10,opt,name=action_flag,json=actionFlag,proto3" json:"action_flag,omitempty"`                        // 操作标志
	LimitPrice        float64 `protobuf:"fixed64,11,opt,name=limit_price,json=limitPrice,proto3" json:"limit_price,omitempty"`                      // 价格
	VolumeChange      int32   `protobuf:"varint,12,opt,name=volume_change,json=volumeChange,proto3" json:"volume_change,omitempty"`                 // 数量变化
	ActionDate        string  `protobuf:"bytes,13,opt,name=action_date,json=actionDate,proto3" json:"action_date,omitempty"`                        // 操作日期
	ActionTime        string  `protobuf:"bytes,14,opt,name=action_time,json=actionTime,proto3" json:"action_time,omitempty"`                        // 操作时间
	TraderId          string  `protobuf:"bytes,15,opt,name=trader_id,json=traderId,proto3" json:"trader_id,omitempty"`                              // 交易所交易员代码
	InstallId         int32   `protobuf:"varint,16,opt,name=install_id,json=installId,proto3" json:"install_id,omitempty"`                          // 安装编号
	OrderLocalId      string  `protobuf:"bytes,17,opt,name=order_local_id,json=orderLocalId,proto3" json:"order_local_id,omitempty"`                // 本地报单编号
	ActionLocalId     string  `protobuf:"bytes,18,opt,name=action_local_id,json=actionLocalId,proto3" json:"action_local_id,omitempty"`             // 操作本地编号
	ParticipantId     string  `protobuf:"bytes,19,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`               // 会员代码
	ClientId          string  `protobuf:"bytes,20,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`                              // 客户代码
	BusinessUnit      string  `protobuf:"bytes,21,opt,name=business_unit,json=businessUnit,proto3" json:"business_unit,omitempty"`                  // 业务单元
	OrderActionStatus string  `protobuf:"bytes,22,opt,name=order_action_status,json=orderActionStatus,proto3" json:"order_action_status,omitempty"` // 报单操作状态
	UserId            string  `protobuf:"bytes,23,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                    // 用户代码
	StatusMsg         string  `protobuf:"bytes,24,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`                           // 状态信息
	Reserve_1         string  `protobuf:"bytes,25,opt,name=reserve_1,json=reserve1,proto3" json:"reserve_1,omitempty"`                              // 保留的无效字段
	BranchId          string  `protobuf:"bytes,26,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`                              // 营业部编号
	InvestUnitId      string  `protobuf:"bytes,27,opt,name=invest_unit_id,json=investUnitId,proto3" json:"invest_unit_id,omitempty"`                // 投资单元代码
	Reserve_2         string  `protobuf:"bytes,28,opt,name=reserve_2,json=reserve2,proto3" json:"reserve_2,omitempty"`                              // 保留的无效字段
	MacAddress        string  `protobuf:"bytes,29,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`                        // Mac地址
	InstrumentId      string  `protobuf:"bytes,30,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"`                  // 合约代码
	IpAddress         string  `protobuf:"bytes,31,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`                           // IP地址
	DirectionZn       string  `protobuf:"bytes,32,opt,name=direction_zn,json=directionZn,proto3" json:"direction_zn,omitempty"`                     // 买卖方向(转)
	OrderStatusZn     string  `protobuf:"bytes,33,opt,name=order_status_zn,json=orderStatusZn,proto3" json:"order_status_zn,omitempty"`
	CombOffsetFlagZn  string  `protobuf:"bytes,34,opt,name=comb_offset_flag_zn,json=combOffsetFlagZn,proto3" json:"comb_offset_flag_zn,omitempty"`
}

func (x *OrderActionInfo) Reset() {
	*x = OrderActionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderActionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderActionInfo) ProtoMessage() {}

func (x *OrderActionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderActionInfo.ProtoReflect.Descriptor instead.
func (*OrderActionInfo) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{1}
}

func (x *OrderActionInfo) GetBrokerId() string {
	if x != nil {
		return x.BrokerId
	}
	return ""
}

func (x *OrderActionInfo) GetInvestorId() string {
	if x != nil {
		return x.InvestorId
	}
	return ""
}

func (x *OrderActionInfo) GetOrderActionRef() int32 {
	if x != nil {
		return x.OrderActionRef
	}
	return 0
}

func (x *OrderActionInfo) GetOrderRef() string {
	if x != nil {
		return x.OrderRef
	}
	return ""
}

func (x *OrderActionInfo) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *OrderActionInfo) GetFrontId() int32 {
	if x != nil {
		return x.FrontId
	}
	return 0
}

func (x *OrderActionInfo) GetSessionId() int32 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *OrderActionInfo) GetExchangeId() string {
	if x != nil {
		return x.ExchangeId
	}
	return ""
}

func (x *OrderActionInfo) GetOrderSysId() string {
	if x != nil {
		return x.OrderSysId
	}
	return ""
}

func (x *OrderActionInfo) GetActionFlag() string {
	if x != nil {
		return x.ActionFlag
	}
	return ""
}

func (x *OrderActionInfo) GetLimitPrice() float64 {
	if x != nil {
		return x.LimitPrice
	}
	return 0
}

func (x *OrderActionInfo) GetVolumeChange() int32 {
	if x != nil {
		return x.VolumeChange
	}
	return 0
}

func (x *OrderActionInfo) GetActionDate() string {
	if x != nil {
		return x.ActionDate
	}
	return ""
}

func (x *OrderActionInfo) GetActionTime() string {
	if x != nil {
		return x.ActionTime
	}
	return ""
}

func (x *OrderActionInfo) GetTraderId() string {
	if x != nil {
		return x.TraderId
	}
	return ""
}

func (x *OrderActionInfo) GetInstallId() int32 {
	if x != nil {
		return x.InstallId
	}
	return 0
}

func (x *OrderActionInfo) GetOrderLocalId() string {
	if x != nil {
		return x.OrderLocalId
	}
	return ""
}

func (x *OrderActionInfo) GetActionLocalId() string {
	if x != nil {
		return x.ActionLocalId
	}
	return ""
}

func (x *OrderActionInfo) GetParticipantId() string {
	if x != nil {
		return x.ParticipantId
	}
	return ""
}

func (x *OrderActionInfo) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *OrderActionInfo) GetBusinessUnit() string {
	if x != nil {
		return x.BusinessUnit
	}
	return ""
}

func (x *OrderActionInfo) GetOrderActionStatus() string {
	if x != nil {
		return x.OrderActionStatus
	}
	return ""
}

func (x *OrderActionInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *OrderActionInfo) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *OrderActionInfo) GetReserve_1() string {
	if x != nil {
		return x.Reserve_1
	}
	return ""
}

func (x *OrderActionInfo) GetBranchId() string {
	if x != nil {
		return x.BranchId
	}
	return ""
}

func (x *OrderActionInfo) GetInvestUnitId() string {
	if x != nil {
		return x.InvestUnitId
	}
	return ""
}

func (x *OrderActionInfo) GetReserve_2() string {
	if x != nil {
		return x.Reserve_2
	}
	return ""
}

func (x *OrderActionInfo) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *OrderActionInfo) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

func (x *OrderActionInfo) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *OrderActionInfo) GetDirectionZn() string {
	if x != nil {
		return x.DirectionZn
	}
	return ""
}

func (x *OrderActionInfo) GetOrderStatusZn() string {
	if x != nil {
		return x.OrderStatusZn
	}
	return ""
}

func (x *OrderActionInfo) GetCombOffsetFlagZn() string {
	if x != nil {
		return x.CombOffsetFlagZn
	}
	return ""
}

var File_order_proto protoreflect.FileDescriptor

var file_order_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xec, 0x13,
	0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x31, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x62, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6d, 0x62, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x26,
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x62, 0x5f, 0x68, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x62, 0x48, 0x65, 0x64,
	0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x74, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x74, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x69,
	0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x6f, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x61, 0x75,
	0x74, 0x6f, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x32, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x79, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x64, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x73, 0x70,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x6f,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x4e, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x31, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x36, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65,
	0x71, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x79, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x79, 0x73, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x7a, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x38, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x7a, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x3a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x3b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x33, 0x18,
	0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x33, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x3f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x42, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x6e, 0x18, 0x43,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5a,
	0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x7a, 0x6e, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x7a, 0x6e, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x5a, 0x6e, 0x12, 0x2d, 0x0a,
	0x13, 0x63, 0x6f, 0x6d, 0x62, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x5f, 0x7a, 0x6e, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x62,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x5a, 0x6e, 0x22, 0x92, 0x09, 0x0a,
	0x0f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x79, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2e, 0x0a,
	0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x5f, 0x31, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x31, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x5f, 0x32, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x7a, 0x6e, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5a, 0x6e, 0x12, 0x2d, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x62, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x7a, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x63, 0x6f, 0x6d, 0x62, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x5a,
	0x6e, 0x42, 0x0c, 0x5a, 0x0a, 0x2f, 0x6f, 0x75, 0x74, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_order_proto_rawDescOnce sync.Once
	file_order_proto_rawDescData = file_order_proto_rawDesc
)

func file_order_proto_rawDescGZIP() []byte {
	file_order_proto_rawDescOnce.Do(func() {
		file_order_proto_rawDescData = protoimpl.X.CompressGZIP(file_order_proto_rawDescData)
	})
	return file_order_proto_rawDescData
}

var file_order_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_order_proto_goTypes = []interface{}{
	(*OrderInfo)(nil),       // 0: OrderInfo
	(*OrderActionInfo)(nil), // 1: OrderActionInfo
}
var file_order_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_order_proto_init() }
func file_order_proto_init() {
	if File_order_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_order_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderActionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_order_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_order_proto_goTypes,
		DependencyIndexes: file_order_proto_depIdxs,
		MessageInfos:      file_order_proto_msgTypes,
	}.Build()
	File_order_proto = out.File
	file_order_proto_rawDesc = nil
	file_order_proto_goTypes = nil
	file_order_proto_depIdxs = nil
}
