// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: msg.proto

package model

import (
	any "github.com/golang/protobuf/ptypes/any"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MsgType int32

const (
	MsgType_UNIVERSAL                  MsgType = 0
	MsgType_ReqQryInstrument           MsgType = 1
	MsgType_OnRspQryInstrument         MsgType = 2
	MsgType_OnRtnInstrumentStatus      MsgType = 3
	MsgType_ReqQryTradingAccount       MsgType = 4
	MsgType_OnRspQryTradingAccount     MsgType = 5
	MsgType_ReqQryInvestorPosition     MsgType = 6
	MsgType_OnRspQryInvestorPosition   MsgType = 7
	MsgType_ReqQryOrder                MsgType = 8
	MsgType_OnRspQryOrder              MsgType = 9
	MsgType_OnRtnOrder                 MsgType = 10
	MsgType_OnRtnTrade                 MsgType = 11
	MsgType_ReqOrderInsert             MsgType = 12 //开仓、 平仓
	MsgType_OnRspOrderInsert           MsgType = 13 //报单结果通知
	MsgType_ReqOrderAction             MsgType = 14 //撤单
	MsgType_OnRspOrderAction           MsgType = 15
	MsgType_OnErrRtnOrderAction        MsgType = 16
	MsgType_OnRspError                 MsgType = 17
	MsgType_SubscribeMarketData        MsgType = 18
	MsgType_OnRspSubMarketData         MsgType = 19
	MsgType_UnSubscribeMarketData      MsgType = 20
	MsgType_OnRspUnSubMarketData       MsgType = 21
	MsgType_OnRtnDepthMarketData       MsgType = 22
	MsgType_OnFrontConnected           MsgType = 23
	MsgType_OnFrontDisconnected        MsgType = 24
	MsgType_ReqAuthenticate            MsgType = 25
	MsgType_OnRspAuth                  MsgType = 26
	MsgType_ReqUserLogin               MsgType = 27
	MsgType_OnRspUserLogin             MsgType = 28
	MsgType_ReqSettlementInfoConfirm   MsgType = 29
	MsgType_OnRspSettlementInfoConfirm MsgType = 30
)

// Enum value maps for MsgType.
var (
	MsgType_name = map[int32]string{
		0:  "UNIVERSAL",
		1:  "ReqQryInstrument",
		2:  "OnRspQryInstrument",
		3:  "OnRtnInstrumentStatus",
		4:  "ReqQryTradingAccount",
		5:  "OnRspQryTradingAccount",
		6:  "ReqQryInvestorPosition",
		7:  "OnRspQryInvestorPosition",
		8:  "ReqQryOrder",
		9:  "OnRspQryOrder",
		10: "OnRtnOrder",
		11: "OnRtnTrade",
		12: "ReqOrderInsert",
		13: "OnRspOrderInsert",
		14: "ReqOrderAction",
		15: "OnRspOrderAction",
		16: "OnErrRtnOrderAction",
		17: "OnRspError",
		18: "SubscribeMarketData",
		19: "OnRspSubMarketData",
		20: "UnSubscribeMarketData",
		21: "OnRspUnSubMarketData",
		22: "OnRtnDepthMarketData",
		23: "OnFrontConnected",
		24: "OnFrontDisconnected",
		25: "ReqAuthenticate",
		26: "OnRspAuth",
		27: "ReqUserLogin",
		28: "OnRspUserLogin",
		29: "ReqSettlementInfoConfirm",
		30: "OnRspSettlementInfoConfirm",
	}
	MsgType_value = map[string]int32{
		"UNIVERSAL":                  0,
		"ReqQryInstrument":           1,
		"OnRspQryInstrument":         2,
		"OnRtnInstrumentStatus":      3,
		"ReqQryTradingAccount":       4,
		"OnRspQryTradingAccount":     5,
		"ReqQryInvestorPosition":     6,
		"OnRspQryInvestorPosition":   7,
		"ReqQryOrder":                8,
		"OnRspQryOrder":              9,
		"OnRtnOrder":                 10,
		"OnRtnTrade":                 11,
		"ReqOrderInsert":             12,
		"OnRspOrderInsert":           13,
		"ReqOrderAction":             14,
		"OnRspOrderAction":           15,
		"OnErrRtnOrderAction":        16,
		"OnRspError":                 17,
		"SubscribeMarketData":        18,
		"OnRspSubMarketData":         19,
		"UnSubscribeMarketData":      20,
		"OnRspUnSubMarketData":       21,
		"OnRtnDepthMarketData":       22,
		"OnFrontConnected":           23,
		"OnFrontDisconnected":        24,
		"ReqAuthenticate":            25,
		"OnRspAuth":                  26,
		"ReqUserLogin":               27,
		"OnRspUserLogin":             28,
		"ReqSettlementInfoConfirm":   29,
		"OnRspSettlementInfoConfirm": 30,
	}
)

func (x MsgType) Enum() *MsgType {
	p := new(MsgType)
	*p = x
	return p
}

func (x MsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_msg_proto_enumTypes[0].Descriptor()
}

func (MsgType) Type() protoreflect.EnumType {
	return &file_msg_proto_enumTypes[0]
}

func (x MsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MsgType.Descriptor instead.
func (MsgType) EnumDescriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{0}
}

// 响应信息
type RspInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorId  int32  `protobuf:"varint,1,opt,name=error_id,json=errorId,proto3" json:"error_id,omitempty"`   // 错误代码
	ErrorMsg string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"` // 错误信息
}

func (x *RspInfo) Reset() {
	*x = RspInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspInfo) ProtoMessage() {}

func (x *RspInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspInfo.ProtoReflect.Descriptor instead.
func (*RspInfo) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{0}
}

func (x *RspInfo) GetErrorId() int32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspInfo) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type StreamReqData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      MsgType  `protobuf:"varint,1,opt,name=type,proto3,enum=MsgType" json:"type,omitempty"`
	RequestId int32    `protobuf:"varint,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Req       *any.Any `protobuf:"bytes,3,opt,name=req,proto3" json:"req,omitempty"`
}

func (x *StreamReqData) Reset() {
	*x = StreamReqData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamReqData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamReqData) ProtoMessage() {}

func (x *StreamReqData) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamReqData.ProtoReflect.Descriptor instead.
func (*StreamReqData) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{1}
}

func (x *StreamReqData) GetType() MsgType {
	if x != nil {
		return x.Type
	}
	return MsgType_UNIVERSAL
}

func (x *StreamReqData) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *StreamReqData) GetReq() *any.Any {
	if x != nil {
		return x.Req
	}
	return nil
}

type StreamResData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      MsgType  `protobuf:"varint,1,opt,name=type,proto3,enum=MsgType" json:"type,omitempty"`
	Filed     *any.Any `protobuf:"bytes,2,opt,name=filed,proto3" json:"filed,omitempty"`
	RspInfo   *RspInfo `protobuf:"bytes,3,opt,name=rspInfo,proto3" json:"rspInfo,omitempty"`
	RequestId int32    `protobuf:"varint,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	IsLast    bool     `protobuf:"varint,5,opt,name=isLast,proto3" json:"isLast,omitempty"`
}

func (x *StreamResData) Reset() {
	*x = StreamResData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamResData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamResData) ProtoMessage() {}

func (x *StreamResData) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamResData.ProtoReflect.Descriptor instead.
func (*StreamResData) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{2}
}

func (x *StreamResData) GetType() MsgType {
	if x != nil {
		return x.Type
	}
	return MsgType_UNIVERSAL
}

func (x *StreamResData) GetFiled() *any.Any {
	if x != nil {
		return x.Filed
	}
	return nil
}

func (x *StreamResData) GetRspInfo() *RspInfo {
	if x != nil {
		return x.RspInfo
	}
	return nil
}

func (x *StreamResData) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *StreamResData) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

var File_msg_proto protoreflect.FileDescriptor

var file_msg_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x61, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a, 0x07, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x74, 0x0a, 0x0d, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x03, 0x72, 0x65, 0x71, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x03, 0x72, 0x65, 0x71, 0x22,
	0xb4, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x08, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x2a, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x07, 0x72,
	0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x52,
	0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x2a, 0xc9, 0x05, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x49, 0x56, 0x45, 0x52, 0x53, 0x41, 0x4c, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x6e, 0x52, 0x73, 0x70,
	0x51, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x4f, 0x6e, 0x52, 0x74, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x65,
	0x71, 0x51, 0x72, 0x79, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x05,
	0x12, 0x1a, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18,
	0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x65,
	0x71, 0x51, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x4f,
	0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x09, 0x12, 0x0e,
	0x0a, 0x0a, 0x4f, 0x6e, 0x52, 0x74, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x0a, 0x12, 0x0e,
	0x0a, 0x0a, 0x4f, 0x6e, 0x52, 0x74, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x10, 0x0b, 0x12, 0x12,
	0x0a, 0x0e, 0x52, 0x65, 0x71, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x10, 0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0e, 0x12, 0x14, 0x0a, 0x10,
	0x4f, 0x6e, 0x52, 0x73, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x6e, 0x45, 0x72, 0x72, 0x52, 0x74, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x4f,
	0x6e, 0x52, 0x73, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x11, 0x12, 0x17, 0x0a, 0x13, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x10, 0x12, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x53, 0x75, 0x62,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x10, 0x13, 0x12, 0x19, 0x0a, 0x15,
	0x55, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x10, 0x14, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x6e, 0x52, 0x73, 0x70,
	0x55, 0x6e, 0x53, 0x75, 0x62, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x10,
	0x15, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x6e, 0x52, 0x74, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x10, 0x16, 0x12, 0x14, 0x0a, 0x10, 0x4f,
	0x6e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10,
	0x17, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x6e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x18, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x65,
	0x71, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x10, 0x19, 0x12,
	0x0d, 0x0a, 0x09, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x41, 0x75, 0x74, 0x68, 0x10, 0x1a, 0x12, 0x10,
	0x0a, 0x0c, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x10, 0x1b,
	0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x10, 0x1c, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x10, 0x1d, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x10, 0x1e, 0x42, 0x22, 0x5a, 0x20, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x72, 0x61, 0x7a, 0x79, 0x2d, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x2f, 0x70, 0x62,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_msg_proto_rawDescOnce sync.Once
	file_msg_proto_rawDescData = file_msg_proto_rawDesc
)

func file_msg_proto_rawDescGZIP() []byte {
	file_msg_proto_rawDescOnce.Do(func() {
		file_msg_proto_rawDescData = protoimpl.X.CompressGZIP(file_msg_proto_rawDescData)
	})
	return file_msg_proto_rawDescData
}

var file_msg_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_msg_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_msg_proto_goTypes = []interface{}{
	(MsgType)(0),          // 0: MsgType
	(*RspInfo)(nil),       // 1: RspInfo
	(*StreamReqData)(nil), // 2: StreamReqData
	(*StreamResData)(nil), // 3: StreamResData
	(*any.Any)(nil),       // 4: google.protobuf.Any
}
var file_msg_proto_depIdxs = []int32{
	0, // 0: StreamReqData.type:type_name -> MsgType
	4, // 1: StreamReqData.req:type_name -> google.protobuf.Any
	0, // 2: StreamResData.type:type_name -> MsgType
	4, // 3: StreamResData.filed:type_name -> google.protobuf.Any
	1, // 4: StreamResData.rspInfo:type_name -> RspInfo
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_msg_proto_init() }
func file_msg_proto_init() {
	if File_msg_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_msg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamReqData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamResData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_msg_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_msg_proto_goTypes,
		DependencyIndexes: file_msg_proto_depIdxs,
		EnumInfos:         file_msg_proto_enumTypes,
		MessageInfos:      file_msg_proto_msgTypes,
	}.Build()
	File_msg_proto = out.File
	file_msg_proto_rawDesc = nil
	file_msg_proto_goTypes = nil
	file_msg_proto_depIdxs = nil
}
