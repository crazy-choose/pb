// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: stream.proto

#include "stream.pb.h"
#include "stream.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* CppStream_method_names[] = {
  "/CppStream/Dual",
};

std::unique_ptr< CppStream::Stub> CppStream::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CppStream::Stub> stub(new CppStream::Stub(channel, options));
  return stub;
}

CppStream::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Dual_(CppStream_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::ClientWriter< ::ReqMsg>* CppStream::Stub::DualRaw(::grpc::ClientContext* context, ::RspMsg* response) {
  return ::grpc::internal::ClientWriterFactory< ::ReqMsg>::Create(channel_.get(), rpcmethod_Dual_, context, response);
}

void CppStream::Stub::async::Dual(::grpc::ClientContext* context, ::RspMsg* response, ::grpc::ClientWriteReactor< ::ReqMsg>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::ReqMsg>::Create(stub_->channel_.get(), stub_->rpcmethod_Dual_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::ReqMsg>* CppStream::Stub::AsyncDualRaw(::grpc::ClientContext* context, ::RspMsg* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::ReqMsg>::Create(channel_.get(), cq, rpcmethod_Dual_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::ReqMsg>* CppStream::Stub::PrepareAsyncDualRaw(::grpc::ClientContext* context, ::RspMsg* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::ReqMsg>::Create(channel_.get(), cq, rpcmethod_Dual_, context, response, false, nullptr);
}

CppStream::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CppStream_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< CppStream::Service, ::ReqMsg, ::RspMsg>(
          [](CppStream::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::ReqMsg>* reader,
             ::RspMsg* resp) {
               return service->Dual(ctx, reader, resp);
             }, this)));
}

CppStream::Service::~Service() {
}

::grpc::Status CppStream::Service::Dual(::grpc::ServerContext* context, ::grpc::ServerReader< ::ReqMsg>* reader, ::RspMsg* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


