// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trade.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_trade_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_trade_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_trade_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_trade_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trade_2eproto;
class TradeInfo;
struct TradeInfoDefaultTypeInternal;
extern TradeInfoDefaultTypeInternal _TradeInfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::TradeInfo* Arena::CreateMaybeMessage<::TradeInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class TradeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TradeInfo) */ {
 public:
  inline TradeInfo() : TradeInfo(nullptr) {}
  ~TradeInfo() override;
  explicit constexpr TradeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TradeInfo(const TradeInfo& from);
  TradeInfo(TradeInfo&& from) noexcept
    : TradeInfo() {
    *this = ::std::move(from);
  }

  inline TradeInfo& operator=(const TradeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeInfo& operator=(TradeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TradeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TradeInfo* internal_default_instance() {
    return reinterpret_cast<const TradeInfo*>(
               &_TradeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TradeInfo& a, TradeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TradeInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TradeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TradeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TradeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TradeInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TradeInfo";
  }
  protected:
  explicit TradeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrokerIdFieldNumber = 1,
    kInvestorIdFieldNumber = 2,
    kReserve1FieldNumber = 3,
    kOrderRefFieldNumber = 4,
    kUserIdFieldNumber = 5,
    kExchangeIdFieldNumber = 6,
    kTradeIdFieldNumber = 7,
    kDirectionFieldNumber = 8,
    kOrderSysIdFieldNumber = 9,
    kParticipantIdFieldNumber = 10,
    kClientIdFieldNumber = 11,
    kTradingRoleFieldNumber = 12,
    kReserve2FieldNumber = 13,
    kOffsetFlagFieldNumber = 14,
    kHedgeFlagFieldNumber = 15,
    kTradeDateFieldNumber = 18,
    kTradeTimeFieldNumber = 19,
    kTradeTypeFieldNumber = 20,
    kPriceSourceFieldNumber = 21,
    kTraderIdFieldNumber = 22,
    kOrderLocalIdFieldNumber = 23,
    kClearingPartIdFieldNumber = 24,
    kBusinessUnitFieldNumber = 25,
    kTradingDayFieldNumber = 27,
    kTradeSourceFieldNumber = 30,
    kInvestUnitIdFieldNumber = 31,
    kInstrumentIdFieldNumber = 32,
    kExchangeInstIdFieldNumber = 33,
    kDirectionZnFieldNumber = 34,
    kOffsetFlagZnFieldNumber = 35,
    kPriceFieldNumber = 16,
    kVolumeFieldNumber = 17,
    kSequenceNoFieldNumber = 26,
    kSettlementIdFieldNumber = 28,
    kBrokerOrderSeqFieldNumber = 29,
  };
  // string broker_id = 1;
  void clear_broker_id();
  const std::string& broker_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_broker_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_broker_id();
  PROTOBUF_NODISCARD std::string* release_broker_id();
  void set_allocated_broker_id(std::string* broker_id);
  private:
  const std::string& _internal_broker_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_broker_id(const std::string& value);
  std::string* _internal_mutable_broker_id();
  public:

  // string investor_id = 2;
  void clear_investor_id();
  const std::string& investor_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_investor_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_investor_id();
  PROTOBUF_NODISCARD std::string* release_investor_id();
  void set_allocated_investor_id(std::string* investor_id);
  private:
  const std::string& _internal_investor_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_investor_id(const std::string& value);
  std::string* _internal_mutable_investor_id();
  public:

  // string reserve_1 = 3;
  void clear_reserve_1();
  const std::string& reserve_1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserve_1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserve_1();
  PROTOBUF_NODISCARD std::string* release_reserve_1();
  void set_allocated_reserve_1(std::string* reserve_1);
  private:
  const std::string& _internal_reserve_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserve_1(const std::string& value);
  std::string* _internal_mutable_reserve_1();
  public:

  // string order_ref = 4;
  void clear_order_ref();
  const std::string& order_ref() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_ref(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_ref();
  PROTOBUF_NODISCARD std::string* release_order_ref();
  void set_allocated_order_ref(std::string* order_ref);
  private:
  const std::string& _internal_order_ref() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_ref(const std::string& value);
  std::string* _internal_mutable_order_ref();
  public:

  // string user_id = 5;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string exchange_id = 6;
  void clear_exchange_id();
  const std::string& exchange_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exchange_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exchange_id();
  PROTOBUF_NODISCARD std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* exchange_id);
  private:
  const std::string& _internal_exchange_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_id(const std::string& value);
  std::string* _internal_mutable_exchange_id();
  public:

  // string trade_id = 7;
  void clear_trade_id();
  const std::string& trade_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trade_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trade_id();
  PROTOBUF_NODISCARD std::string* release_trade_id();
  void set_allocated_trade_id(std::string* trade_id);
  private:
  const std::string& _internal_trade_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_id(const std::string& value);
  std::string* _internal_mutable_trade_id();
  public:

  // string direction = 8;
  void clear_direction();
  const std::string& direction() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_direction(ArgT0&& arg0, ArgT... args);
  std::string* mutable_direction();
  PROTOBUF_NODISCARD std::string* release_direction();
  void set_allocated_direction(std::string* direction);
  private:
  const std::string& _internal_direction() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_direction(const std::string& value);
  std::string* _internal_mutable_direction();
  public:

  // string order_sys_id = 9;
  void clear_order_sys_id();
  const std::string& order_sys_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_sys_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_sys_id();
  PROTOBUF_NODISCARD std::string* release_order_sys_id();
  void set_allocated_order_sys_id(std::string* order_sys_id);
  private:
  const std::string& _internal_order_sys_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_sys_id(const std::string& value);
  std::string* _internal_mutable_order_sys_id();
  public:

  // string participant_id = 10;
  void clear_participant_id();
  const std::string& participant_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_participant_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_participant_id();
  PROTOBUF_NODISCARD std::string* release_participant_id();
  void set_allocated_participant_id(std::string* participant_id);
  private:
  const std::string& _internal_participant_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_participant_id(const std::string& value);
  std::string* _internal_mutable_participant_id();
  public:

  // string client_id = 11;
  void clear_client_id();
  const std::string& client_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string trading_role = 12;
  void clear_trading_role();
  const std::string& trading_role() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trading_role(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trading_role();
  PROTOBUF_NODISCARD std::string* release_trading_role();
  void set_allocated_trading_role(std::string* trading_role);
  private:
  const std::string& _internal_trading_role() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trading_role(const std::string& value);
  std::string* _internal_mutable_trading_role();
  public:

  // string reserve_2 = 13;
  void clear_reserve_2();
  const std::string& reserve_2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserve_2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserve_2();
  PROTOBUF_NODISCARD std::string* release_reserve_2();
  void set_allocated_reserve_2(std::string* reserve_2);
  private:
  const std::string& _internal_reserve_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserve_2(const std::string& value);
  std::string* _internal_mutable_reserve_2();
  public:

  // string offset_flag = 14;
  void clear_offset_flag();
  const std::string& offset_flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_offset_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_offset_flag();
  PROTOBUF_NODISCARD std::string* release_offset_flag();
  void set_allocated_offset_flag(std::string* offset_flag);
  private:
  const std::string& _internal_offset_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_offset_flag(const std::string& value);
  std::string* _internal_mutable_offset_flag();
  public:

  // string hedge_flag = 15;
  void clear_hedge_flag();
  const std::string& hedge_flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hedge_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hedge_flag();
  PROTOBUF_NODISCARD std::string* release_hedge_flag();
  void set_allocated_hedge_flag(std::string* hedge_flag);
  private:
  const std::string& _internal_hedge_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hedge_flag(const std::string& value);
  std::string* _internal_mutable_hedge_flag();
  public:

  // string trade_date = 18;
  void clear_trade_date();
  const std::string& trade_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trade_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trade_date();
  PROTOBUF_NODISCARD std::string* release_trade_date();
  void set_allocated_trade_date(std::string* trade_date);
  private:
  const std::string& _internal_trade_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_date(const std::string& value);
  std::string* _internal_mutable_trade_date();
  public:

  // string trade_time = 19;
  void clear_trade_time();
  const std::string& trade_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trade_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trade_time();
  PROTOBUF_NODISCARD std::string* release_trade_time();
  void set_allocated_trade_time(std::string* trade_time);
  private:
  const std::string& _internal_trade_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_time(const std::string& value);
  std::string* _internal_mutable_trade_time();
  public:

  // string trade_type = 20;
  void clear_trade_type();
  const std::string& trade_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trade_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trade_type();
  PROTOBUF_NODISCARD std::string* release_trade_type();
  void set_allocated_trade_type(std::string* trade_type);
  private:
  const std::string& _internal_trade_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_type(const std::string& value);
  std::string* _internal_mutable_trade_type();
  public:

  // string price_source = 21;
  void clear_price_source();
  const std::string& price_source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_price_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_price_source();
  PROTOBUF_NODISCARD std::string* release_price_source();
  void set_allocated_price_source(std::string* price_source);
  private:
  const std::string& _internal_price_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_price_source(const std::string& value);
  std::string* _internal_mutable_price_source();
  public:

  // string trader_id = 22;
  void clear_trader_id();
  const std::string& trader_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trader_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trader_id();
  PROTOBUF_NODISCARD std::string* release_trader_id();
  void set_allocated_trader_id(std::string* trader_id);
  private:
  const std::string& _internal_trader_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trader_id(const std::string& value);
  std::string* _internal_mutable_trader_id();
  public:

  // string order_local_id = 23;
  void clear_order_local_id();
  const std::string& order_local_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_local_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_local_id();
  PROTOBUF_NODISCARD std::string* release_order_local_id();
  void set_allocated_order_local_id(std::string* order_local_id);
  private:
  const std::string& _internal_order_local_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_local_id(const std::string& value);
  std::string* _internal_mutable_order_local_id();
  public:

  // string clearing_part_id = 24;
  void clear_clearing_part_id();
  const std::string& clearing_part_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clearing_part_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clearing_part_id();
  PROTOBUF_NODISCARD std::string* release_clearing_part_id();
  void set_allocated_clearing_part_id(std::string* clearing_part_id);
  private:
  const std::string& _internal_clearing_part_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clearing_part_id(const std::string& value);
  std::string* _internal_mutable_clearing_part_id();
  public:

  // string business_unit = 25;
  void clear_business_unit();
  const std::string& business_unit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_business_unit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_business_unit();
  PROTOBUF_NODISCARD std::string* release_business_unit();
  void set_allocated_business_unit(std::string* business_unit);
  private:
  const std::string& _internal_business_unit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_business_unit(const std::string& value);
  std::string* _internal_mutable_business_unit();
  public:

  // string trading_day = 27;
  void clear_trading_day();
  const std::string& trading_day() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trading_day(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trading_day();
  PROTOBUF_NODISCARD std::string* release_trading_day();
  void set_allocated_trading_day(std::string* trading_day);
  private:
  const std::string& _internal_trading_day() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trading_day(const std::string& value);
  std::string* _internal_mutable_trading_day();
  public:

  // string trade_source = 30;
  void clear_trade_source();
  const std::string& trade_source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trade_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trade_source();
  PROTOBUF_NODISCARD std::string* release_trade_source();
  void set_allocated_trade_source(std::string* trade_source);
  private:
  const std::string& _internal_trade_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trade_source(const std::string& value);
  std::string* _internal_mutable_trade_source();
  public:

  // string invest_unit_id = 31;
  void clear_invest_unit_id();
  const std::string& invest_unit_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_invest_unit_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_invest_unit_id();
  PROTOBUF_NODISCARD std::string* release_invest_unit_id();
  void set_allocated_invest_unit_id(std::string* invest_unit_id);
  private:
  const std::string& _internal_invest_unit_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_invest_unit_id(const std::string& value);
  std::string* _internal_mutable_invest_unit_id();
  public:

  // string instrument_id = 32;
  void clear_instrument_id();
  const std::string& instrument_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_id();
  PROTOBUF_NODISCARD std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* instrument_id);
  private:
  const std::string& _internal_instrument_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(const std::string& value);
  std::string* _internal_mutable_instrument_id();
  public:

  // string exchange_inst_id = 33;
  void clear_exchange_inst_id();
  const std::string& exchange_inst_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exchange_inst_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exchange_inst_id();
  PROTOBUF_NODISCARD std::string* release_exchange_inst_id();
  void set_allocated_exchange_inst_id(std::string* exchange_inst_id);
  private:
  const std::string& _internal_exchange_inst_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_inst_id(const std::string& value);
  std::string* _internal_mutable_exchange_inst_id();
  public:

  // string direction_zn = 34;
  void clear_direction_zn();
  const std::string& direction_zn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_direction_zn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_direction_zn();
  PROTOBUF_NODISCARD std::string* release_direction_zn();
  void set_allocated_direction_zn(std::string* direction_zn);
  private:
  const std::string& _internal_direction_zn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_direction_zn(const std::string& value);
  std::string* _internal_mutable_direction_zn();
  public:

  // string offset_flag_zn = 35;
  void clear_offset_flag_zn();
  const std::string& offset_flag_zn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_offset_flag_zn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_offset_flag_zn();
  PROTOBUF_NODISCARD std::string* release_offset_flag_zn();
  void set_allocated_offset_flag_zn(std::string* offset_flag_zn);
  private:
  const std::string& _internal_offset_flag_zn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_offset_flag_zn(const std::string& value);
  std::string* _internal_mutable_offset_flag_zn();
  public:

  // double price = 16;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // int32 volume = 17;
  void clear_volume();
  int32_t volume() const;
  void set_volume(int32_t value);
  private:
  int32_t _internal_volume() const;
  void _internal_set_volume(int32_t value);
  public:

  // int32 sequence_no = 26;
  void clear_sequence_no();
  int32_t sequence_no() const;
  void set_sequence_no(int32_t value);
  private:
  int32_t _internal_sequence_no() const;
  void _internal_set_sequence_no(int32_t value);
  public:

  // int32 settlement_id = 28;
  void clear_settlement_id();
  int32_t settlement_id() const;
  void set_settlement_id(int32_t value);
  private:
  int32_t _internal_settlement_id() const;
  void _internal_set_settlement_id(int32_t value);
  public:

  // int32 broker_order_seq = 29;
  void clear_broker_order_seq();
  int32_t broker_order_seq() const;
  void set_broker_order_seq(int32_t value);
  private:
  int32_t _internal_broker_order_seq() const;
  void _internal_set_broker_order_seq(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TradeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broker_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr investor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserve_1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_ref_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr direction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_sys_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr participant_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trading_role_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserve_2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr offset_flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hedge_flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr price_source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trader_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_local_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clearing_part_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr business_unit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trading_day_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trade_source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invest_unit_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_inst_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr direction_zn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr offset_flag_zn_;
  double price_;
  int32_t volume_;
  int32_t sequence_no_;
  int32_t settlement_id_;
  int32_t broker_order_seq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trade_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TradeInfo

// string broker_id = 1;
inline void TradeInfo::clear_broker_id() {
  broker_id_.ClearToEmpty();
}
inline const std::string& TradeInfo::broker_id() const {
  // @@protoc_insertion_point(field_get:TradeInfo.broker_id)
  return _internal_broker_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeInfo::set_broker_id(ArgT0&& arg0, ArgT... args) {
 
 broker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TradeInfo.broker_id)
}
inline std::string* TradeInfo::mutable_broker_id() {
  std::string* _s = _internal_mutable_broker_id();
  // @@protoc_insertion_point(field_mutable:TradeInfo.broker_id)
  return _s;
}
inline const std::string& TradeInfo::_internal_broker_id() const {
  return broker_id_.Get();
}
inline void TradeInfo::_internal_set_broker_id(const std::string& value) {
  
  broker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TradeInfo::_internal_mutable_broker_id() {
  
  return broker_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TradeInfo::release_broker_id() {
  // @@protoc_insertion_point(field_release:TradeInfo.broker_id)
  return broker_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TradeInfo::set_allocated_broker_id(std::string* broker_id) {
  if (broker_id != nullptr) {
    
  } else {
    
  }
  broker_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), broker_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (broker_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    broker_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TradeInfo.broker_id)
}

// string investor_id = 2;
inline void TradeInfo::clear_investor_id() {
  investor_id_.ClearToEmpty();
}
inline const std::string& TradeInfo::investor_id() const {
  // @@protoc_insertion_point(field_get:TradeInfo.investor_id)
  return _internal_investor_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeInfo::set_investor_id(ArgT0&& arg0, ArgT... args) {
 
 investor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TradeInfo.investor_id)
}
inline std::string* TradeInfo::mutable_investor_id() {
  std::string* _s = _internal_mutable_investor_id();
  // @@protoc_insertion_point(field_mutable:TradeInfo.investor_id)
  return _s;
}
inline const std::string& TradeInfo::_internal_investor_id() const {
  return investor_id_.Get();
}
inline void TradeInfo::_internal_set_investor_id(const std::string& value) {
  
  investor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TradeInfo::_internal_mutable_investor_id() {
  
  return investor_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TradeInfo::release_investor_id() {
  // @@protoc_insertion_point(field_release:TradeInfo.investor_id)
  return investor_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TradeInfo::set_allocated_investor_id(std::string* investor_id) {
  if (investor_id != nullptr) {
    
  } else {
    
  }
  investor_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), investor_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (investor_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    investor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TradeInfo.investor_id)
}

// string reserve_1 = 3;
inline void TradeInfo::clear_reserve_1() {
  reserve_1_.ClearToEmpty();
}
inline const std::string& TradeInfo::reserve_1() const {
  // @@protoc_insertion_point(field_get:TradeInfo.reserve_1)
  return _internal_reserve_1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeInfo::set_reserve_1(ArgT0&& arg0, ArgT... args) {
 
 reserve_1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TradeInfo.reserve_1)
}
inline std::string* TradeInfo::mutable_reserve_1() {
  std::string* _s = _internal_mutable_reserve_1();
  // @@protoc_insertion_point(field_mutable:TradeInfo.reserve_1)
  return _s;
}
inline const std::string& TradeInfo::_internal_reserve_1() const {
  return reserve_1_.Get();
}
inline void TradeInfo::_internal_set_reserve_1(const std::string& value) {
  
  reserve_1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TradeInfo::_internal_mutable_reserve_1() {
  
  return reserve_1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TradeInfo::release_reserve_1() {
  // @@protoc_insertion_point(field_release:TradeInfo.reserve_1)
  return reserve_1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TradeInfo::set_allocated_reserve_1(std::string* reserve_1) {
  if (reserve_1 != nullptr) {
    
  } else {
    
  }
  reserve_1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reserve_1,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reserve_1_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reserve_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TradeInfo.reserve_1)
}

// string order_ref = 4;
inline void TradeInfo::clear_order_ref() {
  order_ref_.ClearToEmpty();
}
inline const std::string& TradeInfo::order_ref() const {
  // @@protoc_insertion_point(field_get:TradeInfo.order_ref)
  return _internal_order_ref();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeInfo::set_order_ref(ArgT0&& arg0, ArgT... args) {
 
 order_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TradeInfo.order_ref)
}
inline std::string* TradeInfo::mutable_order_ref() {
  std::string* _s = _internal_mutable_order_ref();
  // @@protoc_insertion_point(field_mutable:TradeInfo.order_ref)
  return _s;
}
inline const std::string& TradeInfo::_internal_order_ref() const {
  return order_ref_.Get();
}
inline void TradeInfo::_internal_set_order_ref(const std::string& value) {
  
  order_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TradeInfo::_internal_mutable_order_ref() {
  
  return order_ref_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TradeInfo::release_order_ref() {
  // @@protoc_insertion_point(field_release:TradeInfo.order_ref)
  return order_ref_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TradeInfo::set_allocated_order_ref(std::string* order_ref) {
  if (order_ref != nullptr) {
    
  } else {
    
  }
  order_ref_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_ref,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_ref_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    order_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TradeInfo.order_ref)
}

// string user_id = 5;
inline void TradeInfo::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& TradeInfo::user_id() const {
  // @@protoc_insertion_point(field_get:TradeInfo.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeInfo::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TradeInfo.user_id)
}
inline std::string* TradeInfo::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:TradeInfo.user_id)
  return _s;
}
inline const std::string& TradeInfo::_internal_user_id() const {
  return user_id_.Get();
}
inline void TradeInfo::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TradeInfo::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TradeInfo::release_user_id() {
  // @@protoc_insertion_point(field_release:TradeInfo.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TradeInfo::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TradeInfo.user_id)
}

// string exchange_id = 6;
inline void TradeInfo::clear_exchange_id() {
  exchange_id_.ClearToEmpty();
}
inline const std::string& TradeInfo::exchange_id() const {
  // @@protoc_insertion_point(field_get:TradeInfo.exchange_id)
  return _internal_exchange_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeInfo::set_exchange_id(ArgT0&& arg0, ArgT... args) {
 
 exchange_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TradeInfo.exchange_id)
}
inline std::string* TradeInfo::mutable_exchange_id() {
  std::string* _s = _internal_mutable_exchange_id();
  // @@protoc_insertion_point(field_mutable:TradeInfo.exchange_id)
  return _s;
}
inline const std::string& TradeInfo::_internal_exchange_id() const {
  return exchange_id_.Get();
}
inline void TradeInfo::_internal_set_exchange_id(const std::string& value) {
  
  exchange_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TradeInfo::_internal_mutable_exchange_id() {
  
  return exchange_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TradeInfo::release_exchange_id() {
  // @@protoc_insertion_point(field_release:TradeInfo.exchange_id)
  return exchange_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TradeInfo::set_allocated_exchange_id(std::string* exchange_id) {
  if (exchange_id != nullptr) {
    
  } else {
    
  }
  exchange_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (exchange_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TradeInfo.exchange_id)
}

// string trade_id = 7;
inline void TradeInfo::clear_trade_id() {
  trade_id_.ClearToEmpty();
}
inline const std::string& TradeInfo::trade_id() const {
  // @@protoc_insertion_point(field_get:TradeInfo.trade_id)
  return _internal_trade_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeInfo::set_trade_id(ArgT0&& arg0, ArgT... args) {
 
 trade_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TradeInfo.trade_id)
}
inline std::string* TradeInfo::mutable_trade_id() {
  std::string* _s = _internal_mutable_trade_id();
  // @@protoc_insertion_point(field_mutable:TradeInfo.trade_id)
  return _s;
}
inline const std::string& TradeInfo::_internal_trade_id() const {
  return trade_id_.Get();
}
inline void TradeInfo::_internal_set_trade_id(const std::string& value) {
  
  trade_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TradeInfo::_internal_mutable_trade_id() {
  
  return trade_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TradeInfo::release_trade_id() {
  // @@protoc_insertion_point(field_release:TradeInfo.trade_id)
  return trade_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TradeInfo::set_allocated_trade_id(std::string* trade_id) {
  if (trade_id != nullptr) {
    
  } else {
    
  }
  trade_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trade_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trade_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    trade_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TradeInfo.trade_id)
}

// string direction = 8;
inline void TradeInfo::clear_direction() {
  direction_.ClearToEmpty();
}
inline const std::string& TradeInfo::direction() const {
  // @@protoc_insertion_point(field_get:TradeInfo.direction)
  return _internal_direction();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeInfo::set_direction(ArgT0&& arg0, ArgT... args) {
 
 direction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TradeInfo.direction)
}
inline std::string* TradeInfo::mutable_direction() {
  std::string* _s = _internal_mutable_direction();
  // @@protoc_insertion_point(field_mutable:TradeInfo.direction)
  return _s;
}
inline const std::string& TradeInfo::_internal_direction() const {
  return direction_.Get();
}
inline void TradeInfo::_internal_set_direction(const std::string& value) {
  
  direction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TradeInfo::_internal_mutable_direction() {
  
  return direction_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TradeInfo::release_direction() {
  // @@protoc_insertion_point(field_release:TradeInfo.direction)
  return direction_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TradeInfo::set_allocated_direction(std::string* direction) {
  if (direction != nullptr) {
    
  } else {
    
  }
  direction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), direction,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (direction_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    direction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TradeInfo.direction)
}

// string order_sys_id = 9;
inline void TradeInfo::clear_order_sys_id() {
  order_sys_id_.ClearToEmpty();
}
inline const std::string& TradeInfo::order_sys_id() const {
  // @@protoc_insertion_point(field_get:TradeInfo.order_sys_id)
  return _internal_order_sys_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeInfo::set_order_sys_id(ArgT0&& arg0, ArgT... args) {
 
 order_sys_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TradeInfo.order_sys_id)
}
inline std::string* TradeInfo::mutable_order_sys_id() {
  std::string* _s = _internal_mutable_order_sys_id();
  // @@protoc_insertion_point(field_mutable:TradeInfo.order_sys_id)
  return _s;
}
inline const std::string& TradeInfo::_internal_order_sys_id() const {
  return order_sys_id_.Get();
}
inline void TradeInfo::_internal_set_order_sys_id(const std::string& value) {
  
  order_sys_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TradeInfo::_internal_mutable_order_sys_id() {
  
  return order_sys_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TradeInfo::release_order_sys_id() {
  // @@protoc_insertion_point(field_release:TradeInfo.order_sys_id)
  return order_sys_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TradeInfo::set_allocated_order_sys_id(std::string* order_sys_id) {
  if (order_sys_id != nullptr) {
    
  } else {
    
  }
  order_sys_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_sys_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_sys_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    order_sys_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TradeInfo.order_sys_id)
}

// string participant_id = 10;
inline void TradeInfo::clear_participant_id() {
  participant_id_.ClearToEmpty();
}
inline const std::string& TradeInfo::participant_id() const {
  // @@protoc_insertion_point(field_get:TradeInfo.participant_id)
  return _internal_participant_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeInfo::set_participant_id(ArgT0&& arg0, ArgT... args) {
 
 participant_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TradeInfo.participant_id)
}
inline std::string* TradeInfo::mutable_participant_id() {
  std::string* _s = _internal_mutable_participant_id();
  // @@protoc_insertion_point(field_mutable:TradeInfo.participant_id)
  return _s;
}
inline const std::string& TradeInfo::_internal_participant_id() const {
  return participant_id_.Get();
}
inline void TradeInfo::_internal_set_participant_id(const std::string& value) {
  
  participant_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TradeInfo::_internal_mutable_participant_id() {
  
  return participant_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TradeInfo::release_participant_id() {
  // @@protoc_insertion_point(field_release:TradeInfo.participant_id)
  return participant_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TradeInfo::set_allocated_participant_id(std::string* participant_id) {
  if (participant_id != nullptr) {
    
  } else {
    
  }
  participant_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), participant_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (participant_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    participant_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TradeInfo.participant_id)
}

// string client_id = 11;
inline void TradeInfo::clear_client_id() {
  client_id_.ClearToEmpty();
}
inline const std::string& TradeInfo::client_id() const {
  // @@protoc_insertion_point(field_get:TradeInfo.client_id)
  return _internal_client_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeInfo::set_client_id(ArgT0&& arg0, ArgT... args) {
 
 client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TradeInfo.client_id)
}
inline std::string* TradeInfo::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:TradeInfo.client_id)
  return _s;
}
inline const std::string& TradeInfo::_internal_client_id() const {
  return client_id_.Get();
}
inline void TradeInfo::_internal_set_client_id(const std::string& value) {
  
  client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TradeInfo::_internal_mutable_client_id() {
  
  return client_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TradeInfo::release_client_id() {
  // @@protoc_insertion_point(field_release:TradeInfo.client_id)
  return client_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TradeInfo::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TradeInfo.client_id)
}

// string trading_role = 12;
inline void TradeInfo::clear_trading_role() {
  trading_role_.ClearToEmpty();
}
inline const std::string& TradeInfo::trading_role() const {
  // @@protoc_insertion_point(field_get:TradeInfo.trading_role)
  return _internal_trading_role();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeInfo::set_trading_role(ArgT0&& arg0, ArgT... args) {
 
 trading_role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TradeInfo.trading_role)
}
inline std::string* TradeInfo::mutable_trading_role() {
  std::string* _s = _internal_mutable_trading_role();
  // @@protoc_insertion_point(field_mutable:TradeInfo.trading_role)
  return _s;
}
inline const std::string& TradeInfo::_internal_trading_role() const {
  return trading_role_.Get();
}
inline void TradeInfo::_internal_set_trading_role(const std::string& value) {
  
  trading_role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TradeInfo::_internal_mutable_trading_role() {
  
  return trading_role_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TradeInfo::release_trading_role() {
  // @@protoc_insertion_point(field_release:TradeInfo.trading_role)
  return trading_role_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TradeInfo::set_allocated_trading_role(std::string* trading_role) {
  if (trading_role != nullptr) {
    
  } else {
    
  }
  trading_role_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trading_role,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trading_role_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    trading_role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TradeInfo.trading_role)
}

// string reserve_2 = 13;
inline void TradeInfo::clear_reserve_2() {
  reserve_2_.ClearToEmpty();
}
inline const std::string& TradeInfo::reserve_2() const {
  // @@protoc_insertion_point(field_get:TradeInfo.reserve_2)
  return _internal_reserve_2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeInfo::set_reserve_2(ArgT0&& arg0, ArgT... args) {
 
 reserve_2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TradeInfo.reserve_2)
}
inline std::string* TradeInfo::mutable_reserve_2() {
  std::string* _s = _internal_mutable_reserve_2();
  // @@protoc_insertion_point(field_mutable:TradeInfo.reserve_2)
  return _s;
}
inline const std::string& TradeInfo::_internal_reserve_2() const {
  return reserve_2_.Get();
}
inline void TradeInfo::_internal_set_reserve_2(const std::string& value) {
  
  reserve_2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TradeInfo::_internal_mutable_reserve_2() {
  
  return reserve_2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TradeInfo::release_reserve_2() {
  // @@protoc_insertion_point(field_release:TradeInfo.reserve_2)
  return reserve_2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TradeInfo::set_allocated_reserve_2(std::string* reserve_2) {
  if (reserve_2 != nullptr) {
    
  } else {
    
  }
  reserve_2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reserve_2,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reserve_2_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reserve_2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TradeInfo.reserve_2)
}

// string offset_flag = 14;
inline void TradeInfo::clear_offset_flag() {
  offset_flag_.ClearToEmpty();
}
inline const std::string& TradeInfo::offset_flag() const {
  // @@protoc_insertion_point(field_get:TradeInfo.offset_flag)
  return _internal_offset_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeInfo::set_offset_flag(ArgT0&& arg0, ArgT... args) {
 
 offset_flag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TradeInfo.offset_flag)
}
inline std::string* TradeInfo::mutable_offset_flag() {
  std::string* _s = _internal_mutable_offset_flag();
  // @@protoc_insertion_point(field_mutable:TradeInfo.offset_flag)
  return _s;
}
inline const std::string& TradeInfo::_internal_offset_flag() const {
  return offset_flag_.Get();
}
inline void TradeInfo::_internal_set_offset_flag(const std::string& value) {
  
  offset_flag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TradeInfo::_internal_mutable_offset_flag() {
  
  return offset_flag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TradeInfo::release_offset_flag() {
  // @@protoc_insertion_point(field_release:TradeInfo.offset_flag)
  return offset_flag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TradeInfo::set_allocated_offset_flag(std::string* offset_flag) {
  if (offset_flag != nullptr) {
    
  } else {
    
  }
  offset_flag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), offset_flag,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (offset_flag_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    offset_flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TradeInfo.offset_flag)
}

// string hedge_flag = 15;
inline void TradeInfo::clear_hedge_flag() {
  hedge_flag_.ClearToEmpty();
}
inline const std::string& TradeInfo::hedge_flag() const {
  // @@protoc_insertion_point(field_get:TradeInfo.hedge_flag)
  return _internal_hedge_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeInfo::set_hedge_flag(ArgT0&& arg0, ArgT... args) {
 
 hedge_flag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TradeInfo.hedge_flag)
}
inline std::string* TradeInfo::mutable_hedge_flag() {
  std::string* _s = _internal_mutable_hedge_flag();
  // @@protoc_insertion_point(field_mutable:TradeInfo.hedge_flag)
  return _s;
}
inline const std::string& TradeInfo::_internal_hedge_flag() const {
  return hedge_flag_.Get();
}
inline void TradeInfo::_internal_set_hedge_flag(const std::string& value) {
  
  hedge_flag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TradeInfo::_internal_mutable_hedge_flag() {
  
  return hedge_flag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TradeInfo::release_hedge_flag() {
  // @@protoc_insertion_point(field_release:TradeInfo.hedge_flag)
  return hedge_flag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TradeInfo::set_allocated_hedge_flag(std::string* hedge_flag) {
  if (hedge_flag != nullptr) {
    
  } else {
    
  }
  hedge_flag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hedge_flag,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hedge_flag_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hedge_flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TradeInfo.hedge_flag)
}

// double price = 16;
inline void TradeInfo::clear_price() {
  price_ = 0;
}
inline double TradeInfo::_internal_price() const {
  return price_;
}
inline double TradeInfo::price() const {
  // @@protoc_insertion_point(field_get:TradeInfo.price)
  return _internal_price();
}
inline void TradeInfo::_internal_set_price(double value) {
  
  price_ = value;
}
inline void TradeInfo::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:TradeInfo.price)
}

// int32 volume = 17;
inline void TradeInfo::clear_volume() {
  volume_ = 0;
}
inline int32_t TradeInfo::_internal_volume() const {
  return volume_;
}
inline int32_t TradeInfo::volume() const {
  // @@protoc_insertion_point(field_get:TradeInfo.volume)
  return _internal_volume();
}
inline void TradeInfo::_internal_set_volume(int32_t value) {
  
  volume_ = value;
}
inline void TradeInfo::set_volume(int32_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:TradeInfo.volume)
}

// string trade_date = 18;
inline void TradeInfo::clear_trade_date() {
  trade_date_.ClearToEmpty();
}
inline const std::string& TradeInfo::trade_date() const {
  // @@protoc_insertion_point(field_get:TradeInfo.trade_date)
  return _internal_trade_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeInfo::set_trade_date(ArgT0&& arg0, ArgT... args) {
 
 trade_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TradeInfo.trade_date)
}
inline std::string* TradeInfo::mutable_trade_date() {
  std::string* _s = _internal_mutable_trade_date();
  // @@protoc_insertion_point(field_mutable:TradeInfo.trade_date)
  return _s;
}
inline const std::string& TradeInfo::_internal_trade_date() const {
  return trade_date_.Get();
}
inline void TradeInfo::_internal_set_trade_date(const std::string& value) {
  
  trade_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TradeInfo::_internal_mutable_trade_date() {
  
  return trade_date_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TradeInfo::release_trade_date() {
  // @@protoc_insertion_point(field_release:TradeInfo.trade_date)
  return trade_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TradeInfo::set_allocated_trade_date(std::string* trade_date) {
  if (trade_date != nullptr) {
    
  } else {
    
  }
  trade_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trade_date,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trade_date_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    trade_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TradeInfo.trade_date)
}

// string trade_time = 19;
inline void TradeInfo::clear_trade_time() {
  trade_time_.ClearToEmpty();
}
inline const std::string& TradeInfo::trade_time() const {
  // @@protoc_insertion_point(field_get:TradeInfo.trade_time)
  return _internal_trade_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeInfo::set_trade_time(ArgT0&& arg0, ArgT... args) {
 
 trade_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TradeInfo.trade_time)
}
inline std::string* TradeInfo::mutable_trade_time() {
  std::string* _s = _internal_mutable_trade_time();
  // @@protoc_insertion_point(field_mutable:TradeInfo.trade_time)
  return _s;
}
inline const std::string& TradeInfo::_internal_trade_time() const {
  return trade_time_.Get();
}
inline void TradeInfo::_internal_set_trade_time(const std::string& value) {
  
  trade_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TradeInfo::_internal_mutable_trade_time() {
  
  return trade_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TradeInfo::release_trade_time() {
  // @@protoc_insertion_point(field_release:TradeInfo.trade_time)
  return trade_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TradeInfo::set_allocated_trade_time(std::string* trade_time) {
  if (trade_time != nullptr) {
    
  } else {
    
  }
  trade_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trade_time,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trade_time_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    trade_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TradeInfo.trade_time)
}

// string trade_type = 20;
inline void TradeInfo::clear_trade_type() {
  trade_type_.ClearToEmpty();
}
inline const std::string& TradeInfo::trade_type() const {
  // @@protoc_insertion_point(field_get:TradeInfo.trade_type)
  return _internal_trade_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeInfo::set_trade_type(ArgT0&& arg0, ArgT... args) {
 
 trade_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TradeInfo.trade_type)
}
inline std::string* TradeInfo::mutable_trade_type() {
  std::string* _s = _internal_mutable_trade_type();
  // @@protoc_insertion_point(field_mutable:TradeInfo.trade_type)
  return _s;
}
inline const std::string& TradeInfo::_internal_trade_type() const {
  return trade_type_.Get();
}
inline void TradeInfo::_internal_set_trade_type(const std::string& value) {
  
  trade_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TradeInfo::_internal_mutable_trade_type() {
  
  return trade_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TradeInfo::release_trade_type() {
  // @@protoc_insertion_point(field_release:TradeInfo.trade_type)
  return trade_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TradeInfo::set_allocated_trade_type(std::string* trade_type) {
  if (trade_type != nullptr) {
    
  } else {
    
  }
  trade_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trade_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trade_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    trade_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TradeInfo.trade_type)
}

// string price_source = 21;
inline void TradeInfo::clear_price_source() {
  price_source_.ClearToEmpty();
}
inline const std::string& TradeInfo::price_source() const {
  // @@protoc_insertion_point(field_get:TradeInfo.price_source)
  return _internal_price_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeInfo::set_price_source(ArgT0&& arg0, ArgT... args) {
 
 price_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TradeInfo.price_source)
}
inline std::string* TradeInfo::mutable_price_source() {
  std::string* _s = _internal_mutable_price_source();
  // @@protoc_insertion_point(field_mutable:TradeInfo.price_source)
  return _s;
}
inline const std::string& TradeInfo::_internal_price_source() const {
  return price_source_.Get();
}
inline void TradeInfo::_internal_set_price_source(const std::string& value) {
  
  price_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TradeInfo::_internal_mutable_price_source() {
  
  return price_source_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TradeInfo::release_price_source() {
  // @@protoc_insertion_point(field_release:TradeInfo.price_source)
  return price_source_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TradeInfo::set_allocated_price_source(std::string* price_source) {
  if (price_source != nullptr) {
    
  } else {
    
  }
  price_source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), price_source,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (price_source_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    price_source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TradeInfo.price_source)
}

// string trader_id = 22;
inline void TradeInfo::clear_trader_id() {
  trader_id_.ClearToEmpty();
}
inline const std::string& TradeInfo::trader_id() const {
  // @@protoc_insertion_point(field_get:TradeInfo.trader_id)
  return _internal_trader_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeInfo::set_trader_id(ArgT0&& arg0, ArgT... args) {
 
 trader_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TradeInfo.trader_id)
}
inline std::string* TradeInfo::mutable_trader_id() {
  std::string* _s = _internal_mutable_trader_id();
  // @@protoc_insertion_point(field_mutable:TradeInfo.trader_id)
  return _s;
}
inline const std::string& TradeInfo::_internal_trader_id() const {
  return trader_id_.Get();
}
inline void TradeInfo::_internal_set_trader_id(const std::string& value) {
  
  trader_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TradeInfo::_internal_mutable_trader_id() {
  
  return trader_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TradeInfo::release_trader_id() {
  // @@protoc_insertion_point(field_release:TradeInfo.trader_id)
  return trader_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TradeInfo::set_allocated_trader_id(std::string* trader_id) {
  if (trader_id != nullptr) {
    
  } else {
    
  }
  trader_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trader_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trader_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    trader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TradeInfo.trader_id)
}

// string order_local_id = 23;
inline void TradeInfo::clear_order_local_id() {
  order_local_id_.ClearToEmpty();
}
inline const std::string& TradeInfo::order_local_id() const {
  // @@protoc_insertion_point(field_get:TradeInfo.order_local_id)
  return _internal_order_local_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeInfo::set_order_local_id(ArgT0&& arg0, ArgT... args) {
 
 order_local_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TradeInfo.order_local_id)
}
inline std::string* TradeInfo::mutable_order_local_id() {
  std::string* _s = _internal_mutable_order_local_id();
  // @@protoc_insertion_point(field_mutable:TradeInfo.order_local_id)
  return _s;
}
inline const std::string& TradeInfo::_internal_order_local_id() const {
  return order_local_id_.Get();
}
inline void TradeInfo::_internal_set_order_local_id(const std::string& value) {
  
  order_local_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TradeInfo::_internal_mutable_order_local_id() {
  
  return order_local_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TradeInfo::release_order_local_id() {
  // @@protoc_insertion_point(field_release:TradeInfo.order_local_id)
  return order_local_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TradeInfo::set_allocated_order_local_id(std::string* order_local_id) {
  if (order_local_id != nullptr) {
    
  } else {
    
  }
  order_local_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_local_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_local_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    order_local_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TradeInfo.order_local_id)
}

// string clearing_part_id = 24;
inline void TradeInfo::clear_clearing_part_id() {
  clearing_part_id_.ClearToEmpty();
}
inline const std::string& TradeInfo::clearing_part_id() const {
  // @@protoc_insertion_point(field_get:TradeInfo.clearing_part_id)
  return _internal_clearing_part_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeInfo::set_clearing_part_id(ArgT0&& arg0, ArgT... args) {
 
 clearing_part_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TradeInfo.clearing_part_id)
}
inline std::string* TradeInfo::mutable_clearing_part_id() {
  std::string* _s = _internal_mutable_clearing_part_id();
  // @@protoc_insertion_point(field_mutable:TradeInfo.clearing_part_id)
  return _s;
}
inline const std::string& TradeInfo::_internal_clearing_part_id() const {
  return clearing_part_id_.Get();
}
inline void TradeInfo::_internal_set_clearing_part_id(const std::string& value) {
  
  clearing_part_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TradeInfo::_internal_mutable_clearing_part_id() {
  
  return clearing_part_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TradeInfo::release_clearing_part_id() {
  // @@protoc_insertion_point(field_release:TradeInfo.clearing_part_id)
  return clearing_part_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TradeInfo::set_allocated_clearing_part_id(std::string* clearing_part_id) {
  if (clearing_part_id != nullptr) {
    
  } else {
    
  }
  clearing_part_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clearing_part_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (clearing_part_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    clearing_part_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TradeInfo.clearing_part_id)
}

// string business_unit = 25;
inline void TradeInfo::clear_business_unit() {
  business_unit_.ClearToEmpty();
}
inline const std::string& TradeInfo::business_unit() const {
  // @@protoc_insertion_point(field_get:TradeInfo.business_unit)
  return _internal_business_unit();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeInfo::set_business_unit(ArgT0&& arg0, ArgT... args) {
 
 business_unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TradeInfo.business_unit)
}
inline std::string* TradeInfo::mutable_business_unit() {
  std::string* _s = _internal_mutable_business_unit();
  // @@protoc_insertion_point(field_mutable:TradeInfo.business_unit)
  return _s;
}
inline const std::string& TradeInfo::_internal_business_unit() const {
  return business_unit_.Get();
}
inline void TradeInfo::_internal_set_business_unit(const std::string& value) {
  
  business_unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TradeInfo::_internal_mutable_business_unit() {
  
  return business_unit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TradeInfo::release_business_unit() {
  // @@protoc_insertion_point(field_release:TradeInfo.business_unit)
  return business_unit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TradeInfo::set_allocated_business_unit(std::string* business_unit) {
  if (business_unit != nullptr) {
    
  } else {
    
  }
  business_unit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), business_unit,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (business_unit_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    business_unit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TradeInfo.business_unit)
}

// int32 sequence_no = 26;
inline void TradeInfo::clear_sequence_no() {
  sequence_no_ = 0;
}
inline int32_t TradeInfo::_internal_sequence_no() const {
  return sequence_no_;
}
inline int32_t TradeInfo::sequence_no() const {
  // @@protoc_insertion_point(field_get:TradeInfo.sequence_no)
  return _internal_sequence_no();
}
inline void TradeInfo::_internal_set_sequence_no(int32_t value) {
  
  sequence_no_ = value;
}
inline void TradeInfo::set_sequence_no(int32_t value) {
  _internal_set_sequence_no(value);
  // @@protoc_insertion_point(field_set:TradeInfo.sequence_no)
}

// string trading_day = 27;
inline void TradeInfo::clear_trading_day() {
  trading_day_.ClearToEmpty();
}
inline const std::string& TradeInfo::trading_day() const {
  // @@protoc_insertion_point(field_get:TradeInfo.trading_day)
  return _internal_trading_day();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeInfo::set_trading_day(ArgT0&& arg0, ArgT... args) {
 
 trading_day_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TradeInfo.trading_day)
}
inline std::string* TradeInfo::mutable_trading_day() {
  std::string* _s = _internal_mutable_trading_day();
  // @@protoc_insertion_point(field_mutable:TradeInfo.trading_day)
  return _s;
}
inline const std::string& TradeInfo::_internal_trading_day() const {
  return trading_day_.Get();
}
inline void TradeInfo::_internal_set_trading_day(const std::string& value) {
  
  trading_day_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TradeInfo::_internal_mutable_trading_day() {
  
  return trading_day_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TradeInfo::release_trading_day() {
  // @@protoc_insertion_point(field_release:TradeInfo.trading_day)
  return trading_day_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TradeInfo::set_allocated_trading_day(std::string* trading_day) {
  if (trading_day != nullptr) {
    
  } else {
    
  }
  trading_day_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trading_day,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trading_day_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    trading_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TradeInfo.trading_day)
}

// int32 settlement_id = 28;
inline void TradeInfo::clear_settlement_id() {
  settlement_id_ = 0;
}
inline int32_t TradeInfo::_internal_settlement_id() const {
  return settlement_id_;
}
inline int32_t TradeInfo::settlement_id() const {
  // @@protoc_insertion_point(field_get:TradeInfo.settlement_id)
  return _internal_settlement_id();
}
inline void TradeInfo::_internal_set_settlement_id(int32_t value) {
  
  settlement_id_ = value;
}
inline void TradeInfo::set_settlement_id(int32_t value) {
  _internal_set_settlement_id(value);
  // @@protoc_insertion_point(field_set:TradeInfo.settlement_id)
}

// int32 broker_order_seq = 29;
inline void TradeInfo::clear_broker_order_seq() {
  broker_order_seq_ = 0;
}
inline int32_t TradeInfo::_internal_broker_order_seq() const {
  return broker_order_seq_;
}
inline int32_t TradeInfo::broker_order_seq() const {
  // @@protoc_insertion_point(field_get:TradeInfo.broker_order_seq)
  return _internal_broker_order_seq();
}
inline void TradeInfo::_internal_set_broker_order_seq(int32_t value) {
  
  broker_order_seq_ = value;
}
inline void TradeInfo::set_broker_order_seq(int32_t value) {
  _internal_set_broker_order_seq(value);
  // @@protoc_insertion_point(field_set:TradeInfo.broker_order_seq)
}

// string trade_source = 30;
inline void TradeInfo::clear_trade_source() {
  trade_source_.ClearToEmpty();
}
inline const std::string& TradeInfo::trade_source() const {
  // @@protoc_insertion_point(field_get:TradeInfo.trade_source)
  return _internal_trade_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeInfo::set_trade_source(ArgT0&& arg0, ArgT... args) {
 
 trade_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TradeInfo.trade_source)
}
inline std::string* TradeInfo::mutable_trade_source() {
  std::string* _s = _internal_mutable_trade_source();
  // @@protoc_insertion_point(field_mutable:TradeInfo.trade_source)
  return _s;
}
inline const std::string& TradeInfo::_internal_trade_source() const {
  return trade_source_.Get();
}
inline void TradeInfo::_internal_set_trade_source(const std::string& value) {
  
  trade_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TradeInfo::_internal_mutable_trade_source() {
  
  return trade_source_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TradeInfo::release_trade_source() {
  // @@protoc_insertion_point(field_release:TradeInfo.trade_source)
  return trade_source_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TradeInfo::set_allocated_trade_source(std::string* trade_source) {
  if (trade_source != nullptr) {
    
  } else {
    
  }
  trade_source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trade_source,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trade_source_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    trade_source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TradeInfo.trade_source)
}

// string invest_unit_id = 31;
inline void TradeInfo::clear_invest_unit_id() {
  invest_unit_id_.ClearToEmpty();
}
inline const std::string& TradeInfo::invest_unit_id() const {
  // @@protoc_insertion_point(field_get:TradeInfo.invest_unit_id)
  return _internal_invest_unit_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeInfo::set_invest_unit_id(ArgT0&& arg0, ArgT... args) {
 
 invest_unit_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TradeInfo.invest_unit_id)
}
inline std::string* TradeInfo::mutable_invest_unit_id() {
  std::string* _s = _internal_mutable_invest_unit_id();
  // @@protoc_insertion_point(field_mutable:TradeInfo.invest_unit_id)
  return _s;
}
inline const std::string& TradeInfo::_internal_invest_unit_id() const {
  return invest_unit_id_.Get();
}
inline void TradeInfo::_internal_set_invest_unit_id(const std::string& value) {
  
  invest_unit_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TradeInfo::_internal_mutable_invest_unit_id() {
  
  return invest_unit_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TradeInfo::release_invest_unit_id() {
  // @@protoc_insertion_point(field_release:TradeInfo.invest_unit_id)
  return invest_unit_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TradeInfo::set_allocated_invest_unit_id(std::string* invest_unit_id) {
  if (invest_unit_id != nullptr) {
    
  } else {
    
  }
  invest_unit_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invest_unit_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (invest_unit_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    invest_unit_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TradeInfo.invest_unit_id)
}

// string instrument_id = 32;
inline void TradeInfo::clear_instrument_id() {
  instrument_id_.ClearToEmpty();
}
inline const std::string& TradeInfo::instrument_id() const {
  // @@protoc_insertion_point(field_get:TradeInfo.instrument_id)
  return _internal_instrument_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeInfo::set_instrument_id(ArgT0&& arg0, ArgT... args) {
 
 instrument_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TradeInfo.instrument_id)
}
inline std::string* TradeInfo::mutable_instrument_id() {
  std::string* _s = _internal_mutable_instrument_id();
  // @@protoc_insertion_point(field_mutable:TradeInfo.instrument_id)
  return _s;
}
inline const std::string& TradeInfo::_internal_instrument_id() const {
  return instrument_id_.Get();
}
inline void TradeInfo::_internal_set_instrument_id(const std::string& value) {
  
  instrument_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TradeInfo::_internal_mutable_instrument_id() {
  
  return instrument_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TradeInfo::release_instrument_id() {
  // @@protoc_insertion_point(field_release:TradeInfo.instrument_id)
  return instrument_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TradeInfo::set_allocated_instrument_id(std::string* instrument_id) {
  if (instrument_id != nullptr) {
    
  } else {
    
  }
  instrument_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrument_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (instrument_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TradeInfo.instrument_id)
}

// string exchange_inst_id = 33;
inline void TradeInfo::clear_exchange_inst_id() {
  exchange_inst_id_.ClearToEmpty();
}
inline const std::string& TradeInfo::exchange_inst_id() const {
  // @@protoc_insertion_point(field_get:TradeInfo.exchange_inst_id)
  return _internal_exchange_inst_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeInfo::set_exchange_inst_id(ArgT0&& arg0, ArgT... args) {
 
 exchange_inst_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TradeInfo.exchange_inst_id)
}
inline std::string* TradeInfo::mutable_exchange_inst_id() {
  std::string* _s = _internal_mutable_exchange_inst_id();
  // @@protoc_insertion_point(field_mutable:TradeInfo.exchange_inst_id)
  return _s;
}
inline const std::string& TradeInfo::_internal_exchange_inst_id() const {
  return exchange_inst_id_.Get();
}
inline void TradeInfo::_internal_set_exchange_inst_id(const std::string& value) {
  
  exchange_inst_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TradeInfo::_internal_mutable_exchange_inst_id() {
  
  return exchange_inst_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TradeInfo::release_exchange_inst_id() {
  // @@protoc_insertion_point(field_release:TradeInfo.exchange_inst_id)
  return exchange_inst_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TradeInfo::set_allocated_exchange_inst_id(std::string* exchange_inst_id) {
  if (exchange_inst_id != nullptr) {
    
  } else {
    
  }
  exchange_inst_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_inst_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (exchange_inst_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    exchange_inst_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TradeInfo.exchange_inst_id)
}

// string direction_zn = 34;
inline void TradeInfo::clear_direction_zn() {
  direction_zn_.ClearToEmpty();
}
inline const std::string& TradeInfo::direction_zn() const {
  // @@protoc_insertion_point(field_get:TradeInfo.direction_zn)
  return _internal_direction_zn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeInfo::set_direction_zn(ArgT0&& arg0, ArgT... args) {
 
 direction_zn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TradeInfo.direction_zn)
}
inline std::string* TradeInfo::mutable_direction_zn() {
  std::string* _s = _internal_mutable_direction_zn();
  // @@protoc_insertion_point(field_mutable:TradeInfo.direction_zn)
  return _s;
}
inline const std::string& TradeInfo::_internal_direction_zn() const {
  return direction_zn_.Get();
}
inline void TradeInfo::_internal_set_direction_zn(const std::string& value) {
  
  direction_zn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TradeInfo::_internal_mutable_direction_zn() {
  
  return direction_zn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TradeInfo::release_direction_zn() {
  // @@protoc_insertion_point(field_release:TradeInfo.direction_zn)
  return direction_zn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TradeInfo::set_allocated_direction_zn(std::string* direction_zn) {
  if (direction_zn != nullptr) {
    
  } else {
    
  }
  direction_zn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), direction_zn,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (direction_zn_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    direction_zn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TradeInfo.direction_zn)
}

// string offset_flag_zn = 35;
inline void TradeInfo::clear_offset_flag_zn() {
  offset_flag_zn_.ClearToEmpty();
}
inline const std::string& TradeInfo::offset_flag_zn() const {
  // @@protoc_insertion_point(field_get:TradeInfo.offset_flag_zn)
  return _internal_offset_flag_zn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeInfo::set_offset_flag_zn(ArgT0&& arg0, ArgT... args) {
 
 offset_flag_zn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TradeInfo.offset_flag_zn)
}
inline std::string* TradeInfo::mutable_offset_flag_zn() {
  std::string* _s = _internal_mutable_offset_flag_zn();
  // @@protoc_insertion_point(field_mutable:TradeInfo.offset_flag_zn)
  return _s;
}
inline const std::string& TradeInfo::_internal_offset_flag_zn() const {
  return offset_flag_zn_.Get();
}
inline void TradeInfo::_internal_set_offset_flag_zn(const std::string& value) {
  
  offset_flag_zn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TradeInfo::_internal_mutable_offset_flag_zn() {
  
  return offset_flag_zn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TradeInfo::release_offset_flag_zn() {
  // @@protoc_insertion_point(field_release:TradeInfo.offset_flag_zn)
  return offset_flag_zn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TradeInfo::set_allocated_offset_flag_zn(std::string* offset_flag_zn) {
  if (offset_flag_zn != nullptr) {
    
  } else {
    
  }
  offset_flag_zn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), offset_flag_zn,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (offset_flag_zn_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    offset_flag_zn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TradeInfo.offset_flag_zn)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_trade_2eproto
