// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: order.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_order_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_order_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_order_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_order_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_order_2eproto;
class OrderActionInfo;
struct OrderActionInfoDefaultTypeInternal;
extern OrderActionInfoDefaultTypeInternal _OrderActionInfo_default_instance_;
class OrderInfo;
struct OrderInfoDefaultTypeInternal;
extern OrderInfoDefaultTypeInternal _OrderInfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::OrderActionInfo* Arena::CreateMaybeMessage<::OrderActionInfo>(Arena*);
template<> ::OrderInfo* Arena::CreateMaybeMessage<::OrderInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class OrderInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OrderInfo) */ {
 public:
  inline OrderInfo() : OrderInfo(nullptr) {}
  ~OrderInfo() override;
  explicit constexpr OrderInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderInfo(const OrderInfo& from);
  OrderInfo(OrderInfo&& from) noexcept
    : OrderInfo() {
    *this = ::std::move(from);
  }

  inline OrderInfo& operator=(const OrderInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderInfo& operator=(OrderInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderInfo* internal_default_instance() {
    return reinterpret_cast<const OrderInfo*>(
               &_OrderInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OrderInfo& a, OrderInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OrderInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OrderInfo";
  }
  protected:
  explicit OrderInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrokerIdFieldNumber = 1,
    kInvestorIdFieldNumber = 2,
    kReserve1FieldNumber = 3,
    kOrderRefFieldNumber = 4,
    kUserIdFieldNumber = 5,
    kOrderPriceTypeFieldNumber = 6,
    kDirectionFieldNumber = 7,
    kCombOffsetFlagFieldNumber = 8,
    kCombHedgeFlagFieldNumber = 9,
    kTimeConditionFieldNumber = 12,
    kGtdDateFieldNumber = 13,
    kVolumeConditionFieldNumber = 14,
    kContingentConditionFieldNumber = 16,
    kForceCloseReasonFieldNumber = 18,
    kBusinessUnitFieldNumber = 20,
    kOrderLocalIdFieldNumber = 22,
    kExchangeIdFieldNumber = 23,
    kParticipantIdFieldNumber = 24,
    kClientIdFieldNumber = 25,
    kReserve2FieldNumber = 26,
    kTraderIdFieldNumber = 27,
    kOrderSubmitStatusFieldNumber = 29,
    kTradingDayFieldNumber = 31,
    kOrderSysIdFieldNumber = 33,
    kOrderSourceFieldNumber = 34,
    kOrderStatusFieldNumber = 35,
    kOrderTypeFieldNumber = 36,
    kInsertDateFieldNumber = 39,
    kInsertTimeFieldNumber = 40,
    kActiveTimeFieldNumber = 41,
    kSuspendTimeFieldNumber = 42,
    kUpdateTimeFieldNumber = 43,
    kCancelTimeFieldNumber = 44,
    kActiveTraderIdFieldNumber = 45,
    kClearingPartIdFieldNumber = 46,
    kUserProductInfoFieldNumber = 50,
    kStatusMsgFieldNumber = 51,
    kActiveUserIdFieldNumber = 53,
    kRelativeOrderSysIdFieldNumber = 55,
    kBranchIdFieldNumber = 58,
    kInvestUnitIdFieldNumber = 59,
    kAccountIdFieldNumber = 60,
    kCurrencyIdFieldNumber = 61,
    kReserve3FieldNumber = 62,
    kMacAddressFieldNumber = 63,
    kInstrumentIdFieldNumber = 64,
    kExchangeInstIdFieldNumber = 65,
    kIpAddressFieldNumber = 66,
    kDirectionZnFieldNumber = 67,
    kOrderStatusZnFieldNumber = 68,
    kStatusMsgZnFieldNumber = 69,
    kCombOffsetFlagZnFieldNumber = 70,
    kLimitPriceFieldNumber = 10,
    kVolumeTotalOriginalFieldNumber = 11,
    kMinVolumeFieldNumber = 15,
    kStopPriceFieldNumber = 17,
    kIsAutoSuspendFieldNumber = 19,
    kRequestIdFieldNumber = 21,
    kInstallIdFieldNumber = 28,
    kNotifySequenceFieldNumber = 30,
    kSettlementIdFieldNumber = 32,
    kVolumeTradedFieldNumber = 37,
    kVolumeTotalFieldNumber = 38,
    kSequenceNoFieldNumber = 47,
    kFrontIdFieldNumber = 48,
    kSessionIdFieldNumber = 49,
    kUserForceCloseFieldNumber = 52,
    kBrokerOrderSeqFieldNumber = 54,
    kZceTotalTradedVolumeFieldNumber = 56,
    kIsSwapOrderFieldNumber = 57,
  };
  // string broker_id = 1;
  void clear_broker_id();
  const std::string& broker_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_broker_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_broker_id();
  PROTOBUF_NODISCARD std::string* release_broker_id();
  void set_allocated_broker_id(std::string* broker_id);
  private:
  const std::string& _internal_broker_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_broker_id(const std::string& value);
  std::string* _internal_mutable_broker_id();
  public:

  // string investor_id = 2;
  void clear_investor_id();
  const std::string& investor_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_investor_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_investor_id();
  PROTOBUF_NODISCARD std::string* release_investor_id();
  void set_allocated_investor_id(std::string* investor_id);
  private:
  const std::string& _internal_investor_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_investor_id(const std::string& value);
  std::string* _internal_mutable_investor_id();
  public:

  // string reserve_1 = 3;
  void clear_reserve_1();
  const std::string& reserve_1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserve_1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserve_1();
  PROTOBUF_NODISCARD std::string* release_reserve_1();
  void set_allocated_reserve_1(std::string* reserve_1);
  private:
  const std::string& _internal_reserve_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserve_1(const std::string& value);
  std::string* _internal_mutable_reserve_1();
  public:

  // string order_ref = 4;
  void clear_order_ref();
  const std::string& order_ref() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_ref(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_ref();
  PROTOBUF_NODISCARD std::string* release_order_ref();
  void set_allocated_order_ref(std::string* order_ref);
  private:
  const std::string& _internal_order_ref() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_ref(const std::string& value);
  std::string* _internal_mutable_order_ref();
  public:

  // string user_id = 5;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string order_price_type = 6;
  void clear_order_price_type();
  const std::string& order_price_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_price_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_price_type();
  PROTOBUF_NODISCARD std::string* release_order_price_type();
  void set_allocated_order_price_type(std::string* order_price_type);
  private:
  const std::string& _internal_order_price_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_price_type(const std::string& value);
  std::string* _internal_mutable_order_price_type();
  public:

  // string direction = 7;
  void clear_direction();
  const std::string& direction() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_direction(ArgT0&& arg0, ArgT... args);
  std::string* mutable_direction();
  PROTOBUF_NODISCARD std::string* release_direction();
  void set_allocated_direction(std::string* direction);
  private:
  const std::string& _internal_direction() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_direction(const std::string& value);
  std::string* _internal_mutable_direction();
  public:

  // string comb_offset_flag = 8;
  void clear_comb_offset_flag();
  const std::string& comb_offset_flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_comb_offset_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_comb_offset_flag();
  PROTOBUF_NODISCARD std::string* release_comb_offset_flag();
  void set_allocated_comb_offset_flag(std::string* comb_offset_flag);
  private:
  const std::string& _internal_comb_offset_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comb_offset_flag(const std::string& value);
  std::string* _internal_mutable_comb_offset_flag();
  public:

  // string comb_hedge_flag = 9;
  void clear_comb_hedge_flag();
  const std::string& comb_hedge_flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_comb_hedge_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_comb_hedge_flag();
  PROTOBUF_NODISCARD std::string* release_comb_hedge_flag();
  void set_allocated_comb_hedge_flag(std::string* comb_hedge_flag);
  private:
  const std::string& _internal_comb_hedge_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comb_hedge_flag(const std::string& value);
  std::string* _internal_mutable_comb_hedge_flag();
  public:

  // string time_condition = 12;
  void clear_time_condition();
  const std::string& time_condition() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_time_condition(ArgT0&& arg0, ArgT... args);
  std::string* mutable_time_condition();
  PROTOBUF_NODISCARD std::string* release_time_condition();
  void set_allocated_time_condition(std::string* time_condition);
  private:
  const std::string& _internal_time_condition() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time_condition(const std::string& value);
  std::string* _internal_mutable_time_condition();
  public:

  // string gtd_date = 13;
  void clear_gtd_date();
  const std::string& gtd_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gtd_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gtd_date();
  PROTOBUF_NODISCARD std::string* release_gtd_date();
  void set_allocated_gtd_date(std::string* gtd_date);
  private:
  const std::string& _internal_gtd_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gtd_date(const std::string& value);
  std::string* _internal_mutable_gtd_date();
  public:

  // string volume_condition = 14;
  void clear_volume_condition();
  const std::string& volume_condition() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_volume_condition(ArgT0&& arg0, ArgT... args);
  std::string* mutable_volume_condition();
  PROTOBUF_NODISCARD std::string* release_volume_condition();
  void set_allocated_volume_condition(std::string* volume_condition);
  private:
  const std::string& _internal_volume_condition() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_volume_condition(const std::string& value);
  std::string* _internal_mutable_volume_condition();
  public:

  // string contingent_condition = 16;
  void clear_contingent_condition();
  const std::string& contingent_condition() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contingent_condition(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contingent_condition();
  PROTOBUF_NODISCARD std::string* release_contingent_condition();
  void set_allocated_contingent_condition(std::string* contingent_condition);
  private:
  const std::string& _internal_contingent_condition() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contingent_condition(const std::string& value);
  std::string* _internal_mutable_contingent_condition();
  public:

  // string force_close_reason = 18;
  void clear_force_close_reason();
  const std::string& force_close_reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_force_close_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_force_close_reason();
  PROTOBUF_NODISCARD std::string* release_force_close_reason();
  void set_allocated_force_close_reason(std::string* force_close_reason);
  private:
  const std::string& _internal_force_close_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_force_close_reason(const std::string& value);
  std::string* _internal_mutable_force_close_reason();
  public:

  // string business_unit = 20;
  void clear_business_unit();
  const std::string& business_unit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_business_unit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_business_unit();
  PROTOBUF_NODISCARD std::string* release_business_unit();
  void set_allocated_business_unit(std::string* business_unit);
  private:
  const std::string& _internal_business_unit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_business_unit(const std::string& value);
  std::string* _internal_mutable_business_unit();
  public:

  // string order_local_id = 22;
  void clear_order_local_id();
  const std::string& order_local_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_local_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_local_id();
  PROTOBUF_NODISCARD std::string* release_order_local_id();
  void set_allocated_order_local_id(std::string* order_local_id);
  private:
  const std::string& _internal_order_local_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_local_id(const std::string& value);
  std::string* _internal_mutable_order_local_id();
  public:

  // string exchange_id = 23;
  void clear_exchange_id();
  const std::string& exchange_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exchange_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exchange_id();
  PROTOBUF_NODISCARD std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* exchange_id);
  private:
  const std::string& _internal_exchange_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_id(const std::string& value);
  std::string* _internal_mutable_exchange_id();
  public:

  // string participant_id = 24;
  void clear_participant_id();
  const std::string& participant_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_participant_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_participant_id();
  PROTOBUF_NODISCARD std::string* release_participant_id();
  void set_allocated_participant_id(std::string* participant_id);
  private:
  const std::string& _internal_participant_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_participant_id(const std::string& value);
  std::string* _internal_mutable_participant_id();
  public:

  // string client_id = 25;
  void clear_client_id();
  const std::string& client_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string reserve_2 = 26;
  void clear_reserve_2();
  const std::string& reserve_2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserve_2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserve_2();
  PROTOBUF_NODISCARD std::string* release_reserve_2();
  void set_allocated_reserve_2(std::string* reserve_2);
  private:
  const std::string& _internal_reserve_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserve_2(const std::string& value);
  std::string* _internal_mutable_reserve_2();
  public:

  // string trader_id = 27;
  void clear_trader_id();
  const std::string& trader_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trader_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trader_id();
  PROTOBUF_NODISCARD std::string* release_trader_id();
  void set_allocated_trader_id(std::string* trader_id);
  private:
  const std::string& _internal_trader_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trader_id(const std::string& value);
  std::string* _internal_mutable_trader_id();
  public:

  // string order_submit_status = 29;
  void clear_order_submit_status();
  const std::string& order_submit_status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_submit_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_submit_status();
  PROTOBUF_NODISCARD std::string* release_order_submit_status();
  void set_allocated_order_submit_status(std::string* order_submit_status);
  private:
  const std::string& _internal_order_submit_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_submit_status(const std::string& value);
  std::string* _internal_mutable_order_submit_status();
  public:

  // string trading_day = 31;
  void clear_trading_day();
  const std::string& trading_day() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trading_day(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trading_day();
  PROTOBUF_NODISCARD std::string* release_trading_day();
  void set_allocated_trading_day(std::string* trading_day);
  private:
  const std::string& _internal_trading_day() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trading_day(const std::string& value);
  std::string* _internal_mutable_trading_day();
  public:

  // string order_sys_id = 33;
  void clear_order_sys_id();
  const std::string& order_sys_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_sys_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_sys_id();
  PROTOBUF_NODISCARD std::string* release_order_sys_id();
  void set_allocated_order_sys_id(std::string* order_sys_id);
  private:
  const std::string& _internal_order_sys_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_sys_id(const std::string& value);
  std::string* _internal_mutable_order_sys_id();
  public:

  // string order_source = 34;
  void clear_order_source();
  const std::string& order_source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_source();
  PROTOBUF_NODISCARD std::string* release_order_source();
  void set_allocated_order_source(std::string* order_source);
  private:
  const std::string& _internal_order_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_source(const std::string& value);
  std::string* _internal_mutable_order_source();
  public:

  // string order_status = 35;
  void clear_order_status();
  const std::string& order_status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_status();
  PROTOBUF_NODISCARD std::string* release_order_status();
  void set_allocated_order_status(std::string* order_status);
  private:
  const std::string& _internal_order_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_status(const std::string& value);
  std::string* _internal_mutable_order_status();
  public:

  // string order_type = 36;
  void clear_order_type();
  const std::string& order_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_type();
  PROTOBUF_NODISCARD std::string* release_order_type();
  void set_allocated_order_type(std::string* order_type);
  private:
  const std::string& _internal_order_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_type(const std::string& value);
  std::string* _internal_mutable_order_type();
  public:

  // string insert_date = 39;
  void clear_insert_date();
  const std::string& insert_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_insert_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_insert_date();
  PROTOBUF_NODISCARD std::string* release_insert_date();
  void set_allocated_insert_date(std::string* insert_date);
  private:
  const std::string& _internal_insert_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_insert_date(const std::string& value);
  std::string* _internal_mutable_insert_date();
  public:

  // string insert_time = 40;
  void clear_insert_time();
  const std::string& insert_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_insert_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_insert_time();
  PROTOBUF_NODISCARD std::string* release_insert_time();
  void set_allocated_insert_time(std::string* insert_time);
  private:
  const std::string& _internal_insert_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_insert_time(const std::string& value);
  std::string* _internal_mutable_insert_time();
  public:

  // string active_time = 41;
  void clear_active_time();
  const std::string& active_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_active_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_active_time();
  PROTOBUF_NODISCARD std::string* release_active_time();
  void set_allocated_active_time(std::string* active_time);
  private:
  const std::string& _internal_active_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_active_time(const std::string& value);
  std::string* _internal_mutable_active_time();
  public:

  // string suspend_time = 42;
  void clear_suspend_time();
  const std::string& suspend_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_suspend_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_suspend_time();
  PROTOBUF_NODISCARD std::string* release_suspend_time();
  void set_allocated_suspend_time(std::string* suspend_time);
  private:
  const std::string& _internal_suspend_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_suspend_time(const std::string& value);
  std::string* _internal_mutable_suspend_time();
  public:

  // string update_time = 43;
  void clear_update_time();
  const std::string& update_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_update_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_update_time();
  PROTOBUF_NODISCARD std::string* release_update_time();
  void set_allocated_update_time(std::string* update_time);
  private:
  const std::string& _internal_update_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_update_time(const std::string& value);
  std::string* _internal_mutable_update_time();
  public:

  // string cancel_time = 44;
  void clear_cancel_time();
  const std::string& cancel_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cancel_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cancel_time();
  PROTOBUF_NODISCARD std::string* release_cancel_time();
  void set_allocated_cancel_time(std::string* cancel_time);
  private:
  const std::string& _internal_cancel_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cancel_time(const std::string& value);
  std::string* _internal_mutable_cancel_time();
  public:

  // string active_trader_id = 45;
  void clear_active_trader_id();
  const std::string& active_trader_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_active_trader_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_active_trader_id();
  PROTOBUF_NODISCARD std::string* release_active_trader_id();
  void set_allocated_active_trader_id(std::string* active_trader_id);
  private:
  const std::string& _internal_active_trader_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_active_trader_id(const std::string& value);
  std::string* _internal_mutable_active_trader_id();
  public:

  // string clearing_part_id = 46;
  void clear_clearing_part_id();
  const std::string& clearing_part_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clearing_part_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clearing_part_id();
  PROTOBUF_NODISCARD std::string* release_clearing_part_id();
  void set_allocated_clearing_part_id(std::string* clearing_part_id);
  private:
  const std::string& _internal_clearing_part_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clearing_part_id(const std::string& value);
  std::string* _internal_mutable_clearing_part_id();
  public:

  // string user_product_info = 50;
  void clear_user_product_info();
  const std::string& user_product_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_product_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_product_info();
  PROTOBUF_NODISCARD std::string* release_user_product_info();
  void set_allocated_user_product_info(std::string* user_product_info);
  private:
  const std::string& _internal_user_product_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_product_info(const std::string& value);
  std::string* _internal_mutable_user_product_info();
  public:

  // string status_msg = 51;
  void clear_status_msg();
  const std::string& status_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status_msg();
  PROTOBUF_NODISCARD std::string* release_status_msg();
  void set_allocated_status_msg(std::string* status_msg);
  private:
  const std::string& _internal_status_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status_msg(const std::string& value);
  std::string* _internal_mutable_status_msg();
  public:

  // string active_user_id = 53;
  void clear_active_user_id();
  const std::string& active_user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_active_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_active_user_id();
  PROTOBUF_NODISCARD std::string* release_active_user_id();
  void set_allocated_active_user_id(std::string* active_user_id);
  private:
  const std::string& _internal_active_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_active_user_id(const std::string& value);
  std::string* _internal_mutable_active_user_id();
  public:

  // string relative_order_sys_id = 55;
  void clear_relative_order_sys_id();
  const std::string& relative_order_sys_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_relative_order_sys_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_relative_order_sys_id();
  PROTOBUF_NODISCARD std::string* release_relative_order_sys_id();
  void set_allocated_relative_order_sys_id(std::string* relative_order_sys_id);
  private:
  const std::string& _internal_relative_order_sys_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relative_order_sys_id(const std::string& value);
  std::string* _internal_mutable_relative_order_sys_id();
  public:

  // string branch_id = 58;
  void clear_branch_id();
  const std::string& branch_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_branch_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_branch_id();
  PROTOBUF_NODISCARD std::string* release_branch_id();
  void set_allocated_branch_id(std::string* branch_id);
  private:
  const std::string& _internal_branch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_branch_id(const std::string& value);
  std::string* _internal_mutable_branch_id();
  public:

  // string invest_unit_id = 59;
  void clear_invest_unit_id();
  const std::string& invest_unit_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_invest_unit_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_invest_unit_id();
  PROTOBUF_NODISCARD std::string* release_invest_unit_id();
  void set_allocated_invest_unit_id(std::string* invest_unit_id);
  private:
  const std::string& _internal_invest_unit_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_invest_unit_id(const std::string& value);
  std::string* _internal_mutable_invest_unit_id();
  public:

  // string account_id = 60;
  void clear_account_id();
  const std::string& account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // string currency_id = 61;
  void clear_currency_id();
  const std::string& currency_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency_id();
  PROTOBUF_NODISCARD std::string* release_currency_id();
  void set_allocated_currency_id(std::string* currency_id);
  private:
  const std::string& _internal_currency_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency_id(const std::string& value);
  std::string* _internal_mutable_currency_id();
  public:

  // string reserve_3 = 62;
  void clear_reserve_3();
  const std::string& reserve_3() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserve_3(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserve_3();
  PROTOBUF_NODISCARD std::string* release_reserve_3();
  void set_allocated_reserve_3(std::string* reserve_3);
  private:
  const std::string& _internal_reserve_3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserve_3(const std::string& value);
  std::string* _internal_mutable_reserve_3();
  public:

  // string mac_address = 63;
  void clear_mac_address();
  const std::string& mac_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mac_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mac_address();
  PROTOBUF_NODISCARD std::string* release_mac_address();
  void set_allocated_mac_address(std::string* mac_address);
  private:
  const std::string& _internal_mac_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mac_address(const std::string& value);
  std::string* _internal_mutable_mac_address();
  public:

  // string instrument_id = 64;
  void clear_instrument_id();
  const std::string& instrument_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_id();
  PROTOBUF_NODISCARD std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* instrument_id);
  private:
  const std::string& _internal_instrument_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(const std::string& value);
  std::string* _internal_mutable_instrument_id();
  public:

  // string exchange_inst_id = 65;
  void clear_exchange_inst_id();
  const std::string& exchange_inst_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exchange_inst_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exchange_inst_id();
  PROTOBUF_NODISCARD std::string* release_exchange_inst_id();
  void set_allocated_exchange_inst_id(std::string* exchange_inst_id);
  private:
  const std::string& _internal_exchange_inst_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_inst_id(const std::string& value);
  std::string* _internal_mutable_exchange_inst_id();
  public:

  // string ip_address = 66;
  void clear_ip_address();
  const std::string& ip_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip_address();
  PROTOBUF_NODISCARD std::string* release_ip_address();
  void set_allocated_ip_address(std::string* ip_address);
  private:
  const std::string& _internal_ip_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip_address(const std::string& value);
  std::string* _internal_mutable_ip_address();
  public:

  // string direction_zn = 67;
  void clear_direction_zn();
  const std::string& direction_zn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_direction_zn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_direction_zn();
  PROTOBUF_NODISCARD std::string* release_direction_zn();
  void set_allocated_direction_zn(std::string* direction_zn);
  private:
  const std::string& _internal_direction_zn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_direction_zn(const std::string& value);
  std::string* _internal_mutable_direction_zn();
  public:

  // string order_status_zn = 68;
  void clear_order_status_zn();
  const std::string& order_status_zn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_status_zn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_status_zn();
  PROTOBUF_NODISCARD std::string* release_order_status_zn();
  void set_allocated_order_status_zn(std::string* order_status_zn);
  private:
  const std::string& _internal_order_status_zn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_status_zn(const std::string& value);
  std::string* _internal_mutable_order_status_zn();
  public:

  // string status_msg_zn = 69;
  void clear_status_msg_zn();
  const std::string& status_msg_zn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status_msg_zn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status_msg_zn();
  PROTOBUF_NODISCARD std::string* release_status_msg_zn();
  void set_allocated_status_msg_zn(std::string* status_msg_zn);
  private:
  const std::string& _internal_status_msg_zn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status_msg_zn(const std::string& value);
  std::string* _internal_mutable_status_msg_zn();
  public:

  // string comb_offset_flag_zn = 70;
  void clear_comb_offset_flag_zn();
  const std::string& comb_offset_flag_zn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_comb_offset_flag_zn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_comb_offset_flag_zn();
  PROTOBUF_NODISCARD std::string* release_comb_offset_flag_zn();
  void set_allocated_comb_offset_flag_zn(std::string* comb_offset_flag_zn);
  private:
  const std::string& _internal_comb_offset_flag_zn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comb_offset_flag_zn(const std::string& value);
  std::string* _internal_mutable_comb_offset_flag_zn();
  public:

  // double limit_price = 10;
  void clear_limit_price();
  double limit_price() const;
  void set_limit_price(double value);
  private:
  double _internal_limit_price() const;
  void _internal_set_limit_price(double value);
  public:

  // int32 volume_total_original = 11;
  void clear_volume_total_original();
  int32_t volume_total_original() const;
  void set_volume_total_original(int32_t value);
  private:
  int32_t _internal_volume_total_original() const;
  void _internal_set_volume_total_original(int32_t value);
  public:

  // int32 min_volume = 15;
  void clear_min_volume();
  int32_t min_volume() const;
  void set_min_volume(int32_t value);
  private:
  int32_t _internal_min_volume() const;
  void _internal_set_min_volume(int32_t value);
  public:

  // double stop_price = 17;
  void clear_stop_price();
  double stop_price() const;
  void set_stop_price(double value);
  private:
  double _internal_stop_price() const;
  void _internal_set_stop_price(double value);
  public:

  // int32 is_auto_suspend = 19;
  void clear_is_auto_suspend();
  int32_t is_auto_suspend() const;
  void set_is_auto_suspend(int32_t value);
  private:
  int32_t _internal_is_auto_suspend() const;
  void _internal_set_is_auto_suspend(int32_t value);
  public:

  // int32 request_id = 21;
  void clear_request_id();
  int32_t request_id() const;
  void set_request_id(int32_t value);
  private:
  int32_t _internal_request_id() const;
  void _internal_set_request_id(int32_t value);
  public:

  // int32 install_id = 28;
  void clear_install_id();
  int32_t install_id() const;
  void set_install_id(int32_t value);
  private:
  int32_t _internal_install_id() const;
  void _internal_set_install_id(int32_t value);
  public:

  // int32 notify_sequence = 30;
  void clear_notify_sequence();
  int32_t notify_sequence() const;
  void set_notify_sequence(int32_t value);
  private:
  int32_t _internal_notify_sequence() const;
  void _internal_set_notify_sequence(int32_t value);
  public:

  // int32 settlement_id = 32;
  void clear_settlement_id();
  int32_t settlement_id() const;
  void set_settlement_id(int32_t value);
  private:
  int32_t _internal_settlement_id() const;
  void _internal_set_settlement_id(int32_t value);
  public:

  // int32 volume_traded = 37;
  void clear_volume_traded();
  int32_t volume_traded() const;
  void set_volume_traded(int32_t value);
  private:
  int32_t _internal_volume_traded() const;
  void _internal_set_volume_traded(int32_t value);
  public:

  // int32 volume_total = 38;
  void clear_volume_total();
  int32_t volume_total() const;
  void set_volume_total(int32_t value);
  private:
  int32_t _internal_volume_total() const;
  void _internal_set_volume_total(int32_t value);
  public:

  // int32 sequence_no = 47;
  void clear_sequence_no();
  int32_t sequence_no() const;
  void set_sequence_no(int32_t value);
  private:
  int32_t _internal_sequence_no() const;
  void _internal_set_sequence_no(int32_t value);
  public:

  // int32 front_id = 48;
  void clear_front_id();
  int32_t front_id() const;
  void set_front_id(int32_t value);
  private:
  int32_t _internal_front_id() const;
  void _internal_set_front_id(int32_t value);
  public:

  // int32 session_id = 49;
  void clear_session_id();
  int32_t session_id() const;
  void set_session_id(int32_t value);
  private:
  int32_t _internal_session_id() const;
  void _internal_set_session_id(int32_t value);
  public:

  // int32 user_force_close = 52;
  void clear_user_force_close();
  int32_t user_force_close() const;
  void set_user_force_close(int32_t value);
  private:
  int32_t _internal_user_force_close() const;
  void _internal_set_user_force_close(int32_t value);
  public:

  // int32 broker_order_seq = 54;
  void clear_broker_order_seq();
  int32_t broker_order_seq() const;
  void set_broker_order_seq(int32_t value);
  private:
  int32_t _internal_broker_order_seq() const;
  void _internal_set_broker_order_seq(int32_t value);
  public:

  // int32 zce_total_traded_volume = 56;
  void clear_zce_total_traded_volume();
  int32_t zce_total_traded_volume() const;
  void set_zce_total_traded_volume(int32_t value);
  private:
  int32_t _internal_zce_total_traded_volume() const;
  void _internal_set_zce_total_traded_volume(int32_t value);
  public:

  // int32 is_swap_order = 57;
  void clear_is_swap_order();
  int32_t is_swap_order() const;
  void set_is_swap_order(int32_t value);
  private:
  int32_t _internal_is_swap_order() const;
  void _internal_set_is_swap_order(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:OrderInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broker_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr investor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserve_1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_ref_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_price_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr direction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comb_offset_flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comb_hedge_flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_condition_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gtd_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_condition_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contingent_condition_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr force_close_reason_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr business_unit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_local_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr participant_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserve_2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trader_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_submit_status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trading_day_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_sys_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr insert_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr insert_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr active_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suspend_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr update_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cancel_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr active_trader_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clearing_part_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_product_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr active_user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relative_order_sys_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr branch_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invest_unit_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserve_3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_inst_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr direction_zn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_status_zn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_msg_zn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comb_offset_flag_zn_;
  double limit_price_;
  int32_t volume_total_original_;
  int32_t min_volume_;
  double stop_price_;
  int32_t is_auto_suspend_;
  int32_t request_id_;
  int32_t install_id_;
  int32_t notify_sequence_;
  int32_t settlement_id_;
  int32_t volume_traded_;
  int32_t volume_total_;
  int32_t sequence_no_;
  int32_t front_id_;
  int32_t session_id_;
  int32_t user_force_close_;
  int32_t broker_order_seq_;
  int32_t zce_total_traded_volume_;
  int32_t is_swap_order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class OrderActionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OrderActionInfo) */ {
 public:
  inline OrderActionInfo() : OrderActionInfo(nullptr) {}
  ~OrderActionInfo() override;
  explicit constexpr OrderActionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderActionInfo(const OrderActionInfo& from);
  OrderActionInfo(OrderActionInfo&& from) noexcept
    : OrderActionInfo() {
    *this = ::std::move(from);
  }

  inline OrderActionInfo& operator=(const OrderActionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderActionInfo& operator=(OrderActionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderActionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderActionInfo* internal_default_instance() {
    return reinterpret_cast<const OrderActionInfo*>(
               &_OrderActionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OrderActionInfo& a, OrderActionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderActionInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderActionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderActionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderActionInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderActionInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OrderActionInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderActionInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OrderActionInfo";
  }
  protected:
  explicit OrderActionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrokerIdFieldNumber = 1,
    kInvestorIdFieldNumber = 2,
    kOrderRefFieldNumber = 4,
    kExchangeIdFieldNumber = 8,
    kOrderSysIdFieldNumber = 9,
    kActionFlagFieldNumber = 10,
    kActionDateFieldNumber = 13,
    kActionTimeFieldNumber = 14,
    kTraderIdFieldNumber = 15,
    kOrderLocalIdFieldNumber = 17,
    kActionLocalIdFieldNumber = 18,
    kParticipantIdFieldNumber = 19,
    kClientIdFieldNumber = 20,
    kBusinessUnitFieldNumber = 21,
    kOrderActionStatusFieldNumber = 22,
    kUserIdFieldNumber = 23,
    kStatusMsgFieldNumber = 24,
    kReserve1FieldNumber = 25,
    kBranchIdFieldNumber = 26,
    kInvestUnitIdFieldNumber = 27,
    kReserve2FieldNumber = 28,
    kMacAddressFieldNumber = 29,
    kInstrumentIdFieldNumber = 30,
    kIpAddressFieldNumber = 31,
    kDirectionZnFieldNumber = 32,
    kOrderStatusZnFieldNumber = 33,
    kCombOffsetFlagZnFieldNumber = 34,
    kOrderActionRefFieldNumber = 3,
    kRequestIdFieldNumber = 5,
    kFrontIdFieldNumber = 6,
    kSessionIdFieldNumber = 7,
    kLimitPriceFieldNumber = 11,
    kVolumeChangeFieldNumber = 12,
    kInstallIdFieldNumber = 16,
  };
  // string broker_id = 1;
  void clear_broker_id();
  const std::string& broker_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_broker_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_broker_id();
  PROTOBUF_NODISCARD std::string* release_broker_id();
  void set_allocated_broker_id(std::string* broker_id);
  private:
  const std::string& _internal_broker_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_broker_id(const std::string& value);
  std::string* _internal_mutable_broker_id();
  public:

  // string investor_id = 2;
  void clear_investor_id();
  const std::string& investor_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_investor_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_investor_id();
  PROTOBUF_NODISCARD std::string* release_investor_id();
  void set_allocated_investor_id(std::string* investor_id);
  private:
  const std::string& _internal_investor_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_investor_id(const std::string& value);
  std::string* _internal_mutable_investor_id();
  public:

  // string order_ref = 4;
  void clear_order_ref();
  const std::string& order_ref() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_ref(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_ref();
  PROTOBUF_NODISCARD std::string* release_order_ref();
  void set_allocated_order_ref(std::string* order_ref);
  private:
  const std::string& _internal_order_ref() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_ref(const std::string& value);
  std::string* _internal_mutable_order_ref();
  public:

  // string exchange_id = 8;
  void clear_exchange_id();
  const std::string& exchange_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exchange_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exchange_id();
  PROTOBUF_NODISCARD std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* exchange_id);
  private:
  const std::string& _internal_exchange_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_id(const std::string& value);
  std::string* _internal_mutable_exchange_id();
  public:

  // string order_sys_id = 9;
  void clear_order_sys_id();
  const std::string& order_sys_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_sys_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_sys_id();
  PROTOBUF_NODISCARD std::string* release_order_sys_id();
  void set_allocated_order_sys_id(std::string* order_sys_id);
  private:
  const std::string& _internal_order_sys_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_sys_id(const std::string& value);
  std::string* _internal_mutable_order_sys_id();
  public:

  // string action_flag = 10;
  void clear_action_flag();
  const std::string& action_flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action_flag();
  PROTOBUF_NODISCARD std::string* release_action_flag();
  void set_allocated_action_flag(std::string* action_flag);
  private:
  const std::string& _internal_action_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action_flag(const std::string& value);
  std::string* _internal_mutable_action_flag();
  public:

  // string action_date = 13;
  void clear_action_date();
  const std::string& action_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action_date();
  PROTOBUF_NODISCARD std::string* release_action_date();
  void set_allocated_action_date(std::string* action_date);
  private:
  const std::string& _internal_action_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action_date(const std::string& value);
  std::string* _internal_mutable_action_date();
  public:

  // string action_time = 14;
  void clear_action_time();
  const std::string& action_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action_time();
  PROTOBUF_NODISCARD std::string* release_action_time();
  void set_allocated_action_time(std::string* action_time);
  private:
  const std::string& _internal_action_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action_time(const std::string& value);
  std::string* _internal_mutable_action_time();
  public:

  // string trader_id = 15;
  void clear_trader_id();
  const std::string& trader_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trader_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trader_id();
  PROTOBUF_NODISCARD std::string* release_trader_id();
  void set_allocated_trader_id(std::string* trader_id);
  private:
  const std::string& _internal_trader_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trader_id(const std::string& value);
  std::string* _internal_mutable_trader_id();
  public:

  // string order_local_id = 17;
  void clear_order_local_id();
  const std::string& order_local_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_local_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_local_id();
  PROTOBUF_NODISCARD std::string* release_order_local_id();
  void set_allocated_order_local_id(std::string* order_local_id);
  private:
  const std::string& _internal_order_local_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_local_id(const std::string& value);
  std::string* _internal_mutable_order_local_id();
  public:

  // string action_local_id = 18;
  void clear_action_local_id();
  const std::string& action_local_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action_local_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action_local_id();
  PROTOBUF_NODISCARD std::string* release_action_local_id();
  void set_allocated_action_local_id(std::string* action_local_id);
  private:
  const std::string& _internal_action_local_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action_local_id(const std::string& value);
  std::string* _internal_mutable_action_local_id();
  public:

  // string participant_id = 19;
  void clear_participant_id();
  const std::string& participant_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_participant_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_participant_id();
  PROTOBUF_NODISCARD std::string* release_participant_id();
  void set_allocated_participant_id(std::string* participant_id);
  private:
  const std::string& _internal_participant_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_participant_id(const std::string& value);
  std::string* _internal_mutable_participant_id();
  public:

  // string client_id = 20;
  void clear_client_id();
  const std::string& client_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string business_unit = 21;
  void clear_business_unit();
  const std::string& business_unit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_business_unit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_business_unit();
  PROTOBUF_NODISCARD std::string* release_business_unit();
  void set_allocated_business_unit(std::string* business_unit);
  private:
  const std::string& _internal_business_unit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_business_unit(const std::string& value);
  std::string* _internal_mutable_business_unit();
  public:

  // string order_action_status = 22;
  void clear_order_action_status();
  const std::string& order_action_status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_action_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_action_status();
  PROTOBUF_NODISCARD std::string* release_order_action_status();
  void set_allocated_order_action_status(std::string* order_action_status);
  private:
  const std::string& _internal_order_action_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_action_status(const std::string& value);
  std::string* _internal_mutable_order_action_status();
  public:

  // string user_id = 23;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string status_msg = 24;
  void clear_status_msg();
  const std::string& status_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status_msg();
  PROTOBUF_NODISCARD std::string* release_status_msg();
  void set_allocated_status_msg(std::string* status_msg);
  private:
  const std::string& _internal_status_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status_msg(const std::string& value);
  std::string* _internal_mutable_status_msg();
  public:

  // string reserve_1 = 25;
  void clear_reserve_1();
  const std::string& reserve_1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserve_1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserve_1();
  PROTOBUF_NODISCARD std::string* release_reserve_1();
  void set_allocated_reserve_1(std::string* reserve_1);
  private:
  const std::string& _internal_reserve_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserve_1(const std::string& value);
  std::string* _internal_mutable_reserve_1();
  public:

  // string branch_id = 26;
  void clear_branch_id();
  const std::string& branch_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_branch_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_branch_id();
  PROTOBUF_NODISCARD std::string* release_branch_id();
  void set_allocated_branch_id(std::string* branch_id);
  private:
  const std::string& _internal_branch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_branch_id(const std::string& value);
  std::string* _internal_mutable_branch_id();
  public:

  // string invest_unit_id = 27;
  void clear_invest_unit_id();
  const std::string& invest_unit_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_invest_unit_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_invest_unit_id();
  PROTOBUF_NODISCARD std::string* release_invest_unit_id();
  void set_allocated_invest_unit_id(std::string* invest_unit_id);
  private:
  const std::string& _internal_invest_unit_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_invest_unit_id(const std::string& value);
  std::string* _internal_mutable_invest_unit_id();
  public:

  // string reserve_2 = 28;
  void clear_reserve_2();
  const std::string& reserve_2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserve_2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserve_2();
  PROTOBUF_NODISCARD std::string* release_reserve_2();
  void set_allocated_reserve_2(std::string* reserve_2);
  private:
  const std::string& _internal_reserve_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserve_2(const std::string& value);
  std::string* _internal_mutable_reserve_2();
  public:

  // string mac_address = 29;
  void clear_mac_address();
  const std::string& mac_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mac_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mac_address();
  PROTOBUF_NODISCARD std::string* release_mac_address();
  void set_allocated_mac_address(std::string* mac_address);
  private:
  const std::string& _internal_mac_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mac_address(const std::string& value);
  std::string* _internal_mutable_mac_address();
  public:

  // string instrument_id = 30;
  void clear_instrument_id();
  const std::string& instrument_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_id();
  PROTOBUF_NODISCARD std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* instrument_id);
  private:
  const std::string& _internal_instrument_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(const std::string& value);
  std::string* _internal_mutable_instrument_id();
  public:

  // string ip_address = 31;
  void clear_ip_address();
  const std::string& ip_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip_address();
  PROTOBUF_NODISCARD std::string* release_ip_address();
  void set_allocated_ip_address(std::string* ip_address);
  private:
  const std::string& _internal_ip_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip_address(const std::string& value);
  std::string* _internal_mutable_ip_address();
  public:

  // string direction_zn = 32;
  void clear_direction_zn();
  const std::string& direction_zn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_direction_zn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_direction_zn();
  PROTOBUF_NODISCARD std::string* release_direction_zn();
  void set_allocated_direction_zn(std::string* direction_zn);
  private:
  const std::string& _internal_direction_zn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_direction_zn(const std::string& value);
  std::string* _internal_mutable_direction_zn();
  public:

  // string order_status_zn = 33;
  void clear_order_status_zn();
  const std::string& order_status_zn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_status_zn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_status_zn();
  PROTOBUF_NODISCARD std::string* release_order_status_zn();
  void set_allocated_order_status_zn(std::string* order_status_zn);
  private:
  const std::string& _internal_order_status_zn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_status_zn(const std::string& value);
  std::string* _internal_mutable_order_status_zn();
  public:

  // string comb_offset_flag_zn = 34;
  void clear_comb_offset_flag_zn();
  const std::string& comb_offset_flag_zn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_comb_offset_flag_zn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_comb_offset_flag_zn();
  PROTOBUF_NODISCARD std::string* release_comb_offset_flag_zn();
  void set_allocated_comb_offset_flag_zn(std::string* comb_offset_flag_zn);
  private:
  const std::string& _internal_comb_offset_flag_zn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comb_offset_flag_zn(const std::string& value);
  std::string* _internal_mutable_comb_offset_flag_zn();
  public:

  // int32 order_action_ref = 3;
  void clear_order_action_ref();
  int32_t order_action_ref() const;
  void set_order_action_ref(int32_t value);
  private:
  int32_t _internal_order_action_ref() const;
  void _internal_set_order_action_ref(int32_t value);
  public:

  // int32 request_id = 5;
  void clear_request_id();
  int32_t request_id() const;
  void set_request_id(int32_t value);
  private:
  int32_t _internal_request_id() const;
  void _internal_set_request_id(int32_t value);
  public:

  // int32 front_id = 6;
  void clear_front_id();
  int32_t front_id() const;
  void set_front_id(int32_t value);
  private:
  int32_t _internal_front_id() const;
  void _internal_set_front_id(int32_t value);
  public:

  // int32 session_id = 7;
  void clear_session_id();
  int32_t session_id() const;
  void set_session_id(int32_t value);
  private:
  int32_t _internal_session_id() const;
  void _internal_set_session_id(int32_t value);
  public:

  // double limit_price = 11;
  void clear_limit_price();
  double limit_price() const;
  void set_limit_price(double value);
  private:
  double _internal_limit_price() const;
  void _internal_set_limit_price(double value);
  public:

  // int32 volume_change = 12;
  void clear_volume_change();
  int32_t volume_change() const;
  void set_volume_change(int32_t value);
  private:
  int32_t _internal_volume_change() const;
  void _internal_set_volume_change(int32_t value);
  public:

  // int32 install_id = 16;
  void clear_install_id();
  int32_t install_id() const;
  void set_install_id(int32_t value);
  private:
  int32_t _internal_install_id() const;
  void _internal_set_install_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:OrderActionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broker_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr investor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_ref_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_sys_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trader_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_local_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_local_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr participant_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr business_unit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_action_status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserve_1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr branch_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invest_unit_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserve_2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr direction_zn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_status_zn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comb_offset_flag_zn_;
  int32_t order_action_ref_;
  int32_t request_id_;
  int32_t front_id_;
  int32_t session_id_;
  double limit_price_;
  int32_t volume_change_;
  int32_t install_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OrderInfo

// string broker_id = 1;
inline void OrderInfo::clear_broker_id() {
  broker_id_.ClearToEmpty();
}
inline const std::string& OrderInfo::broker_id() const {
  // @@protoc_insertion_point(field_get:OrderInfo.broker_id)
  return _internal_broker_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_broker_id(ArgT0&& arg0, ArgT... args) {
 
 broker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.broker_id)
}
inline std::string* OrderInfo::mutable_broker_id() {
  std::string* _s = _internal_mutable_broker_id();
  // @@protoc_insertion_point(field_mutable:OrderInfo.broker_id)
  return _s;
}
inline const std::string& OrderInfo::_internal_broker_id() const {
  return broker_id_.Get();
}
inline void OrderInfo::_internal_set_broker_id(const std::string& value) {
  
  broker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_broker_id() {
  
  return broker_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_broker_id() {
  // @@protoc_insertion_point(field_release:OrderInfo.broker_id)
  return broker_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_broker_id(std::string* broker_id) {
  if (broker_id != nullptr) {
    
  } else {
    
  }
  broker_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), broker_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (broker_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    broker_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.broker_id)
}

// string investor_id = 2;
inline void OrderInfo::clear_investor_id() {
  investor_id_.ClearToEmpty();
}
inline const std::string& OrderInfo::investor_id() const {
  // @@protoc_insertion_point(field_get:OrderInfo.investor_id)
  return _internal_investor_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_investor_id(ArgT0&& arg0, ArgT... args) {
 
 investor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.investor_id)
}
inline std::string* OrderInfo::mutable_investor_id() {
  std::string* _s = _internal_mutable_investor_id();
  // @@protoc_insertion_point(field_mutable:OrderInfo.investor_id)
  return _s;
}
inline const std::string& OrderInfo::_internal_investor_id() const {
  return investor_id_.Get();
}
inline void OrderInfo::_internal_set_investor_id(const std::string& value) {
  
  investor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_investor_id() {
  
  return investor_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_investor_id() {
  // @@protoc_insertion_point(field_release:OrderInfo.investor_id)
  return investor_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_investor_id(std::string* investor_id) {
  if (investor_id != nullptr) {
    
  } else {
    
  }
  investor_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), investor_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (investor_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    investor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.investor_id)
}

// string reserve_1 = 3;
inline void OrderInfo::clear_reserve_1() {
  reserve_1_.ClearToEmpty();
}
inline const std::string& OrderInfo::reserve_1() const {
  // @@protoc_insertion_point(field_get:OrderInfo.reserve_1)
  return _internal_reserve_1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_reserve_1(ArgT0&& arg0, ArgT... args) {
 
 reserve_1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.reserve_1)
}
inline std::string* OrderInfo::mutable_reserve_1() {
  std::string* _s = _internal_mutable_reserve_1();
  // @@protoc_insertion_point(field_mutable:OrderInfo.reserve_1)
  return _s;
}
inline const std::string& OrderInfo::_internal_reserve_1() const {
  return reserve_1_.Get();
}
inline void OrderInfo::_internal_set_reserve_1(const std::string& value) {
  
  reserve_1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_reserve_1() {
  
  return reserve_1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_reserve_1() {
  // @@protoc_insertion_point(field_release:OrderInfo.reserve_1)
  return reserve_1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_reserve_1(std::string* reserve_1) {
  if (reserve_1 != nullptr) {
    
  } else {
    
  }
  reserve_1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reserve_1,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reserve_1_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reserve_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.reserve_1)
}

// string order_ref = 4;
inline void OrderInfo::clear_order_ref() {
  order_ref_.ClearToEmpty();
}
inline const std::string& OrderInfo::order_ref() const {
  // @@protoc_insertion_point(field_get:OrderInfo.order_ref)
  return _internal_order_ref();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_order_ref(ArgT0&& arg0, ArgT... args) {
 
 order_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.order_ref)
}
inline std::string* OrderInfo::mutable_order_ref() {
  std::string* _s = _internal_mutable_order_ref();
  // @@protoc_insertion_point(field_mutable:OrderInfo.order_ref)
  return _s;
}
inline const std::string& OrderInfo::_internal_order_ref() const {
  return order_ref_.Get();
}
inline void OrderInfo::_internal_set_order_ref(const std::string& value) {
  
  order_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_order_ref() {
  
  return order_ref_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_order_ref() {
  // @@protoc_insertion_point(field_release:OrderInfo.order_ref)
  return order_ref_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_order_ref(std::string* order_ref) {
  if (order_ref != nullptr) {
    
  } else {
    
  }
  order_ref_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_ref,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_ref_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    order_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.order_ref)
}

// string user_id = 5;
inline void OrderInfo::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& OrderInfo::user_id() const {
  // @@protoc_insertion_point(field_get:OrderInfo.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.user_id)
}
inline std::string* OrderInfo::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:OrderInfo.user_id)
  return _s;
}
inline const std::string& OrderInfo::_internal_user_id() const {
  return user_id_.Get();
}
inline void OrderInfo::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_user_id() {
  // @@protoc_insertion_point(field_release:OrderInfo.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.user_id)
}

// string order_price_type = 6;
inline void OrderInfo::clear_order_price_type() {
  order_price_type_.ClearToEmpty();
}
inline const std::string& OrderInfo::order_price_type() const {
  // @@protoc_insertion_point(field_get:OrderInfo.order_price_type)
  return _internal_order_price_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_order_price_type(ArgT0&& arg0, ArgT... args) {
 
 order_price_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.order_price_type)
}
inline std::string* OrderInfo::mutable_order_price_type() {
  std::string* _s = _internal_mutable_order_price_type();
  // @@protoc_insertion_point(field_mutable:OrderInfo.order_price_type)
  return _s;
}
inline const std::string& OrderInfo::_internal_order_price_type() const {
  return order_price_type_.Get();
}
inline void OrderInfo::_internal_set_order_price_type(const std::string& value) {
  
  order_price_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_order_price_type() {
  
  return order_price_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_order_price_type() {
  // @@protoc_insertion_point(field_release:OrderInfo.order_price_type)
  return order_price_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_order_price_type(std::string* order_price_type) {
  if (order_price_type != nullptr) {
    
  } else {
    
  }
  order_price_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_price_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_price_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    order_price_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.order_price_type)
}

// string direction = 7;
inline void OrderInfo::clear_direction() {
  direction_.ClearToEmpty();
}
inline const std::string& OrderInfo::direction() const {
  // @@protoc_insertion_point(field_get:OrderInfo.direction)
  return _internal_direction();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_direction(ArgT0&& arg0, ArgT... args) {
 
 direction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.direction)
}
inline std::string* OrderInfo::mutable_direction() {
  std::string* _s = _internal_mutable_direction();
  // @@protoc_insertion_point(field_mutable:OrderInfo.direction)
  return _s;
}
inline const std::string& OrderInfo::_internal_direction() const {
  return direction_.Get();
}
inline void OrderInfo::_internal_set_direction(const std::string& value) {
  
  direction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_direction() {
  
  return direction_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_direction() {
  // @@protoc_insertion_point(field_release:OrderInfo.direction)
  return direction_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_direction(std::string* direction) {
  if (direction != nullptr) {
    
  } else {
    
  }
  direction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), direction,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (direction_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    direction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.direction)
}

// string comb_offset_flag = 8;
inline void OrderInfo::clear_comb_offset_flag() {
  comb_offset_flag_.ClearToEmpty();
}
inline const std::string& OrderInfo::comb_offset_flag() const {
  // @@protoc_insertion_point(field_get:OrderInfo.comb_offset_flag)
  return _internal_comb_offset_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_comb_offset_flag(ArgT0&& arg0, ArgT... args) {
 
 comb_offset_flag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.comb_offset_flag)
}
inline std::string* OrderInfo::mutable_comb_offset_flag() {
  std::string* _s = _internal_mutable_comb_offset_flag();
  // @@protoc_insertion_point(field_mutable:OrderInfo.comb_offset_flag)
  return _s;
}
inline const std::string& OrderInfo::_internal_comb_offset_flag() const {
  return comb_offset_flag_.Get();
}
inline void OrderInfo::_internal_set_comb_offset_flag(const std::string& value) {
  
  comb_offset_flag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_comb_offset_flag() {
  
  return comb_offset_flag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_comb_offset_flag() {
  // @@protoc_insertion_point(field_release:OrderInfo.comb_offset_flag)
  return comb_offset_flag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_comb_offset_flag(std::string* comb_offset_flag) {
  if (comb_offset_flag != nullptr) {
    
  } else {
    
  }
  comb_offset_flag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comb_offset_flag,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (comb_offset_flag_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    comb_offset_flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.comb_offset_flag)
}

// string comb_hedge_flag = 9;
inline void OrderInfo::clear_comb_hedge_flag() {
  comb_hedge_flag_.ClearToEmpty();
}
inline const std::string& OrderInfo::comb_hedge_flag() const {
  // @@protoc_insertion_point(field_get:OrderInfo.comb_hedge_flag)
  return _internal_comb_hedge_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_comb_hedge_flag(ArgT0&& arg0, ArgT... args) {
 
 comb_hedge_flag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.comb_hedge_flag)
}
inline std::string* OrderInfo::mutable_comb_hedge_flag() {
  std::string* _s = _internal_mutable_comb_hedge_flag();
  // @@protoc_insertion_point(field_mutable:OrderInfo.comb_hedge_flag)
  return _s;
}
inline const std::string& OrderInfo::_internal_comb_hedge_flag() const {
  return comb_hedge_flag_.Get();
}
inline void OrderInfo::_internal_set_comb_hedge_flag(const std::string& value) {
  
  comb_hedge_flag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_comb_hedge_flag() {
  
  return comb_hedge_flag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_comb_hedge_flag() {
  // @@protoc_insertion_point(field_release:OrderInfo.comb_hedge_flag)
  return comb_hedge_flag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_comb_hedge_flag(std::string* comb_hedge_flag) {
  if (comb_hedge_flag != nullptr) {
    
  } else {
    
  }
  comb_hedge_flag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comb_hedge_flag,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (comb_hedge_flag_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    comb_hedge_flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.comb_hedge_flag)
}

// double limit_price = 10;
inline void OrderInfo::clear_limit_price() {
  limit_price_ = 0;
}
inline double OrderInfo::_internal_limit_price() const {
  return limit_price_;
}
inline double OrderInfo::limit_price() const {
  // @@protoc_insertion_point(field_get:OrderInfo.limit_price)
  return _internal_limit_price();
}
inline void OrderInfo::_internal_set_limit_price(double value) {
  
  limit_price_ = value;
}
inline void OrderInfo::set_limit_price(double value) {
  _internal_set_limit_price(value);
  // @@protoc_insertion_point(field_set:OrderInfo.limit_price)
}

// int32 volume_total_original = 11;
inline void OrderInfo::clear_volume_total_original() {
  volume_total_original_ = 0;
}
inline int32_t OrderInfo::_internal_volume_total_original() const {
  return volume_total_original_;
}
inline int32_t OrderInfo::volume_total_original() const {
  // @@protoc_insertion_point(field_get:OrderInfo.volume_total_original)
  return _internal_volume_total_original();
}
inline void OrderInfo::_internal_set_volume_total_original(int32_t value) {
  
  volume_total_original_ = value;
}
inline void OrderInfo::set_volume_total_original(int32_t value) {
  _internal_set_volume_total_original(value);
  // @@protoc_insertion_point(field_set:OrderInfo.volume_total_original)
}

// string time_condition = 12;
inline void OrderInfo::clear_time_condition() {
  time_condition_.ClearToEmpty();
}
inline const std::string& OrderInfo::time_condition() const {
  // @@protoc_insertion_point(field_get:OrderInfo.time_condition)
  return _internal_time_condition();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_time_condition(ArgT0&& arg0, ArgT... args) {
 
 time_condition_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.time_condition)
}
inline std::string* OrderInfo::mutable_time_condition() {
  std::string* _s = _internal_mutable_time_condition();
  // @@protoc_insertion_point(field_mutable:OrderInfo.time_condition)
  return _s;
}
inline const std::string& OrderInfo::_internal_time_condition() const {
  return time_condition_.Get();
}
inline void OrderInfo::_internal_set_time_condition(const std::string& value) {
  
  time_condition_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_time_condition() {
  
  return time_condition_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_time_condition() {
  // @@protoc_insertion_point(field_release:OrderInfo.time_condition)
  return time_condition_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_time_condition(std::string* time_condition) {
  if (time_condition != nullptr) {
    
  } else {
    
  }
  time_condition_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time_condition,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (time_condition_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    time_condition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.time_condition)
}

// string gtd_date = 13;
inline void OrderInfo::clear_gtd_date() {
  gtd_date_.ClearToEmpty();
}
inline const std::string& OrderInfo::gtd_date() const {
  // @@protoc_insertion_point(field_get:OrderInfo.gtd_date)
  return _internal_gtd_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_gtd_date(ArgT0&& arg0, ArgT... args) {
 
 gtd_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.gtd_date)
}
inline std::string* OrderInfo::mutable_gtd_date() {
  std::string* _s = _internal_mutable_gtd_date();
  // @@protoc_insertion_point(field_mutable:OrderInfo.gtd_date)
  return _s;
}
inline const std::string& OrderInfo::_internal_gtd_date() const {
  return gtd_date_.Get();
}
inline void OrderInfo::_internal_set_gtd_date(const std::string& value) {
  
  gtd_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_gtd_date() {
  
  return gtd_date_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_gtd_date() {
  // @@protoc_insertion_point(field_release:OrderInfo.gtd_date)
  return gtd_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_gtd_date(std::string* gtd_date) {
  if (gtd_date != nullptr) {
    
  } else {
    
  }
  gtd_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gtd_date,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gtd_date_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gtd_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.gtd_date)
}

// string volume_condition = 14;
inline void OrderInfo::clear_volume_condition() {
  volume_condition_.ClearToEmpty();
}
inline const std::string& OrderInfo::volume_condition() const {
  // @@protoc_insertion_point(field_get:OrderInfo.volume_condition)
  return _internal_volume_condition();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_volume_condition(ArgT0&& arg0, ArgT... args) {
 
 volume_condition_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.volume_condition)
}
inline std::string* OrderInfo::mutable_volume_condition() {
  std::string* _s = _internal_mutable_volume_condition();
  // @@protoc_insertion_point(field_mutable:OrderInfo.volume_condition)
  return _s;
}
inline const std::string& OrderInfo::_internal_volume_condition() const {
  return volume_condition_.Get();
}
inline void OrderInfo::_internal_set_volume_condition(const std::string& value) {
  
  volume_condition_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_volume_condition() {
  
  return volume_condition_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_volume_condition() {
  // @@protoc_insertion_point(field_release:OrderInfo.volume_condition)
  return volume_condition_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_volume_condition(std::string* volume_condition) {
  if (volume_condition != nullptr) {
    
  } else {
    
  }
  volume_condition_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), volume_condition,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (volume_condition_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    volume_condition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.volume_condition)
}

// int32 min_volume = 15;
inline void OrderInfo::clear_min_volume() {
  min_volume_ = 0;
}
inline int32_t OrderInfo::_internal_min_volume() const {
  return min_volume_;
}
inline int32_t OrderInfo::min_volume() const {
  // @@protoc_insertion_point(field_get:OrderInfo.min_volume)
  return _internal_min_volume();
}
inline void OrderInfo::_internal_set_min_volume(int32_t value) {
  
  min_volume_ = value;
}
inline void OrderInfo::set_min_volume(int32_t value) {
  _internal_set_min_volume(value);
  // @@protoc_insertion_point(field_set:OrderInfo.min_volume)
}

// string contingent_condition = 16;
inline void OrderInfo::clear_contingent_condition() {
  contingent_condition_.ClearToEmpty();
}
inline const std::string& OrderInfo::contingent_condition() const {
  // @@protoc_insertion_point(field_get:OrderInfo.contingent_condition)
  return _internal_contingent_condition();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_contingent_condition(ArgT0&& arg0, ArgT... args) {
 
 contingent_condition_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.contingent_condition)
}
inline std::string* OrderInfo::mutable_contingent_condition() {
  std::string* _s = _internal_mutable_contingent_condition();
  // @@protoc_insertion_point(field_mutable:OrderInfo.contingent_condition)
  return _s;
}
inline const std::string& OrderInfo::_internal_contingent_condition() const {
  return contingent_condition_.Get();
}
inline void OrderInfo::_internal_set_contingent_condition(const std::string& value) {
  
  contingent_condition_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_contingent_condition() {
  
  return contingent_condition_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_contingent_condition() {
  // @@protoc_insertion_point(field_release:OrderInfo.contingent_condition)
  return contingent_condition_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_contingent_condition(std::string* contingent_condition) {
  if (contingent_condition != nullptr) {
    
  } else {
    
  }
  contingent_condition_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contingent_condition,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (contingent_condition_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    contingent_condition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.contingent_condition)
}

// double stop_price = 17;
inline void OrderInfo::clear_stop_price() {
  stop_price_ = 0;
}
inline double OrderInfo::_internal_stop_price() const {
  return stop_price_;
}
inline double OrderInfo::stop_price() const {
  // @@protoc_insertion_point(field_get:OrderInfo.stop_price)
  return _internal_stop_price();
}
inline void OrderInfo::_internal_set_stop_price(double value) {
  
  stop_price_ = value;
}
inline void OrderInfo::set_stop_price(double value) {
  _internal_set_stop_price(value);
  // @@protoc_insertion_point(field_set:OrderInfo.stop_price)
}

// string force_close_reason = 18;
inline void OrderInfo::clear_force_close_reason() {
  force_close_reason_.ClearToEmpty();
}
inline const std::string& OrderInfo::force_close_reason() const {
  // @@protoc_insertion_point(field_get:OrderInfo.force_close_reason)
  return _internal_force_close_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_force_close_reason(ArgT0&& arg0, ArgT... args) {
 
 force_close_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.force_close_reason)
}
inline std::string* OrderInfo::mutable_force_close_reason() {
  std::string* _s = _internal_mutable_force_close_reason();
  // @@protoc_insertion_point(field_mutable:OrderInfo.force_close_reason)
  return _s;
}
inline const std::string& OrderInfo::_internal_force_close_reason() const {
  return force_close_reason_.Get();
}
inline void OrderInfo::_internal_set_force_close_reason(const std::string& value) {
  
  force_close_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_force_close_reason() {
  
  return force_close_reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_force_close_reason() {
  // @@protoc_insertion_point(field_release:OrderInfo.force_close_reason)
  return force_close_reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_force_close_reason(std::string* force_close_reason) {
  if (force_close_reason != nullptr) {
    
  } else {
    
  }
  force_close_reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), force_close_reason,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (force_close_reason_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    force_close_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.force_close_reason)
}

// int32 is_auto_suspend = 19;
inline void OrderInfo::clear_is_auto_suspend() {
  is_auto_suspend_ = 0;
}
inline int32_t OrderInfo::_internal_is_auto_suspend() const {
  return is_auto_suspend_;
}
inline int32_t OrderInfo::is_auto_suspend() const {
  // @@protoc_insertion_point(field_get:OrderInfo.is_auto_suspend)
  return _internal_is_auto_suspend();
}
inline void OrderInfo::_internal_set_is_auto_suspend(int32_t value) {
  
  is_auto_suspend_ = value;
}
inline void OrderInfo::set_is_auto_suspend(int32_t value) {
  _internal_set_is_auto_suspend(value);
  // @@protoc_insertion_point(field_set:OrderInfo.is_auto_suspend)
}

// string business_unit = 20;
inline void OrderInfo::clear_business_unit() {
  business_unit_.ClearToEmpty();
}
inline const std::string& OrderInfo::business_unit() const {
  // @@protoc_insertion_point(field_get:OrderInfo.business_unit)
  return _internal_business_unit();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_business_unit(ArgT0&& arg0, ArgT... args) {
 
 business_unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.business_unit)
}
inline std::string* OrderInfo::mutable_business_unit() {
  std::string* _s = _internal_mutable_business_unit();
  // @@protoc_insertion_point(field_mutable:OrderInfo.business_unit)
  return _s;
}
inline const std::string& OrderInfo::_internal_business_unit() const {
  return business_unit_.Get();
}
inline void OrderInfo::_internal_set_business_unit(const std::string& value) {
  
  business_unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_business_unit() {
  
  return business_unit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_business_unit() {
  // @@protoc_insertion_point(field_release:OrderInfo.business_unit)
  return business_unit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_business_unit(std::string* business_unit) {
  if (business_unit != nullptr) {
    
  } else {
    
  }
  business_unit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), business_unit,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (business_unit_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    business_unit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.business_unit)
}

// int32 request_id = 21;
inline void OrderInfo::clear_request_id() {
  request_id_ = 0;
}
inline int32_t OrderInfo::_internal_request_id() const {
  return request_id_;
}
inline int32_t OrderInfo::request_id() const {
  // @@protoc_insertion_point(field_get:OrderInfo.request_id)
  return _internal_request_id();
}
inline void OrderInfo::_internal_set_request_id(int32_t value) {
  
  request_id_ = value;
}
inline void OrderInfo::set_request_id(int32_t value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:OrderInfo.request_id)
}

// string order_local_id = 22;
inline void OrderInfo::clear_order_local_id() {
  order_local_id_.ClearToEmpty();
}
inline const std::string& OrderInfo::order_local_id() const {
  // @@protoc_insertion_point(field_get:OrderInfo.order_local_id)
  return _internal_order_local_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_order_local_id(ArgT0&& arg0, ArgT... args) {
 
 order_local_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.order_local_id)
}
inline std::string* OrderInfo::mutable_order_local_id() {
  std::string* _s = _internal_mutable_order_local_id();
  // @@protoc_insertion_point(field_mutable:OrderInfo.order_local_id)
  return _s;
}
inline const std::string& OrderInfo::_internal_order_local_id() const {
  return order_local_id_.Get();
}
inline void OrderInfo::_internal_set_order_local_id(const std::string& value) {
  
  order_local_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_order_local_id() {
  
  return order_local_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_order_local_id() {
  // @@protoc_insertion_point(field_release:OrderInfo.order_local_id)
  return order_local_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_order_local_id(std::string* order_local_id) {
  if (order_local_id != nullptr) {
    
  } else {
    
  }
  order_local_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_local_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_local_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    order_local_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.order_local_id)
}

// string exchange_id = 23;
inline void OrderInfo::clear_exchange_id() {
  exchange_id_.ClearToEmpty();
}
inline const std::string& OrderInfo::exchange_id() const {
  // @@protoc_insertion_point(field_get:OrderInfo.exchange_id)
  return _internal_exchange_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_exchange_id(ArgT0&& arg0, ArgT... args) {
 
 exchange_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.exchange_id)
}
inline std::string* OrderInfo::mutable_exchange_id() {
  std::string* _s = _internal_mutable_exchange_id();
  // @@protoc_insertion_point(field_mutable:OrderInfo.exchange_id)
  return _s;
}
inline const std::string& OrderInfo::_internal_exchange_id() const {
  return exchange_id_.Get();
}
inline void OrderInfo::_internal_set_exchange_id(const std::string& value) {
  
  exchange_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_exchange_id() {
  
  return exchange_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_exchange_id() {
  // @@protoc_insertion_point(field_release:OrderInfo.exchange_id)
  return exchange_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_exchange_id(std::string* exchange_id) {
  if (exchange_id != nullptr) {
    
  } else {
    
  }
  exchange_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (exchange_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.exchange_id)
}

// string participant_id = 24;
inline void OrderInfo::clear_participant_id() {
  participant_id_.ClearToEmpty();
}
inline const std::string& OrderInfo::participant_id() const {
  // @@protoc_insertion_point(field_get:OrderInfo.participant_id)
  return _internal_participant_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_participant_id(ArgT0&& arg0, ArgT... args) {
 
 participant_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.participant_id)
}
inline std::string* OrderInfo::mutable_participant_id() {
  std::string* _s = _internal_mutable_participant_id();
  // @@protoc_insertion_point(field_mutable:OrderInfo.participant_id)
  return _s;
}
inline const std::string& OrderInfo::_internal_participant_id() const {
  return participant_id_.Get();
}
inline void OrderInfo::_internal_set_participant_id(const std::string& value) {
  
  participant_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_participant_id() {
  
  return participant_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_participant_id() {
  // @@protoc_insertion_point(field_release:OrderInfo.participant_id)
  return participant_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_participant_id(std::string* participant_id) {
  if (participant_id != nullptr) {
    
  } else {
    
  }
  participant_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), participant_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (participant_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    participant_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.participant_id)
}

// string client_id = 25;
inline void OrderInfo::clear_client_id() {
  client_id_.ClearToEmpty();
}
inline const std::string& OrderInfo::client_id() const {
  // @@protoc_insertion_point(field_get:OrderInfo.client_id)
  return _internal_client_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_client_id(ArgT0&& arg0, ArgT... args) {
 
 client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.client_id)
}
inline std::string* OrderInfo::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:OrderInfo.client_id)
  return _s;
}
inline const std::string& OrderInfo::_internal_client_id() const {
  return client_id_.Get();
}
inline void OrderInfo::_internal_set_client_id(const std::string& value) {
  
  client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_client_id() {
  
  return client_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_client_id() {
  // @@protoc_insertion_point(field_release:OrderInfo.client_id)
  return client_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.client_id)
}

// string reserve_2 = 26;
inline void OrderInfo::clear_reserve_2() {
  reserve_2_.ClearToEmpty();
}
inline const std::string& OrderInfo::reserve_2() const {
  // @@protoc_insertion_point(field_get:OrderInfo.reserve_2)
  return _internal_reserve_2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_reserve_2(ArgT0&& arg0, ArgT... args) {
 
 reserve_2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.reserve_2)
}
inline std::string* OrderInfo::mutable_reserve_2() {
  std::string* _s = _internal_mutable_reserve_2();
  // @@protoc_insertion_point(field_mutable:OrderInfo.reserve_2)
  return _s;
}
inline const std::string& OrderInfo::_internal_reserve_2() const {
  return reserve_2_.Get();
}
inline void OrderInfo::_internal_set_reserve_2(const std::string& value) {
  
  reserve_2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_reserve_2() {
  
  return reserve_2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_reserve_2() {
  // @@protoc_insertion_point(field_release:OrderInfo.reserve_2)
  return reserve_2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_reserve_2(std::string* reserve_2) {
  if (reserve_2 != nullptr) {
    
  } else {
    
  }
  reserve_2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reserve_2,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reserve_2_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reserve_2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.reserve_2)
}

// string trader_id = 27;
inline void OrderInfo::clear_trader_id() {
  trader_id_.ClearToEmpty();
}
inline const std::string& OrderInfo::trader_id() const {
  // @@protoc_insertion_point(field_get:OrderInfo.trader_id)
  return _internal_trader_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_trader_id(ArgT0&& arg0, ArgT... args) {
 
 trader_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.trader_id)
}
inline std::string* OrderInfo::mutable_trader_id() {
  std::string* _s = _internal_mutable_trader_id();
  // @@protoc_insertion_point(field_mutable:OrderInfo.trader_id)
  return _s;
}
inline const std::string& OrderInfo::_internal_trader_id() const {
  return trader_id_.Get();
}
inline void OrderInfo::_internal_set_trader_id(const std::string& value) {
  
  trader_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_trader_id() {
  
  return trader_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_trader_id() {
  // @@protoc_insertion_point(field_release:OrderInfo.trader_id)
  return trader_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_trader_id(std::string* trader_id) {
  if (trader_id != nullptr) {
    
  } else {
    
  }
  trader_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trader_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trader_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    trader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.trader_id)
}

// int32 install_id = 28;
inline void OrderInfo::clear_install_id() {
  install_id_ = 0;
}
inline int32_t OrderInfo::_internal_install_id() const {
  return install_id_;
}
inline int32_t OrderInfo::install_id() const {
  // @@protoc_insertion_point(field_get:OrderInfo.install_id)
  return _internal_install_id();
}
inline void OrderInfo::_internal_set_install_id(int32_t value) {
  
  install_id_ = value;
}
inline void OrderInfo::set_install_id(int32_t value) {
  _internal_set_install_id(value);
  // @@protoc_insertion_point(field_set:OrderInfo.install_id)
}

// string order_submit_status = 29;
inline void OrderInfo::clear_order_submit_status() {
  order_submit_status_.ClearToEmpty();
}
inline const std::string& OrderInfo::order_submit_status() const {
  // @@protoc_insertion_point(field_get:OrderInfo.order_submit_status)
  return _internal_order_submit_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_order_submit_status(ArgT0&& arg0, ArgT... args) {
 
 order_submit_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.order_submit_status)
}
inline std::string* OrderInfo::mutable_order_submit_status() {
  std::string* _s = _internal_mutable_order_submit_status();
  // @@protoc_insertion_point(field_mutable:OrderInfo.order_submit_status)
  return _s;
}
inline const std::string& OrderInfo::_internal_order_submit_status() const {
  return order_submit_status_.Get();
}
inline void OrderInfo::_internal_set_order_submit_status(const std::string& value) {
  
  order_submit_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_order_submit_status() {
  
  return order_submit_status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_order_submit_status() {
  // @@protoc_insertion_point(field_release:OrderInfo.order_submit_status)
  return order_submit_status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_order_submit_status(std::string* order_submit_status) {
  if (order_submit_status != nullptr) {
    
  } else {
    
  }
  order_submit_status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_submit_status,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_submit_status_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    order_submit_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.order_submit_status)
}

// int32 notify_sequence = 30;
inline void OrderInfo::clear_notify_sequence() {
  notify_sequence_ = 0;
}
inline int32_t OrderInfo::_internal_notify_sequence() const {
  return notify_sequence_;
}
inline int32_t OrderInfo::notify_sequence() const {
  // @@protoc_insertion_point(field_get:OrderInfo.notify_sequence)
  return _internal_notify_sequence();
}
inline void OrderInfo::_internal_set_notify_sequence(int32_t value) {
  
  notify_sequence_ = value;
}
inline void OrderInfo::set_notify_sequence(int32_t value) {
  _internal_set_notify_sequence(value);
  // @@protoc_insertion_point(field_set:OrderInfo.notify_sequence)
}

// string trading_day = 31;
inline void OrderInfo::clear_trading_day() {
  trading_day_.ClearToEmpty();
}
inline const std::string& OrderInfo::trading_day() const {
  // @@protoc_insertion_point(field_get:OrderInfo.trading_day)
  return _internal_trading_day();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_trading_day(ArgT0&& arg0, ArgT... args) {
 
 trading_day_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.trading_day)
}
inline std::string* OrderInfo::mutable_trading_day() {
  std::string* _s = _internal_mutable_trading_day();
  // @@protoc_insertion_point(field_mutable:OrderInfo.trading_day)
  return _s;
}
inline const std::string& OrderInfo::_internal_trading_day() const {
  return trading_day_.Get();
}
inline void OrderInfo::_internal_set_trading_day(const std::string& value) {
  
  trading_day_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_trading_day() {
  
  return trading_day_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_trading_day() {
  // @@protoc_insertion_point(field_release:OrderInfo.trading_day)
  return trading_day_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_trading_day(std::string* trading_day) {
  if (trading_day != nullptr) {
    
  } else {
    
  }
  trading_day_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trading_day,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trading_day_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    trading_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.trading_day)
}

// int32 settlement_id = 32;
inline void OrderInfo::clear_settlement_id() {
  settlement_id_ = 0;
}
inline int32_t OrderInfo::_internal_settlement_id() const {
  return settlement_id_;
}
inline int32_t OrderInfo::settlement_id() const {
  // @@protoc_insertion_point(field_get:OrderInfo.settlement_id)
  return _internal_settlement_id();
}
inline void OrderInfo::_internal_set_settlement_id(int32_t value) {
  
  settlement_id_ = value;
}
inline void OrderInfo::set_settlement_id(int32_t value) {
  _internal_set_settlement_id(value);
  // @@protoc_insertion_point(field_set:OrderInfo.settlement_id)
}

// string order_sys_id = 33;
inline void OrderInfo::clear_order_sys_id() {
  order_sys_id_.ClearToEmpty();
}
inline const std::string& OrderInfo::order_sys_id() const {
  // @@protoc_insertion_point(field_get:OrderInfo.order_sys_id)
  return _internal_order_sys_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_order_sys_id(ArgT0&& arg0, ArgT... args) {
 
 order_sys_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.order_sys_id)
}
inline std::string* OrderInfo::mutable_order_sys_id() {
  std::string* _s = _internal_mutable_order_sys_id();
  // @@protoc_insertion_point(field_mutable:OrderInfo.order_sys_id)
  return _s;
}
inline const std::string& OrderInfo::_internal_order_sys_id() const {
  return order_sys_id_.Get();
}
inline void OrderInfo::_internal_set_order_sys_id(const std::string& value) {
  
  order_sys_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_order_sys_id() {
  
  return order_sys_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_order_sys_id() {
  // @@protoc_insertion_point(field_release:OrderInfo.order_sys_id)
  return order_sys_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_order_sys_id(std::string* order_sys_id) {
  if (order_sys_id != nullptr) {
    
  } else {
    
  }
  order_sys_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_sys_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_sys_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    order_sys_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.order_sys_id)
}

// string order_source = 34;
inline void OrderInfo::clear_order_source() {
  order_source_.ClearToEmpty();
}
inline const std::string& OrderInfo::order_source() const {
  // @@protoc_insertion_point(field_get:OrderInfo.order_source)
  return _internal_order_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_order_source(ArgT0&& arg0, ArgT... args) {
 
 order_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.order_source)
}
inline std::string* OrderInfo::mutable_order_source() {
  std::string* _s = _internal_mutable_order_source();
  // @@protoc_insertion_point(field_mutable:OrderInfo.order_source)
  return _s;
}
inline const std::string& OrderInfo::_internal_order_source() const {
  return order_source_.Get();
}
inline void OrderInfo::_internal_set_order_source(const std::string& value) {
  
  order_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_order_source() {
  
  return order_source_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_order_source() {
  // @@protoc_insertion_point(field_release:OrderInfo.order_source)
  return order_source_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_order_source(std::string* order_source) {
  if (order_source != nullptr) {
    
  } else {
    
  }
  order_source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_source,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_source_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    order_source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.order_source)
}

// string order_status = 35;
inline void OrderInfo::clear_order_status() {
  order_status_.ClearToEmpty();
}
inline const std::string& OrderInfo::order_status() const {
  // @@protoc_insertion_point(field_get:OrderInfo.order_status)
  return _internal_order_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_order_status(ArgT0&& arg0, ArgT... args) {
 
 order_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.order_status)
}
inline std::string* OrderInfo::mutable_order_status() {
  std::string* _s = _internal_mutable_order_status();
  // @@protoc_insertion_point(field_mutable:OrderInfo.order_status)
  return _s;
}
inline const std::string& OrderInfo::_internal_order_status() const {
  return order_status_.Get();
}
inline void OrderInfo::_internal_set_order_status(const std::string& value) {
  
  order_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_order_status() {
  
  return order_status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_order_status() {
  // @@protoc_insertion_point(field_release:OrderInfo.order_status)
  return order_status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_order_status(std::string* order_status) {
  if (order_status != nullptr) {
    
  } else {
    
  }
  order_status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_status,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_status_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    order_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.order_status)
}

// string order_type = 36;
inline void OrderInfo::clear_order_type() {
  order_type_.ClearToEmpty();
}
inline const std::string& OrderInfo::order_type() const {
  // @@protoc_insertion_point(field_get:OrderInfo.order_type)
  return _internal_order_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_order_type(ArgT0&& arg0, ArgT... args) {
 
 order_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.order_type)
}
inline std::string* OrderInfo::mutable_order_type() {
  std::string* _s = _internal_mutable_order_type();
  // @@protoc_insertion_point(field_mutable:OrderInfo.order_type)
  return _s;
}
inline const std::string& OrderInfo::_internal_order_type() const {
  return order_type_.Get();
}
inline void OrderInfo::_internal_set_order_type(const std::string& value) {
  
  order_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_order_type() {
  
  return order_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_order_type() {
  // @@protoc_insertion_point(field_release:OrderInfo.order_type)
  return order_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_order_type(std::string* order_type) {
  if (order_type != nullptr) {
    
  } else {
    
  }
  order_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    order_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.order_type)
}

// int32 volume_traded = 37;
inline void OrderInfo::clear_volume_traded() {
  volume_traded_ = 0;
}
inline int32_t OrderInfo::_internal_volume_traded() const {
  return volume_traded_;
}
inline int32_t OrderInfo::volume_traded() const {
  // @@protoc_insertion_point(field_get:OrderInfo.volume_traded)
  return _internal_volume_traded();
}
inline void OrderInfo::_internal_set_volume_traded(int32_t value) {
  
  volume_traded_ = value;
}
inline void OrderInfo::set_volume_traded(int32_t value) {
  _internal_set_volume_traded(value);
  // @@protoc_insertion_point(field_set:OrderInfo.volume_traded)
}

// int32 volume_total = 38;
inline void OrderInfo::clear_volume_total() {
  volume_total_ = 0;
}
inline int32_t OrderInfo::_internal_volume_total() const {
  return volume_total_;
}
inline int32_t OrderInfo::volume_total() const {
  // @@protoc_insertion_point(field_get:OrderInfo.volume_total)
  return _internal_volume_total();
}
inline void OrderInfo::_internal_set_volume_total(int32_t value) {
  
  volume_total_ = value;
}
inline void OrderInfo::set_volume_total(int32_t value) {
  _internal_set_volume_total(value);
  // @@protoc_insertion_point(field_set:OrderInfo.volume_total)
}

// string insert_date = 39;
inline void OrderInfo::clear_insert_date() {
  insert_date_.ClearToEmpty();
}
inline const std::string& OrderInfo::insert_date() const {
  // @@protoc_insertion_point(field_get:OrderInfo.insert_date)
  return _internal_insert_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_insert_date(ArgT0&& arg0, ArgT... args) {
 
 insert_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.insert_date)
}
inline std::string* OrderInfo::mutable_insert_date() {
  std::string* _s = _internal_mutable_insert_date();
  // @@protoc_insertion_point(field_mutable:OrderInfo.insert_date)
  return _s;
}
inline const std::string& OrderInfo::_internal_insert_date() const {
  return insert_date_.Get();
}
inline void OrderInfo::_internal_set_insert_date(const std::string& value) {
  
  insert_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_insert_date() {
  
  return insert_date_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_insert_date() {
  // @@protoc_insertion_point(field_release:OrderInfo.insert_date)
  return insert_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_insert_date(std::string* insert_date) {
  if (insert_date != nullptr) {
    
  } else {
    
  }
  insert_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), insert_date,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (insert_date_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    insert_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.insert_date)
}

// string insert_time = 40;
inline void OrderInfo::clear_insert_time() {
  insert_time_.ClearToEmpty();
}
inline const std::string& OrderInfo::insert_time() const {
  // @@protoc_insertion_point(field_get:OrderInfo.insert_time)
  return _internal_insert_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_insert_time(ArgT0&& arg0, ArgT... args) {
 
 insert_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.insert_time)
}
inline std::string* OrderInfo::mutable_insert_time() {
  std::string* _s = _internal_mutable_insert_time();
  // @@protoc_insertion_point(field_mutable:OrderInfo.insert_time)
  return _s;
}
inline const std::string& OrderInfo::_internal_insert_time() const {
  return insert_time_.Get();
}
inline void OrderInfo::_internal_set_insert_time(const std::string& value) {
  
  insert_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_insert_time() {
  
  return insert_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_insert_time() {
  // @@protoc_insertion_point(field_release:OrderInfo.insert_time)
  return insert_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_insert_time(std::string* insert_time) {
  if (insert_time != nullptr) {
    
  } else {
    
  }
  insert_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), insert_time,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (insert_time_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    insert_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.insert_time)
}

// string active_time = 41;
inline void OrderInfo::clear_active_time() {
  active_time_.ClearToEmpty();
}
inline const std::string& OrderInfo::active_time() const {
  // @@protoc_insertion_point(field_get:OrderInfo.active_time)
  return _internal_active_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_active_time(ArgT0&& arg0, ArgT... args) {
 
 active_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.active_time)
}
inline std::string* OrderInfo::mutable_active_time() {
  std::string* _s = _internal_mutable_active_time();
  // @@protoc_insertion_point(field_mutable:OrderInfo.active_time)
  return _s;
}
inline const std::string& OrderInfo::_internal_active_time() const {
  return active_time_.Get();
}
inline void OrderInfo::_internal_set_active_time(const std::string& value) {
  
  active_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_active_time() {
  
  return active_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_active_time() {
  // @@protoc_insertion_point(field_release:OrderInfo.active_time)
  return active_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_active_time(std::string* active_time) {
  if (active_time != nullptr) {
    
  } else {
    
  }
  active_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), active_time,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (active_time_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    active_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.active_time)
}

// string suspend_time = 42;
inline void OrderInfo::clear_suspend_time() {
  suspend_time_.ClearToEmpty();
}
inline const std::string& OrderInfo::suspend_time() const {
  // @@protoc_insertion_point(field_get:OrderInfo.suspend_time)
  return _internal_suspend_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_suspend_time(ArgT0&& arg0, ArgT... args) {
 
 suspend_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.suspend_time)
}
inline std::string* OrderInfo::mutable_suspend_time() {
  std::string* _s = _internal_mutable_suspend_time();
  // @@protoc_insertion_point(field_mutable:OrderInfo.suspend_time)
  return _s;
}
inline const std::string& OrderInfo::_internal_suspend_time() const {
  return suspend_time_.Get();
}
inline void OrderInfo::_internal_set_suspend_time(const std::string& value) {
  
  suspend_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_suspend_time() {
  
  return suspend_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_suspend_time() {
  // @@protoc_insertion_point(field_release:OrderInfo.suspend_time)
  return suspend_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_suspend_time(std::string* suspend_time) {
  if (suspend_time != nullptr) {
    
  } else {
    
  }
  suspend_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), suspend_time,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (suspend_time_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    suspend_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.suspend_time)
}

// string update_time = 43;
inline void OrderInfo::clear_update_time() {
  update_time_.ClearToEmpty();
}
inline const std::string& OrderInfo::update_time() const {
  // @@protoc_insertion_point(field_get:OrderInfo.update_time)
  return _internal_update_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_update_time(ArgT0&& arg0, ArgT... args) {
 
 update_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.update_time)
}
inline std::string* OrderInfo::mutable_update_time() {
  std::string* _s = _internal_mutable_update_time();
  // @@protoc_insertion_point(field_mutable:OrderInfo.update_time)
  return _s;
}
inline const std::string& OrderInfo::_internal_update_time() const {
  return update_time_.Get();
}
inline void OrderInfo::_internal_set_update_time(const std::string& value) {
  
  update_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_update_time() {
  
  return update_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_update_time() {
  // @@protoc_insertion_point(field_release:OrderInfo.update_time)
  return update_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_update_time(std::string* update_time) {
  if (update_time != nullptr) {
    
  } else {
    
  }
  update_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), update_time,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (update_time_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    update_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.update_time)
}

// string cancel_time = 44;
inline void OrderInfo::clear_cancel_time() {
  cancel_time_.ClearToEmpty();
}
inline const std::string& OrderInfo::cancel_time() const {
  // @@protoc_insertion_point(field_get:OrderInfo.cancel_time)
  return _internal_cancel_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_cancel_time(ArgT0&& arg0, ArgT... args) {
 
 cancel_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.cancel_time)
}
inline std::string* OrderInfo::mutable_cancel_time() {
  std::string* _s = _internal_mutable_cancel_time();
  // @@protoc_insertion_point(field_mutable:OrderInfo.cancel_time)
  return _s;
}
inline const std::string& OrderInfo::_internal_cancel_time() const {
  return cancel_time_.Get();
}
inline void OrderInfo::_internal_set_cancel_time(const std::string& value) {
  
  cancel_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_cancel_time() {
  
  return cancel_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_cancel_time() {
  // @@protoc_insertion_point(field_release:OrderInfo.cancel_time)
  return cancel_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_cancel_time(std::string* cancel_time) {
  if (cancel_time != nullptr) {
    
  } else {
    
  }
  cancel_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cancel_time,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cancel_time_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cancel_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.cancel_time)
}

// string active_trader_id = 45;
inline void OrderInfo::clear_active_trader_id() {
  active_trader_id_.ClearToEmpty();
}
inline const std::string& OrderInfo::active_trader_id() const {
  // @@protoc_insertion_point(field_get:OrderInfo.active_trader_id)
  return _internal_active_trader_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_active_trader_id(ArgT0&& arg0, ArgT... args) {
 
 active_trader_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.active_trader_id)
}
inline std::string* OrderInfo::mutable_active_trader_id() {
  std::string* _s = _internal_mutable_active_trader_id();
  // @@protoc_insertion_point(field_mutable:OrderInfo.active_trader_id)
  return _s;
}
inline const std::string& OrderInfo::_internal_active_trader_id() const {
  return active_trader_id_.Get();
}
inline void OrderInfo::_internal_set_active_trader_id(const std::string& value) {
  
  active_trader_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_active_trader_id() {
  
  return active_trader_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_active_trader_id() {
  // @@protoc_insertion_point(field_release:OrderInfo.active_trader_id)
  return active_trader_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_active_trader_id(std::string* active_trader_id) {
  if (active_trader_id != nullptr) {
    
  } else {
    
  }
  active_trader_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), active_trader_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (active_trader_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    active_trader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.active_trader_id)
}

// string clearing_part_id = 46;
inline void OrderInfo::clear_clearing_part_id() {
  clearing_part_id_.ClearToEmpty();
}
inline const std::string& OrderInfo::clearing_part_id() const {
  // @@protoc_insertion_point(field_get:OrderInfo.clearing_part_id)
  return _internal_clearing_part_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_clearing_part_id(ArgT0&& arg0, ArgT... args) {
 
 clearing_part_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.clearing_part_id)
}
inline std::string* OrderInfo::mutable_clearing_part_id() {
  std::string* _s = _internal_mutable_clearing_part_id();
  // @@protoc_insertion_point(field_mutable:OrderInfo.clearing_part_id)
  return _s;
}
inline const std::string& OrderInfo::_internal_clearing_part_id() const {
  return clearing_part_id_.Get();
}
inline void OrderInfo::_internal_set_clearing_part_id(const std::string& value) {
  
  clearing_part_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_clearing_part_id() {
  
  return clearing_part_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_clearing_part_id() {
  // @@protoc_insertion_point(field_release:OrderInfo.clearing_part_id)
  return clearing_part_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_clearing_part_id(std::string* clearing_part_id) {
  if (clearing_part_id != nullptr) {
    
  } else {
    
  }
  clearing_part_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clearing_part_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (clearing_part_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    clearing_part_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.clearing_part_id)
}

// int32 sequence_no = 47;
inline void OrderInfo::clear_sequence_no() {
  sequence_no_ = 0;
}
inline int32_t OrderInfo::_internal_sequence_no() const {
  return sequence_no_;
}
inline int32_t OrderInfo::sequence_no() const {
  // @@protoc_insertion_point(field_get:OrderInfo.sequence_no)
  return _internal_sequence_no();
}
inline void OrderInfo::_internal_set_sequence_no(int32_t value) {
  
  sequence_no_ = value;
}
inline void OrderInfo::set_sequence_no(int32_t value) {
  _internal_set_sequence_no(value);
  // @@protoc_insertion_point(field_set:OrderInfo.sequence_no)
}

// int32 front_id = 48;
inline void OrderInfo::clear_front_id() {
  front_id_ = 0;
}
inline int32_t OrderInfo::_internal_front_id() const {
  return front_id_;
}
inline int32_t OrderInfo::front_id() const {
  // @@protoc_insertion_point(field_get:OrderInfo.front_id)
  return _internal_front_id();
}
inline void OrderInfo::_internal_set_front_id(int32_t value) {
  
  front_id_ = value;
}
inline void OrderInfo::set_front_id(int32_t value) {
  _internal_set_front_id(value);
  // @@protoc_insertion_point(field_set:OrderInfo.front_id)
}

// int32 session_id = 49;
inline void OrderInfo::clear_session_id() {
  session_id_ = 0;
}
inline int32_t OrderInfo::_internal_session_id() const {
  return session_id_;
}
inline int32_t OrderInfo::session_id() const {
  // @@protoc_insertion_point(field_get:OrderInfo.session_id)
  return _internal_session_id();
}
inline void OrderInfo::_internal_set_session_id(int32_t value) {
  
  session_id_ = value;
}
inline void OrderInfo::set_session_id(int32_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:OrderInfo.session_id)
}

// string user_product_info = 50;
inline void OrderInfo::clear_user_product_info() {
  user_product_info_.ClearToEmpty();
}
inline const std::string& OrderInfo::user_product_info() const {
  // @@protoc_insertion_point(field_get:OrderInfo.user_product_info)
  return _internal_user_product_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_user_product_info(ArgT0&& arg0, ArgT... args) {
 
 user_product_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.user_product_info)
}
inline std::string* OrderInfo::mutable_user_product_info() {
  std::string* _s = _internal_mutable_user_product_info();
  // @@protoc_insertion_point(field_mutable:OrderInfo.user_product_info)
  return _s;
}
inline const std::string& OrderInfo::_internal_user_product_info() const {
  return user_product_info_.Get();
}
inline void OrderInfo::_internal_set_user_product_info(const std::string& value) {
  
  user_product_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_user_product_info() {
  
  return user_product_info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_user_product_info() {
  // @@protoc_insertion_point(field_release:OrderInfo.user_product_info)
  return user_product_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_user_product_info(std::string* user_product_info) {
  if (user_product_info != nullptr) {
    
  } else {
    
  }
  user_product_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_product_info,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_product_info_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    user_product_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.user_product_info)
}

// string status_msg = 51;
inline void OrderInfo::clear_status_msg() {
  status_msg_.ClearToEmpty();
}
inline const std::string& OrderInfo::status_msg() const {
  // @@protoc_insertion_point(field_get:OrderInfo.status_msg)
  return _internal_status_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_status_msg(ArgT0&& arg0, ArgT... args) {
 
 status_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.status_msg)
}
inline std::string* OrderInfo::mutable_status_msg() {
  std::string* _s = _internal_mutable_status_msg();
  // @@protoc_insertion_point(field_mutable:OrderInfo.status_msg)
  return _s;
}
inline const std::string& OrderInfo::_internal_status_msg() const {
  return status_msg_.Get();
}
inline void OrderInfo::_internal_set_status_msg(const std::string& value) {
  
  status_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_status_msg() {
  
  return status_msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_status_msg() {
  // @@protoc_insertion_point(field_release:OrderInfo.status_msg)
  return status_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_status_msg(std::string* status_msg) {
  if (status_msg != nullptr) {
    
  } else {
    
  }
  status_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status_msg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_msg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    status_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.status_msg)
}

// int32 user_force_close = 52;
inline void OrderInfo::clear_user_force_close() {
  user_force_close_ = 0;
}
inline int32_t OrderInfo::_internal_user_force_close() const {
  return user_force_close_;
}
inline int32_t OrderInfo::user_force_close() const {
  // @@protoc_insertion_point(field_get:OrderInfo.user_force_close)
  return _internal_user_force_close();
}
inline void OrderInfo::_internal_set_user_force_close(int32_t value) {
  
  user_force_close_ = value;
}
inline void OrderInfo::set_user_force_close(int32_t value) {
  _internal_set_user_force_close(value);
  // @@protoc_insertion_point(field_set:OrderInfo.user_force_close)
}

// string active_user_id = 53;
inline void OrderInfo::clear_active_user_id() {
  active_user_id_.ClearToEmpty();
}
inline const std::string& OrderInfo::active_user_id() const {
  // @@protoc_insertion_point(field_get:OrderInfo.active_user_id)
  return _internal_active_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_active_user_id(ArgT0&& arg0, ArgT... args) {
 
 active_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.active_user_id)
}
inline std::string* OrderInfo::mutable_active_user_id() {
  std::string* _s = _internal_mutable_active_user_id();
  // @@protoc_insertion_point(field_mutable:OrderInfo.active_user_id)
  return _s;
}
inline const std::string& OrderInfo::_internal_active_user_id() const {
  return active_user_id_.Get();
}
inline void OrderInfo::_internal_set_active_user_id(const std::string& value) {
  
  active_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_active_user_id() {
  
  return active_user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_active_user_id() {
  // @@protoc_insertion_point(field_release:OrderInfo.active_user_id)
  return active_user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_active_user_id(std::string* active_user_id) {
  if (active_user_id != nullptr) {
    
  } else {
    
  }
  active_user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), active_user_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (active_user_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    active_user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.active_user_id)
}

// int32 broker_order_seq = 54;
inline void OrderInfo::clear_broker_order_seq() {
  broker_order_seq_ = 0;
}
inline int32_t OrderInfo::_internal_broker_order_seq() const {
  return broker_order_seq_;
}
inline int32_t OrderInfo::broker_order_seq() const {
  // @@protoc_insertion_point(field_get:OrderInfo.broker_order_seq)
  return _internal_broker_order_seq();
}
inline void OrderInfo::_internal_set_broker_order_seq(int32_t value) {
  
  broker_order_seq_ = value;
}
inline void OrderInfo::set_broker_order_seq(int32_t value) {
  _internal_set_broker_order_seq(value);
  // @@protoc_insertion_point(field_set:OrderInfo.broker_order_seq)
}

// string relative_order_sys_id = 55;
inline void OrderInfo::clear_relative_order_sys_id() {
  relative_order_sys_id_.ClearToEmpty();
}
inline const std::string& OrderInfo::relative_order_sys_id() const {
  // @@protoc_insertion_point(field_get:OrderInfo.relative_order_sys_id)
  return _internal_relative_order_sys_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_relative_order_sys_id(ArgT0&& arg0, ArgT... args) {
 
 relative_order_sys_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.relative_order_sys_id)
}
inline std::string* OrderInfo::mutable_relative_order_sys_id() {
  std::string* _s = _internal_mutable_relative_order_sys_id();
  // @@protoc_insertion_point(field_mutable:OrderInfo.relative_order_sys_id)
  return _s;
}
inline const std::string& OrderInfo::_internal_relative_order_sys_id() const {
  return relative_order_sys_id_.Get();
}
inline void OrderInfo::_internal_set_relative_order_sys_id(const std::string& value) {
  
  relative_order_sys_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_relative_order_sys_id() {
  
  return relative_order_sys_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_relative_order_sys_id() {
  // @@protoc_insertion_point(field_release:OrderInfo.relative_order_sys_id)
  return relative_order_sys_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_relative_order_sys_id(std::string* relative_order_sys_id) {
  if (relative_order_sys_id != nullptr) {
    
  } else {
    
  }
  relative_order_sys_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), relative_order_sys_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (relative_order_sys_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    relative_order_sys_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.relative_order_sys_id)
}

// int32 zce_total_traded_volume = 56;
inline void OrderInfo::clear_zce_total_traded_volume() {
  zce_total_traded_volume_ = 0;
}
inline int32_t OrderInfo::_internal_zce_total_traded_volume() const {
  return zce_total_traded_volume_;
}
inline int32_t OrderInfo::zce_total_traded_volume() const {
  // @@protoc_insertion_point(field_get:OrderInfo.zce_total_traded_volume)
  return _internal_zce_total_traded_volume();
}
inline void OrderInfo::_internal_set_zce_total_traded_volume(int32_t value) {
  
  zce_total_traded_volume_ = value;
}
inline void OrderInfo::set_zce_total_traded_volume(int32_t value) {
  _internal_set_zce_total_traded_volume(value);
  // @@protoc_insertion_point(field_set:OrderInfo.zce_total_traded_volume)
}

// int32 is_swap_order = 57;
inline void OrderInfo::clear_is_swap_order() {
  is_swap_order_ = 0;
}
inline int32_t OrderInfo::_internal_is_swap_order() const {
  return is_swap_order_;
}
inline int32_t OrderInfo::is_swap_order() const {
  // @@protoc_insertion_point(field_get:OrderInfo.is_swap_order)
  return _internal_is_swap_order();
}
inline void OrderInfo::_internal_set_is_swap_order(int32_t value) {
  
  is_swap_order_ = value;
}
inline void OrderInfo::set_is_swap_order(int32_t value) {
  _internal_set_is_swap_order(value);
  // @@protoc_insertion_point(field_set:OrderInfo.is_swap_order)
}

// string branch_id = 58;
inline void OrderInfo::clear_branch_id() {
  branch_id_.ClearToEmpty();
}
inline const std::string& OrderInfo::branch_id() const {
  // @@protoc_insertion_point(field_get:OrderInfo.branch_id)
  return _internal_branch_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_branch_id(ArgT0&& arg0, ArgT... args) {
 
 branch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.branch_id)
}
inline std::string* OrderInfo::mutable_branch_id() {
  std::string* _s = _internal_mutable_branch_id();
  // @@protoc_insertion_point(field_mutable:OrderInfo.branch_id)
  return _s;
}
inline const std::string& OrderInfo::_internal_branch_id() const {
  return branch_id_.Get();
}
inline void OrderInfo::_internal_set_branch_id(const std::string& value) {
  
  branch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_branch_id() {
  
  return branch_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_branch_id() {
  // @@protoc_insertion_point(field_release:OrderInfo.branch_id)
  return branch_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_branch_id(std::string* branch_id) {
  if (branch_id != nullptr) {
    
  } else {
    
  }
  branch_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), branch_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (branch_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    branch_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.branch_id)
}

// string invest_unit_id = 59;
inline void OrderInfo::clear_invest_unit_id() {
  invest_unit_id_.ClearToEmpty();
}
inline const std::string& OrderInfo::invest_unit_id() const {
  // @@protoc_insertion_point(field_get:OrderInfo.invest_unit_id)
  return _internal_invest_unit_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_invest_unit_id(ArgT0&& arg0, ArgT... args) {
 
 invest_unit_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.invest_unit_id)
}
inline std::string* OrderInfo::mutable_invest_unit_id() {
  std::string* _s = _internal_mutable_invest_unit_id();
  // @@protoc_insertion_point(field_mutable:OrderInfo.invest_unit_id)
  return _s;
}
inline const std::string& OrderInfo::_internal_invest_unit_id() const {
  return invest_unit_id_.Get();
}
inline void OrderInfo::_internal_set_invest_unit_id(const std::string& value) {
  
  invest_unit_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_invest_unit_id() {
  
  return invest_unit_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_invest_unit_id() {
  // @@protoc_insertion_point(field_release:OrderInfo.invest_unit_id)
  return invest_unit_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_invest_unit_id(std::string* invest_unit_id) {
  if (invest_unit_id != nullptr) {
    
  } else {
    
  }
  invest_unit_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invest_unit_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (invest_unit_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    invest_unit_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.invest_unit_id)
}

// string account_id = 60;
inline void OrderInfo::clear_account_id() {
  account_id_.ClearToEmpty();
}
inline const std::string& OrderInfo::account_id() const {
  // @@protoc_insertion_point(field_get:OrderInfo.account_id)
  return _internal_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_account_id(ArgT0&& arg0, ArgT... args) {
 
 account_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.account_id)
}
inline std::string* OrderInfo::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:OrderInfo.account_id)
  return _s;
}
inline const std::string& OrderInfo::_internal_account_id() const {
  return account_id_.Get();
}
inline void OrderInfo::_internal_set_account_id(const std::string& value) {
  
  account_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_account_id() {
  
  return account_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_account_id() {
  // @@protoc_insertion_point(field_release:OrderInfo.account_id)
  return account_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    account_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.account_id)
}

// string currency_id = 61;
inline void OrderInfo::clear_currency_id() {
  currency_id_.ClearToEmpty();
}
inline const std::string& OrderInfo::currency_id() const {
  // @@protoc_insertion_point(field_get:OrderInfo.currency_id)
  return _internal_currency_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_currency_id(ArgT0&& arg0, ArgT... args) {
 
 currency_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.currency_id)
}
inline std::string* OrderInfo::mutable_currency_id() {
  std::string* _s = _internal_mutable_currency_id();
  // @@protoc_insertion_point(field_mutable:OrderInfo.currency_id)
  return _s;
}
inline const std::string& OrderInfo::_internal_currency_id() const {
  return currency_id_.Get();
}
inline void OrderInfo::_internal_set_currency_id(const std::string& value) {
  
  currency_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_currency_id() {
  
  return currency_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_currency_id() {
  // @@protoc_insertion_point(field_release:OrderInfo.currency_id)
  return currency_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_currency_id(std::string* currency_id) {
  if (currency_id != nullptr) {
    
  } else {
    
  }
  currency_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (currency_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    currency_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.currency_id)
}

// string reserve_3 = 62;
inline void OrderInfo::clear_reserve_3() {
  reserve_3_.ClearToEmpty();
}
inline const std::string& OrderInfo::reserve_3() const {
  // @@protoc_insertion_point(field_get:OrderInfo.reserve_3)
  return _internal_reserve_3();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_reserve_3(ArgT0&& arg0, ArgT... args) {
 
 reserve_3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.reserve_3)
}
inline std::string* OrderInfo::mutable_reserve_3() {
  std::string* _s = _internal_mutable_reserve_3();
  // @@protoc_insertion_point(field_mutable:OrderInfo.reserve_3)
  return _s;
}
inline const std::string& OrderInfo::_internal_reserve_3() const {
  return reserve_3_.Get();
}
inline void OrderInfo::_internal_set_reserve_3(const std::string& value) {
  
  reserve_3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_reserve_3() {
  
  return reserve_3_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_reserve_3() {
  // @@protoc_insertion_point(field_release:OrderInfo.reserve_3)
  return reserve_3_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_reserve_3(std::string* reserve_3) {
  if (reserve_3 != nullptr) {
    
  } else {
    
  }
  reserve_3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reserve_3,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reserve_3_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reserve_3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.reserve_3)
}

// string mac_address = 63;
inline void OrderInfo::clear_mac_address() {
  mac_address_.ClearToEmpty();
}
inline const std::string& OrderInfo::mac_address() const {
  // @@protoc_insertion_point(field_get:OrderInfo.mac_address)
  return _internal_mac_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_mac_address(ArgT0&& arg0, ArgT... args) {
 
 mac_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.mac_address)
}
inline std::string* OrderInfo::mutable_mac_address() {
  std::string* _s = _internal_mutable_mac_address();
  // @@protoc_insertion_point(field_mutable:OrderInfo.mac_address)
  return _s;
}
inline const std::string& OrderInfo::_internal_mac_address() const {
  return mac_address_.Get();
}
inline void OrderInfo::_internal_set_mac_address(const std::string& value) {
  
  mac_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_mac_address() {
  
  return mac_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_mac_address() {
  // @@protoc_insertion_point(field_release:OrderInfo.mac_address)
  return mac_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_mac_address(std::string* mac_address) {
  if (mac_address != nullptr) {
    
  } else {
    
  }
  mac_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mac_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.mac_address)
}

// string instrument_id = 64;
inline void OrderInfo::clear_instrument_id() {
  instrument_id_.ClearToEmpty();
}
inline const std::string& OrderInfo::instrument_id() const {
  // @@protoc_insertion_point(field_get:OrderInfo.instrument_id)
  return _internal_instrument_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_instrument_id(ArgT0&& arg0, ArgT... args) {
 
 instrument_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.instrument_id)
}
inline std::string* OrderInfo::mutable_instrument_id() {
  std::string* _s = _internal_mutable_instrument_id();
  // @@protoc_insertion_point(field_mutable:OrderInfo.instrument_id)
  return _s;
}
inline const std::string& OrderInfo::_internal_instrument_id() const {
  return instrument_id_.Get();
}
inline void OrderInfo::_internal_set_instrument_id(const std::string& value) {
  
  instrument_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_instrument_id() {
  
  return instrument_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_instrument_id() {
  // @@protoc_insertion_point(field_release:OrderInfo.instrument_id)
  return instrument_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_instrument_id(std::string* instrument_id) {
  if (instrument_id != nullptr) {
    
  } else {
    
  }
  instrument_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrument_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (instrument_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.instrument_id)
}

// string exchange_inst_id = 65;
inline void OrderInfo::clear_exchange_inst_id() {
  exchange_inst_id_.ClearToEmpty();
}
inline const std::string& OrderInfo::exchange_inst_id() const {
  // @@protoc_insertion_point(field_get:OrderInfo.exchange_inst_id)
  return _internal_exchange_inst_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_exchange_inst_id(ArgT0&& arg0, ArgT... args) {
 
 exchange_inst_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.exchange_inst_id)
}
inline std::string* OrderInfo::mutable_exchange_inst_id() {
  std::string* _s = _internal_mutable_exchange_inst_id();
  // @@protoc_insertion_point(field_mutable:OrderInfo.exchange_inst_id)
  return _s;
}
inline const std::string& OrderInfo::_internal_exchange_inst_id() const {
  return exchange_inst_id_.Get();
}
inline void OrderInfo::_internal_set_exchange_inst_id(const std::string& value) {
  
  exchange_inst_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_exchange_inst_id() {
  
  return exchange_inst_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_exchange_inst_id() {
  // @@protoc_insertion_point(field_release:OrderInfo.exchange_inst_id)
  return exchange_inst_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_exchange_inst_id(std::string* exchange_inst_id) {
  if (exchange_inst_id != nullptr) {
    
  } else {
    
  }
  exchange_inst_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_inst_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (exchange_inst_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    exchange_inst_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.exchange_inst_id)
}

// string ip_address = 66;
inline void OrderInfo::clear_ip_address() {
  ip_address_.ClearToEmpty();
}
inline const std::string& OrderInfo::ip_address() const {
  // @@protoc_insertion_point(field_get:OrderInfo.ip_address)
  return _internal_ip_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_ip_address(ArgT0&& arg0, ArgT... args) {
 
 ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.ip_address)
}
inline std::string* OrderInfo::mutable_ip_address() {
  std::string* _s = _internal_mutable_ip_address();
  // @@protoc_insertion_point(field_mutable:OrderInfo.ip_address)
  return _s;
}
inline const std::string& OrderInfo::_internal_ip_address() const {
  return ip_address_.Get();
}
inline void OrderInfo::_internal_set_ip_address(const std::string& value) {
  
  ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_ip_address() {
  
  return ip_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_ip_address() {
  // @@protoc_insertion_point(field_release:OrderInfo.ip_address)
  return ip_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_ip_address(std::string* ip_address) {
  if (ip_address != nullptr) {
    
  } else {
    
  }
  ip_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.ip_address)
}

// string direction_zn = 67;
inline void OrderInfo::clear_direction_zn() {
  direction_zn_.ClearToEmpty();
}
inline const std::string& OrderInfo::direction_zn() const {
  // @@protoc_insertion_point(field_get:OrderInfo.direction_zn)
  return _internal_direction_zn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_direction_zn(ArgT0&& arg0, ArgT... args) {
 
 direction_zn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.direction_zn)
}
inline std::string* OrderInfo::mutable_direction_zn() {
  std::string* _s = _internal_mutable_direction_zn();
  // @@protoc_insertion_point(field_mutable:OrderInfo.direction_zn)
  return _s;
}
inline const std::string& OrderInfo::_internal_direction_zn() const {
  return direction_zn_.Get();
}
inline void OrderInfo::_internal_set_direction_zn(const std::string& value) {
  
  direction_zn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_direction_zn() {
  
  return direction_zn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_direction_zn() {
  // @@protoc_insertion_point(field_release:OrderInfo.direction_zn)
  return direction_zn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_direction_zn(std::string* direction_zn) {
  if (direction_zn != nullptr) {
    
  } else {
    
  }
  direction_zn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), direction_zn,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (direction_zn_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    direction_zn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.direction_zn)
}

// string order_status_zn = 68;
inline void OrderInfo::clear_order_status_zn() {
  order_status_zn_.ClearToEmpty();
}
inline const std::string& OrderInfo::order_status_zn() const {
  // @@protoc_insertion_point(field_get:OrderInfo.order_status_zn)
  return _internal_order_status_zn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_order_status_zn(ArgT0&& arg0, ArgT... args) {
 
 order_status_zn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.order_status_zn)
}
inline std::string* OrderInfo::mutable_order_status_zn() {
  std::string* _s = _internal_mutable_order_status_zn();
  // @@protoc_insertion_point(field_mutable:OrderInfo.order_status_zn)
  return _s;
}
inline const std::string& OrderInfo::_internal_order_status_zn() const {
  return order_status_zn_.Get();
}
inline void OrderInfo::_internal_set_order_status_zn(const std::string& value) {
  
  order_status_zn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_order_status_zn() {
  
  return order_status_zn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_order_status_zn() {
  // @@protoc_insertion_point(field_release:OrderInfo.order_status_zn)
  return order_status_zn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_order_status_zn(std::string* order_status_zn) {
  if (order_status_zn != nullptr) {
    
  } else {
    
  }
  order_status_zn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_status_zn,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_status_zn_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    order_status_zn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.order_status_zn)
}

// string status_msg_zn = 69;
inline void OrderInfo::clear_status_msg_zn() {
  status_msg_zn_.ClearToEmpty();
}
inline const std::string& OrderInfo::status_msg_zn() const {
  // @@protoc_insertion_point(field_get:OrderInfo.status_msg_zn)
  return _internal_status_msg_zn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_status_msg_zn(ArgT0&& arg0, ArgT... args) {
 
 status_msg_zn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.status_msg_zn)
}
inline std::string* OrderInfo::mutable_status_msg_zn() {
  std::string* _s = _internal_mutable_status_msg_zn();
  // @@protoc_insertion_point(field_mutable:OrderInfo.status_msg_zn)
  return _s;
}
inline const std::string& OrderInfo::_internal_status_msg_zn() const {
  return status_msg_zn_.Get();
}
inline void OrderInfo::_internal_set_status_msg_zn(const std::string& value) {
  
  status_msg_zn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_status_msg_zn() {
  
  return status_msg_zn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_status_msg_zn() {
  // @@protoc_insertion_point(field_release:OrderInfo.status_msg_zn)
  return status_msg_zn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_status_msg_zn(std::string* status_msg_zn) {
  if (status_msg_zn != nullptr) {
    
  } else {
    
  }
  status_msg_zn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status_msg_zn,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_msg_zn_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    status_msg_zn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.status_msg_zn)
}

// string comb_offset_flag_zn = 70;
inline void OrderInfo::clear_comb_offset_flag_zn() {
  comb_offset_flag_zn_.ClearToEmpty();
}
inline const std::string& OrderInfo::comb_offset_flag_zn() const {
  // @@protoc_insertion_point(field_get:OrderInfo.comb_offset_flag_zn)
  return _internal_comb_offset_flag_zn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderInfo::set_comb_offset_flag_zn(ArgT0&& arg0, ArgT... args) {
 
 comb_offset_flag_zn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderInfo.comb_offset_flag_zn)
}
inline std::string* OrderInfo::mutable_comb_offset_flag_zn() {
  std::string* _s = _internal_mutable_comb_offset_flag_zn();
  // @@protoc_insertion_point(field_mutable:OrderInfo.comb_offset_flag_zn)
  return _s;
}
inline const std::string& OrderInfo::_internal_comb_offset_flag_zn() const {
  return comb_offset_flag_zn_.Get();
}
inline void OrderInfo::_internal_set_comb_offset_flag_zn(const std::string& value) {
  
  comb_offset_flag_zn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderInfo::_internal_mutable_comb_offset_flag_zn() {
  
  return comb_offset_flag_zn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderInfo::release_comb_offset_flag_zn() {
  // @@protoc_insertion_point(field_release:OrderInfo.comb_offset_flag_zn)
  return comb_offset_flag_zn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderInfo::set_allocated_comb_offset_flag_zn(std::string* comb_offset_flag_zn) {
  if (comb_offset_flag_zn != nullptr) {
    
  } else {
    
  }
  comb_offset_flag_zn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comb_offset_flag_zn,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (comb_offset_flag_zn_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    comb_offset_flag_zn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderInfo.comb_offset_flag_zn)
}

// -------------------------------------------------------------------

// OrderActionInfo

// string broker_id = 1;
inline void OrderActionInfo::clear_broker_id() {
  broker_id_.ClearToEmpty();
}
inline const std::string& OrderActionInfo::broker_id() const {
  // @@protoc_insertion_point(field_get:OrderActionInfo.broker_id)
  return _internal_broker_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderActionInfo::set_broker_id(ArgT0&& arg0, ArgT... args) {
 
 broker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderActionInfo.broker_id)
}
inline std::string* OrderActionInfo::mutable_broker_id() {
  std::string* _s = _internal_mutable_broker_id();
  // @@protoc_insertion_point(field_mutable:OrderActionInfo.broker_id)
  return _s;
}
inline const std::string& OrderActionInfo::_internal_broker_id() const {
  return broker_id_.Get();
}
inline void OrderActionInfo::_internal_set_broker_id(const std::string& value) {
  
  broker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::_internal_mutable_broker_id() {
  
  return broker_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::release_broker_id() {
  // @@protoc_insertion_point(field_release:OrderActionInfo.broker_id)
  return broker_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderActionInfo::set_allocated_broker_id(std::string* broker_id) {
  if (broker_id != nullptr) {
    
  } else {
    
  }
  broker_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), broker_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (broker_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    broker_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderActionInfo.broker_id)
}

// string investor_id = 2;
inline void OrderActionInfo::clear_investor_id() {
  investor_id_.ClearToEmpty();
}
inline const std::string& OrderActionInfo::investor_id() const {
  // @@protoc_insertion_point(field_get:OrderActionInfo.investor_id)
  return _internal_investor_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderActionInfo::set_investor_id(ArgT0&& arg0, ArgT... args) {
 
 investor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderActionInfo.investor_id)
}
inline std::string* OrderActionInfo::mutable_investor_id() {
  std::string* _s = _internal_mutable_investor_id();
  // @@protoc_insertion_point(field_mutable:OrderActionInfo.investor_id)
  return _s;
}
inline const std::string& OrderActionInfo::_internal_investor_id() const {
  return investor_id_.Get();
}
inline void OrderActionInfo::_internal_set_investor_id(const std::string& value) {
  
  investor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::_internal_mutable_investor_id() {
  
  return investor_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::release_investor_id() {
  // @@protoc_insertion_point(field_release:OrderActionInfo.investor_id)
  return investor_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderActionInfo::set_allocated_investor_id(std::string* investor_id) {
  if (investor_id != nullptr) {
    
  } else {
    
  }
  investor_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), investor_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (investor_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    investor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderActionInfo.investor_id)
}

// int32 order_action_ref = 3;
inline void OrderActionInfo::clear_order_action_ref() {
  order_action_ref_ = 0;
}
inline int32_t OrderActionInfo::_internal_order_action_ref() const {
  return order_action_ref_;
}
inline int32_t OrderActionInfo::order_action_ref() const {
  // @@protoc_insertion_point(field_get:OrderActionInfo.order_action_ref)
  return _internal_order_action_ref();
}
inline void OrderActionInfo::_internal_set_order_action_ref(int32_t value) {
  
  order_action_ref_ = value;
}
inline void OrderActionInfo::set_order_action_ref(int32_t value) {
  _internal_set_order_action_ref(value);
  // @@protoc_insertion_point(field_set:OrderActionInfo.order_action_ref)
}

// string order_ref = 4;
inline void OrderActionInfo::clear_order_ref() {
  order_ref_.ClearToEmpty();
}
inline const std::string& OrderActionInfo::order_ref() const {
  // @@protoc_insertion_point(field_get:OrderActionInfo.order_ref)
  return _internal_order_ref();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderActionInfo::set_order_ref(ArgT0&& arg0, ArgT... args) {
 
 order_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderActionInfo.order_ref)
}
inline std::string* OrderActionInfo::mutable_order_ref() {
  std::string* _s = _internal_mutable_order_ref();
  // @@protoc_insertion_point(field_mutable:OrderActionInfo.order_ref)
  return _s;
}
inline const std::string& OrderActionInfo::_internal_order_ref() const {
  return order_ref_.Get();
}
inline void OrderActionInfo::_internal_set_order_ref(const std::string& value) {
  
  order_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::_internal_mutable_order_ref() {
  
  return order_ref_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::release_order_ref() {
  // @@protoc_insertion_point(field_release:OrderActionInfo.order_ref)
  return order_ref_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderActionInfo::set_allocated_order_ref(std::string* order_ref) {
  if (order_ref != nullptr) {
    
  } else {
    
  }
  order_ref_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_ref,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_ref_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    order_ref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderActionInfo.order_ref)
}

// int32 request_id = 5;
inline void OrderActionInfo::clear_request_id() {
  request_id_ = 0;
}
inline int32_t OrderActionInfo::_internal_request_id() const {
  return request_id_;
}
inline int32_t OrderActionInfo::request_id() const {
  // @@protoc_insertion_point(field_get:OrderActionInfo.request_id)
  return _internal_request_id();
}
inline void OrderActionInfo::_internal_set_request_id(int32_t value) {
  
  request_id_ = value;
}
inline void OrderActionInfo::set_request_id(int32_t value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:OrderActionInfo.request_id)
}

// int32 front_id = 6;
inline void OrderActionInfo::clear_front_id() {
  front_id_ = 0;
}
inline int32_t OrderActionInfo::_internal_front_id() const {
  return front_id_;
}
inline int32_t OrderActionInfo::front_id() const {
  // @@protoc_insertion_point(field_get:OrderActionInfo.front_id)
  return _internal_front_id();
}
inline void OrderActionInfo::_internal_set_front_id(int32_t value) {
  
  front_id_ = value;
}
inline void OrderActionInfo::set_front_id(int32_t value) {
  _internal_set_front_id(value);
  // @@protoc_insertion_point(field_set:OrderActionInfo.front_id)
}

// int32 session_id = 7;
inline void OrderActionInfo::clear_session_id() {
  session_id_ = 0;
}
inline int32_t OrderActionInfo::_internal_session_id() const {
  return session_id_;
}
inline int32_t OrderActionInfo::session_id() const {
  // @@protoc_insertion_point(field_get:OrderActionInfo.session_id)
  return _internal_session_id();
}
inline void OrderActionInfo::_internal_set_session_id(int32_t value) {
  
  session_id_ = value;
}
inline void OrderActionInfo::set_session_id(int32_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:OrderActionInfo.session_id)
}

// string exchange_id = 8;
inline void OrderActionInfo::clear_exchange_id() {
  exchange_id_.ClearToEmpty();
}
inline const std::string& OrderActionInfo::exchange_id() const {
  // @@protoc_insertion_point(field_get:OrderActionInfo.exchange_id)
  return _internal_exchange_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderActionInfo::set_exchange_id(ArgT0&& arg0, ArgT... args) {
 
 exchange_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderActionInfo.exchange_id)
}
inline std::string* OrderActionInfo::mutable_exchange_id() {
  std::string* _s = _internal_mutable_exchange_id();
  // @@protoc_insertion_point(field_mutable:OrderActionInfo.exchange_id)
  return _s;
}
inline const std::string& OrderActionInfo::_internal_exchange_id() const {
  return exchange_id_.Get();
}
inline void OrderActionInfo::_internal_set_exchange_id(const std::string& value) {
  
  exchange_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::_internal_mutable_exchange_id() {
  
  return exchange_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::release_exchange_id() {
  // @@protoc_insertion_point(field_release:OrderActionInfo.exchange_id)
  return exchange_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderActionInfo::set_allocated_exchange_id(std::string* exchange_id) {
  if (exchange_id != nullptr) {
    
  } else {
    
  }
  exchange_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (exchange_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderActionInfo.exchange_id)
}

// string order_sys_id = 9;
inline void OrderActionInfo::clear_order_sys_id() {
  order_sys_id_.ClearToEmpty();
}
inline const std::string& OrderActionInfo::order_sys_id() const {
  // @@protoc_insertion_point(field_get:OrderActionInfo.order_sys_id)
  return _internal_order_sys_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderActionInfo::set_order_sys_id(ArgT0&& arg0, ArgT... args) {
 
 order_sys_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderActionInfo.order_sys_id)
}
inline std::string* OrderActionInfo::mutable_order_sys_id() {
  std::string* _s = _internal_mutable_order_sys_id();
  // @@protoc_insertion_point(field_mutable:OrderActionInfo.order_sys_id)
  return _s;
}
inline const std::string& OrderActionInfo::_internal_order_sys_id() const {
  return order_sys_id_.Get();
}
inline void OrderActionInfo::_internal_set_order_sys_id(const std::string& value) {
  
  order_sys_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::_internal_mutable_order_sys_id() {
  
  return order_sys_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::release_order_sys_id() {
  // @@protoc_insertion_point(field_release:OrderActionInfo.order_sys_id)
  return order_sys_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderActionInfo::set_allocated_order_sys_id(std::string* order_sys_id) {
  if (order_sys_id != nullptr) {
    
  } else {
    
  }
  order_sys_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_sys_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_sys_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    order_sys_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderActionInfo.order_sys_id)
}

// string action_flag = 10;
inline void OrderActionInfo::clear_action_flag() {
  action_flag_.ClearToEmpty();
}
inline const std::string& OrderActionInfo::action_flag() const {
  // @@protoc_insertion_point(field_get:OrderActionInfo.action_flag)
  return _internal_action_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderActionInfo::set_action_flag(ArgT0&& arg0, ArgT... args) {
 
 action_flag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderActionInfo.action_flag)
}
inline std::string* OrderActionInfo::mutable_action_flag() {
  std::string* _s = _internal_mutable_action_flag();
  // @@protoc_insertion_point(field_mutable:OrderActionInfo.action_flag)
  return _s;
}
inline const std::string& OrderActionInfo::_internal_action_flag() const {
  return action_flag_.Get();
}
inline void OrderActionInfo::_internal_set_action_flag(const std::string& value) {
  
  action_flag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::_internal_mutable_action_flag() {
  
  return action_flag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::release_action_flag() {
  // @@protoc_insertion_point(field_release:OrderActionInfo.action_flag)
  return action_flag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderActionInfo::set_allocated_action_flag(std::string* action_flag) {
  if (action_flag != nullptr) {
    
  } else {
    
  }
  action_flag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action_flag,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_flag_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    action_flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderActionInfo.action_flag)
}

// double limit_price = 11;
inline void OrderActionInfo::clear_limit_price() {
  limit_price_ = 0;
}
inline double OrderActionInfo::_internal_limit_price() const {
  return limit_price_;
}
inline double OrderActionInfo::limit_price() const {
  // @@protoc_insertion_point(field_get:OrderActionInfo.limit_price)
  return _internal_limit_price();
}
inline void OrderActionInfo::_internal_set_limit_price(double value) {
  
  limit_price_ = value;
}
inline void OrderActionInfo::set_limit_price(double value) {
  _internal_set_limit_price(value);
  // @@protoc_insertion_point(field_set:OrderActionInfo.limit_price)
}

// int32 volume_change = 12;
inline void OrderActionInfo::clear_volume_change() {
  volume_change_ = 0;
}
inline int32_t OrderActionInfo::_internal_volume_change() const {
  return volume_change_;
}
inline int32_t OrderActionInfo::volume_change() const {
  // @@protoc_insertion_point(field_get:OrderActionInfo.volume_change)
  return _internal_volume_change();
}
inline void OrderActionInfo::_internal_set_volume_change(int32_t value) {
  
  volume_change_ = value;
}
inline void OrderActionInfo::set_volume_change(int32_t value) {
  _internal_set_volume_change(value);
  // @@protoc_insertion_point(field_set:OrderActionInfo.volume_change)
}

// string action_date = 13;
inline void OrderActionInfo::clear_action_date() {
  action_date_.ClearToEmpty();
}
inline const std::string& OrderActionInfo::action_date() const {
  // @@protoc_insertion_point(field_get:OrderActionInfo.action_date)
  return _internal_action_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderActionInfo::set_action_date(ArgT0&& arg0, ArgT... args) {
 
 action_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderActionInfo.action_date)
}
inline std::string* OrderActionInfo::mutable_action_date() {
  std::string* _s = _internal_mutable_action_date();
  // @@protoc_insertion_point(field_mutable:OrderActionInfo.action_date)
  return _s;
}
inline const std::string& OrderActionInfo::_internal_action_date() const {
  return action_date_.Get();
}
inline void OrderActionInfo::_internal_set_action_date(const std::string& value) {
  
  action_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::_internal_mutable_action_date() {
  
  return action_date_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::release_action_date() {
  // @@protoc_insertion_point(field_release:OrderActionInfo.action_date)
  return action_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderActionInfo::set_allocated_action_date(std::string* action_date) {
  if (action_date != nullptr) {
    
  } else {
    
  }
  action_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action_date,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_date_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    action_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderActionInfo.action_date)
}

// string action_time = 14;
inline void OrderActionInfo::clear_action_time() {
  action_time_.ClearToEmpty();
}
inline const std::string& OrderActionInfo::action_time() const {
  // @@protoc_insertion_point(field_get:OrderActionInfo.action_time)
  return _internal_action_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderActionInfo::set_action_time(ArgT0&& arg0, ArgT... args) {
 
 action_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderActionInfo.action_time)
}
inline std::string* OrderActionInfo::mutable_action_time() {
  std::string* _s = _internal_mutable_action_time();
  // @@protoc_insertion_point(field_mutable:OrderActionInfo.action_time)
  return _s;
}
inline const std::string& OrderActionInfo::_internal_action_time() const {
  return action_time_.Get();
}
inline void OrderActionInfo::_internal_set_action_time(const std::string& value) {
  
  action_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::_internal_mutable_action_time() {
  
  return action_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::release_action_time() {
  // @@protoc_insertion_point(field_release:OrderActionInfo.action_time)
  return action_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderActionInfo::set_allocated_action_time(std::string* action_time) {
  if (action_time != nullptr) {
    
  } else {
    
  }
  action_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action_time,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_time_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    action_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderActionInfo.action_time)
}

// string trader_id = 15;
inline void OrderActionInfo::clear_trader_id() {
  trader_id_.ClearToEmpty();
}
inline const std::string& OrderActionInfo::trader_id() const {
  // @@protoc_insertion_point(field_get:OrderActionInfo.trader_id)
  return _internal_trader_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderActionInfo::set_trader_id(ArgT0&& arg0, ArgT... args) {
 
 trader_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderActionInfo.trader_id)
}
inline std::string* OrderActionInfo::mutable_trader_id() {
  std::string* _s = _internal_mutable_trader_id();
  // @@protoc_insertion_point(field_mutable:OrderActionInfo.trader_id)
  return _s;
}
inline const std::string& OrderActionInfo::_internal_trader_id() const {
  return trader_id_.Get();
}
inline void OrderActionInfo::_internal_set_trader_id(const std::string& value) {
  
  trader_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::_internal_mutable_trader_id() {
  
  return trader_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::release_trader_id() {
  // @@protoc_insertion_point(field_release:OrderActionInfo.trader_id)
  return trader_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderActionInfo::set_allocated_trader_id(std::string* trader_id) {
  if (trader_id != nullptr) {
    
  } else {
    
  }
  trader_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trader_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trader_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    trader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderActionInfo.trader_id)
}

// int32 install_id = 16;
inline void OrderActionInfo::clear_install_id() {
  install_id_ = 0;
}
inline int32_t OrderActionInfo::_internal_install_id() const {
  return install_id_;
}
inline int32_t OrderActionInfo::install_id() const {
  // @@protoc_insertion_point(field_get:OrderActionInfo.install_id)
  return _internal_install_id();
}
inline void OrderActionInfo::_internal_set_install_id(int32_t value) {
  
  install_id_ = value;
}
inline void OrderActionInfo::set_install_id(int32_t value) {
  _internal_set_install_id(value);
  // @@protoc_insertion_point(field_set:OrderActionInfo.install_id)
}

// string order_local_id = 17;
inline void OrderActionInfo::clear_order_local_id() {
  order_local_id_.ClearToEmpty();
}
inline const std::string& OrderActionInfo::order_local_id() const {
  // @@protoc_insertion_point(field_get:OrderActionInfo.order_local_id)
  return _internal_order_local_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderActionInfo::set_order_local_id(ArgT0&& arg0, ArgT... args) {
 
 order_local_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderActionInfo.order_local_id)
}
inline std::string* OrderActionInfo::mutable_order_local_id() {
  std::string* _s = _internal_mutable_order_local_id();
  // @@protoc_insertion_point(field_mutable:OrderActionInfo.order_local_id)
  return _s;
}
inline const std::string& OrderActionInfo::_internal_order_local_id() const {
  return order_local_id_.Get();
}
inline void OrderActionInfo::_internal_set_order_local_id(const std::string& value) {
  
  order_local_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::_internal_mutable_order_local_id() {
  
  return order_local_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::release_order_local_id() {
  // @@protoc_insertion_point(field_release:OrderActionInfo.order_local_id)
  return order_local_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderActionInfo::set_allocated_order_local_id(std::string* order_local_id) {
  if (order_local_id != nullptr) {
    
  } else {
    
  }
  order_local_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_local_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_local_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    order_local_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderActionInfo.order_local_id)
}

// string action_local_id = 18;
inline void OrderActionInfo::clear_action_local_id() {
  action_local_id_.ClearToEmpty();
}
inline const std::string& OrderActionInfo::action_local_id() const {
  // @@protoc_insertion_point(field_get:OrderActionInfo.action_local_id)
  return _internal_action_local_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderActionInfo::set_action_local_id(ArgT0&& arg0, ArgT... args) {
 
 action_local_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderActionInfo.action_local_id)
}
inline std::string* OrderActionInfo::mutable_action_local_id() {
  std::string* _s = _internal_mutable_action_local_id();
  // @@protoc_insertion_point(field_mutable:OrderActionInfo.action_local_id)
  return _s;
}
inline const std::string& OrderActionInfo::_internal_action_local_id() const {
  return action_local_id_.Get();
}
inline void OrderActionInfo::_internal_set_action_local_id(const std::string& value) {
  
  action_local_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::_internal_mutable_action_local_id() {
  
  return action_local_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::release_action_local_id() {
  // @@protoc_insertion_point(field_release:OrderActionInfo.action_local_id)
  return action_local_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderActionInfo::set_allocated_action_local_id(std::string* action_local_id) {
  if (action_local_id != nullptr) {
    
  } else {
    
  }
  action_local_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action_local_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (action_local_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    action_local_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderActionInfo.action_local_id)
}

// string participant_id = 19;
inline void OrderActionInfo::clear_participant_id() {
  participant_id_.ClearToEmpty();
}
inline const std::string& OrderActionInfo::participant_id() const {
  // @@protoc_insertion_point(field_get:OrderActionInfo.participant_id)
  return _internal_participant_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderActionInfo::set_participant_id(ArgT0&& arg0, ArgT... args) {
 
 participant_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderActionInfo.participant_id)
}
inline std::string* OrderActionInfo::mutable_participant_id() {
  std::string* _s = _internal_mutable_participant_id();
  // @@protoc_insertion_point(field_mutable:OrderActionInfo.participant_id)
  return _s;
}
inline const std::string& OrderActionInfo::_internal_participant_id() const {
  return participant_id_.Get();
}
inline void OrderActionInfo::_internal_set_participant_id(const std::string& value) {
  
  participant_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::_internal_mutable_participant_id() {
  
  return participant_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::release_participant_id() {
  // @@protoc_insertion_point(field_release:OrderActionInfo.participant_id)
  return participant_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderActionInfo::set_allocated_participant_id(std::string* participant_id) {
  if (participant_id != nullptr) {
    
  } else {
    
  }
  participant_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), participant_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (participant_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    participant_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderActionInfo.participant_id)
}

// string client_id = 20;
inline void OrderActionInfo::clear_client_id() {
  client_id_.ClearToEmpty();
}
inline const std::string& OrderActionInfo::client_id() const {
  // @@protoc_insertion_point(field_get:OrderActionInfo.client_id)
  return _internal_client_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderActionInfo::set_client_id(ArgT0&& arg0, ArgT... args) {
 
 client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderActionInfo.client_id)
}
inline std::string* OrderActionInfo::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:OrderActionInfo.client_id)
  return _s;
}
inline const std::string& OrderActionInfo::_internal_client_id() const {
  return client_id_.Get();
}
inline void OrderActionInfo::_internal_set_client_id(const std::string& value) {
  
  client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::_internal_mutable_client_id() {
  
  return client_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::release_client_id() {
  // @@protoc_insertion_point(field_release:OrderActionInfo.client_id)
  return client_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderActionInfo::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderActionInfo.client_id)
}

// string business_unit = 21;
inline void OrderActionInfo::clear_business_unit() {
  business_unit_.ClearToEmpty();
}
inline const std::string& OrderActionInfo::business_unit() const {
  // @@protoc_insertion_point(field_get:OrderActionInfo.business_unit)
  return _internal_business_unit();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderActionInfo::set_business_unit(ArgT0&& arg0, ArgT... args) {
 
 business_unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderActionInfo.business_unit)
}
inline std::string* OrderActionInfo::mutable_business_unit() {
  std::string* _s = _internal_mutable_business_unit();
  // @@protoc_insertion_point(field_mutable:OrderActionInfo.business_unit)
  return _s;
}
inline const std::string& OrderActionInfo::_internal_business_unit() const {
  return business_unit_.Get();
}
inline void OrderActionInfo::_internal_set_business_unit(const std::string& value) {
  
  business_unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::_internal_mutable_business_unit() {
  
  return business_unit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::release_business_unit() {
  // @@protoc_insertion_point(field_release:OrderActionInfo.business_unit)
  return business_unit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderActionInfo::set_allocated_business_unit(std::string* business_unit) {
  if (business_unit != nullptr) {
    
  } else {
    
  }
  business_unit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), business_unit,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (business_unit_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    business_unit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderActionInfo.business_unit)
}

// string order_action_status = 22;
inline void OrderActionInfo::clear_order_action_status() {
  order_action_status_.ClearToEmpty();
}
inline const std::string& OrderActionInfo::order_action_status() const {
  // @@protoc_insertion_point(field_get:OrderActionInfo.order_action_status)
  return _internal_order_action_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderActionInfo::set_order_action_status(ArgT0&& arg0, ArgT... args) {
 
 order_action_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderActionInfo.order_action_status)
}
inline std::string* OrderActionInfo::mutable_order_action_status() {
  std::string* _s = _internal_mutable_order_action_status();
  // @@protoc_insertion_point(field_mutable:OrderActionInfo.order_action_status)
  return _s;
}
inline const std::string& OrderActionInfo::_internal_order_action_status() const {
  return order_action_status_.Get();
}
inline void OrderActionInfo::_internal_set_order_action_status(const std::string& value) {
  
  order_action_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::_internal_mutable_order_action_status() {
  
  return order_action_status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::release_order_action_status() {
  // @@protoc_insertion_point(field_release:OrderActionInfo.order_action_status)
  return order_action_status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderActionInfo::set_allocated_order_action_status(std::string* order_action_status) {
  if (order_action_status != nullptr) {
    
  } else {
    
  }
  order_action_status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_action_status,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_action_status_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    order_action_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderActionInfo.order_action_status)
}

// string user_id = 23;
inline void OrderActionInfo::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& OrderActionInfo::user_id() const {
  // @@protoc_insertion_point(field_get:OrderActionInfo.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderActionInfo::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderActionInfo.user_id)
}
inline std::string* OrderActionInfo::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:OrderActionInfo.user_id)
  return _s;
}
inline const std::string& OrderActionInfo::_internal_user_id() const {
  return user_id_.Get();
}
inline void OrderActionInfo::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::release_user_id() {
  // @@protoc_insertion_point(field_release:OrderActionInfo.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderActionInfo::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderActionInfo.user_id)
}

// string status_msg = 24;
inline void OrderActionInfo::clear_status_msg() {
  status_msg_.ClearToEmpty();
}
inline const std::string& OrderActionInfo::status_msg() const {
  // @@protoc_insertion_point(field_get:OrderActionInfo.status_msg)
  return _internal_status_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderActionInfo::set_status_msg(ArgT0&& arg0, ArgT... args) {
 
 status_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderActionInfo.status_msg)
}
inline std::string* OrderActionInfo::mutable_status_msg() {
  std::string* _s = _internal_mutable_status_msg();
  // @@protoc_insertion_point(field_mutable:OrderActionInfo.status_msg)
  return _s;
}
inline const std::string& OrderActionInfo::_internal_status_msg() const {
  return status_msg_.Get();
}
inline void OrderActionInfo::_internal_set_status_msg(const std::string& value) {
  
  status_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::_internal_mutable_status_msg() {
  
  return status_msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::release_status_msg() {
  // @@protoc_insertion_point(field_release:OrderActionInfo.status_msg)
  return status_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderActionInfo::set_allocated_status_msg(std::string* status_msg) {
  if (status_msg != nullptr) {
    
  } else {
    
  }
  status_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status_msg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_msg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    status_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderActionInfo.status_msg)
}

// string reserve_1 = 25;
inline void OrderActionInfo::clear_reserve_1() {
  reserve_1_.ClearToEmpty();
}
inline const std::string& OrderActionInfo::reserve_1() const {
  // @@protoc_insertion_point(field_get:OrderActionInfo.reserve_1)
  return _internal_reserve_1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderActionInfo::set_reserve_1(ArgT0&& arg0, ArgT... args) {
 
 reserve_1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderActionInfo.reserve_1)
}
inline std::string* OrderActionInfo::mutable_reserve_1() {
  std::string* _s = _internal_mutable_reserve_1();
  // @@protoc_insertion_point(field_mutable:OrderActionInfo.reserve_1)
  return _s;
}
inline const std::string& OrderActionInfo::_internal_reserve_1() const {
  return reserve_1_.Get();
}
inline void OrderActionInfo::_internal_set_reserve_1(const std::string& value) {
  
  reserve_1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::_internal_mutable_reserve_1() {
  
  return reserve_1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::release_reserve_1() {
  // @@protoc_insertion_point(field_release:OrderActionInfo.reserve_1)
  return reserve_1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderActionInfo::set_allocated_reserve_1(std::string* reserve_1) {
  if (reserve_1 != nullptr) {
    
  } else {
    
  }
  reserve_1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reserve_1,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reserve_1_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reserve_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderActionInfo.reserve_1)
}

// string branch_id = 26;
inline void OrderActionInfo::clear_branch_id() {
  branch_id_.ClearToEmpty();
}
inline const std::string& OrderActionInfo::branch_id() const {
  // @@protoc_insertion_point(field_get:OrderActionInfo.branch_id)
  return _internal_branch_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderActionInfo::set_branch_id(ArgT0&& arg0, ArgT... args) {
 
 branch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderActionInfo.branch_id)
}
inline std::string* OrderActionInfo::mutable_branch_id() {
  std::string* _s = _internal_mutable_branch_id();
  // @@protoc_insertion_point(field_mutable:OrderActionInfo.branch_id)
  return _s;
}
inline const std::string& OrderActionInfo::_internal_branch_id() const {
  return branch_id_.Get();
}
inline void OrderActionInfo::_internal_set_branch_id(const std::string& value) {
  
  branch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::_internal_mutable_branch_id() {
  
  return branch_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::release_branch_id() {
  // @@protoc_insertion_point(field_release:OrderActionInfo.branch_id)
  return branch_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderActionInfo::set_allocated_branch_id(std::string* branch_id) {
  if (branch_id != nullptr) {
    
  } else {
    
  }
  branch_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), branch_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (branch_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    branch_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderActionInfo.branch_id)
}

// string invest_unit_id = 27;
inline void OrderActionInfo::clear_invest_unit_id() {
  invest_unit_id_.ClearToEmpty();
}
inline const std::string& OrderActionInfo::invest_unit_id() const {
  // @@protoc_insertion_point(field_get:OrderActionInfo.invest_unit_id)
  return _internal_invest_unit_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderActionInfo::set_invest_unit_id(ArgT0&& arg0, ArgT... args) {
 
 invest_unit_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderActionInfo.invest_unit_id)
}
inline std::string* OrderActionInfo::mutable_invest_unit_id() {
  std::string* _s = _internal_mutable_invest_unit_id();
  // @@protoc_insertion_point(field_mutable:OrderActionInfo.invest_unit_id)
  return _s;
}
inline const std::string& OrderActionInfo::_internal_invest_unit_id() const {
  return invest_unit_id_.Get();
}
inline void OrderActionInfo::_internal_set_invest_unit_id(const std::string& value) {
  
  invest_unit_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::_internal_mutable_invest_unit_id() {
  
  return invest_unit_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::release_invest_unit_id() {
  // @@protoc_insertion_point(field_release:OrderActionInfo.invest_unit_id)
  return invest_unit_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderActionInfo::set_allocated_invest_unit_id(std::string* invest_unit_id) {
  if (invest_unit_id != nullptr) {
    
  } else {
    
  }
  invest_unit_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invest_unit_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (invest_unit_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    invest_unit_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderActionInfo.invest_unit_id)
}

// string reserve_2 = 28;
inline void OrderActionInfo::clear_reserve_2() {
  reserve_2_.ClearToEmpty();
}
inline const std::string& OrderActionInfo::reserve_2() const {
  // @@protoc_insertion_point(field_get:OrderActionInfo.reserve_2)
  return _internal_reserve_2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderActionInfo::set_reserve_2(ArgT0&& arg0, ArgT... args) {
 
 reserve_2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderActionInfo.reserve_2)
}
inline std::string* OrderActionInfo::mutable_reserve_2() {
  std::string* _s = _internal_mutable_reserve_2();
  // @@protoc_insertion_point(field_mutable:OrderActionInfo.reserve_2)
  return _s;
}
inline const std::string& OrderActionInfo::_internal_reserve_2() const {
  return reserve_2_.Get();
}
inline void OrderActionInfo::_internal_set_reserve_2(const std::string& value) {
  
  reserve_2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::_internal_mutable_reserve_2() {
  
  return reserve_2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::release_reserve_2() {
  // @@protoc_insertion_point(field_release:OrderActionInfo.reserve_2)
  return reserve_2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderActionInfo::set_allocated_reserve_2(std::string* reserve_2) {
  if (reserve_2 != nullptr) {
    
  } else {
    
  }
  reserve_2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reserve_2,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reserve_2_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reserve_2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderActionInfo.reserve_2)
}

// string mac_address = 29;
inline void OrderActionInfo::clear_mac_address() {
  mac_address_.ClearToEmpty();
}
inline const std::string& OrderActionInfo::mac_address() const {
  // @@protoc_insertion_point(field_get:OrderActionInfo.mac_address)
  return _internal_mac_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderActionInfo::set_mac_address(ArgT0&& arg0, ArgT... args) {
 
 mac_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderActionInfo.mac_address)
}
inline std::string* OrderActionInfo::mutable_mac_address() {
  std::string* _s = _internal_mutable_mac_address();
  // @@protoc_insertion_point(field_mutable:OrderActionInfo.mac_address)
  return _s;
}
inline const std::string& OrderActionInfo::_internal_mac_address() const {
  return mac_address_.Get();
}
inline void OrderActionInfo::_internal_set_mac_address(const std::string& value) {
  
  mac_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::_internal_mutable_mac_address() {
  
  return mac_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::release_mac_address() {
  // @@protoc_insertion_point(field_release:OrderActionInfo.mac_address)
  return mac_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderActionInfo::set_allocated_mac_address(std::string* mac_address) {
  if (mac_address != nullptr) {
    
  } else {
    
  }
  mac_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mac_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderActionInfo.mac_address)
}

// string instrument_id = 30;
inline void OrderActionInfo::clear_instrument_id() {
  instrument_id_.ClearToEmpty();
}
inline const std::string& OrderActionInfo::instrument_id() const {
  // @@protoc_insertion_point(field_get:OrderActionInfo.instrument_id)
  return _internal_instrument_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderActionInfo::set_instrument_id(ArgT0&& arg0, ArgT... args) {
 
 instrument_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderActionInfo.instrument_id)
}
inline std::string* OrderActionInfo::mutable_instrument_id() {
  std::string* _s = _internal_mutable_instrument_id();
  // @@protoc_insertion_point(field_mutable:OrderActionInfo.instrument_id)
  return _s;
}
inline const std::string& OrderActionInfo::_internal_instrument_id() const {
  return instrument_id_.Get();
}
inline void OrderActionInfo::_internal_set_instrument_id(const std::string& value) {
  
  instrument_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::_internal_mutable_instrument_id() {
  
  return instrument_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::release_instrument_id() {
  // @@protoc_insertion_point(field_release:OrderActionInfo.instrument_id)
  return instrument_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderActionInfo::set_allocated_instrument_id(std::string* instrument_id) {
  if (instrument_id != nullptr) {
    
  } else {
    
  }
  instrument_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrument_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (instrument_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderActionInfo.instrument_id)
}

// string ip_address = 31;
inline void OrderActionInfo::clear_ip_address() {
  ip_address_.ClearToEmpty();
}
inline const std::string& OrderActionInfo::ip_address() const {
  // @@protoc_insertion_point(field_get:OrderActionInfo.ip_address)
  return _internal_ip_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderActionInfo::set_ip_address(ArgT0&& arg0, ArgT... args) {
 
 ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderActionInfo.ip_address)
}
inline std::string* OrderActionInfo::mutable_ip_address() {
  std::string* _s = _internal_mutable_ip_address();
  // @@protoc_insertion_point(field_mutable:OrderActionInfo.ip_address)
  return _s;
}
inline const std::string& OrderActionInfo::_internal_ip_address() const {
  return ip_address_.Get();
}
inline void OrderActionInfo::_internal_set_ip_address(const std::string& value) {
  
  ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::_internal_mutable_ip_address() {
  
  return ip_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::release_ip_address() {
  // @@protoc_insertion_point(field_release:OrderActionInfo.ip_address)
  return ip_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderActionInfo::set_allocated_ip_address(std::string* ip_address) {
  if (ip_address != nullptr) {
    
  } else {
    
  }
  ip_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderActionInfo.ip_address)
}

// string direction_zn = 32;
inline void OrderActionInfo::clear_direction_zn() {
  direction_zn_.ClearToEmpty();
}
inline const std::string& OrderActionInfo::direction_zn() const {
  // @@protoc_insertion_point(field_get:OrderActionInfo.direction_zn)
  return _internal_direction_zn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderActionInfo::set_direction_zn(ArgT0&& arg0, ArgT... args) {
 
 direction_zn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderActionInfo.direction_zn)
}
inline std::string* OrderActionInfo::mutable_direction_zn() {
  std::string* _s = _internal_mutable_direction_zn();
  // @@protoc_insertion_point(field_mutable:OrderActionInfo.direction_zn)
  return _s;
}
inline const std::string& OrderActionInfo::_internal_direction_zn() const {
  return direction_zn_.Get();
}
inline void OrderActionInfo::_internal_set_direction_zn(const std::string& value) {
  
  direction_zn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::_internal_mutable_direction_zn() {
  
  return direction_zn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::release_direction_zn() {
  // @@protoc_insertion_point(field_release:OrderActionInfo.direction_zn)
  return direction_zn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderActionInfo::set_allocated_direction_zn(std::string* direction_zn) {
  if (direction_zn != nullptr) {
    
  } else {
    
  }
  direction_zn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), direction_zn,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (direction_zn_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    direction_zn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderActionInfo.direction_zn)
}

// string order_status_zn = 33;
inline void OrderActionInfo::clear_order_status_zn() {
  order_status_zn_.ClearToEmpty();
}
inline const std::string& OrderActionInfo::order_status_zn() const {
  // @@protoc_insertion_point(field_get:OrderActionInfo.order_status_zn)
  return _internal_order_status_zn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderActionInfo::set_order_status_zn(ArgT0&& arg0, ArgT... args) {
 
 order_status_zn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderActionInfo.order_status_zn)
}
inline std::string* OrderActionInfo::mutable_order_status_zn() {
  std::string* _s = _internal_mutable_order_status_zn();
  // @@protoc_insertion_point(field_mutable:OrderActionInfo.order_status_zn)
  return _s;
}
inline const std::string& OrderActionInfo::_internal_order_status_zn() const {
  return order_status_zn_.Get();
}
inline void OrderActionInfo::_internal_set_order_status_zn(const std::string& value) {
  
  order_status_zn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::_internal_mutable_order_status_zn() {
  
  return order_status_zn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::release_order_status_zn() {
  // @@protoc_insertion_point(field_release:OrderActionInfo.order_status_zn)
  return order_status_zn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderActionInfo::set_allocated_order_status_zn(std::string* order_status_zn) {
  if (order_status_zn != nullptr) {
    
  } else {
    
  }
  order_status_zn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_status_zn,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (order_status_zn_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    order_status_zn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderActionInfo.order_status_zn)
}

// string comb_offset_flag_zn = 34;
inline void OrderActionInfo::clear_comb_offset_flag_zn() {
  comb_offset_flag_zn_.ClearToEmpty();
}
inline const std::string& OrderActionInfo::comb_offset_flag_zn() const {
  // @@protoc_insertion_point(field_get:OrderActionInfo.comb_offset_flag_zn)
  return _internal_comb_offset_flag_zn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderActionInfo::set_comb_offset_flag_zn(ArgT0&& arg0, ArgT... args) {
 
 comb_offset_flag_zn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OrderActionInfo.comb_offset_flag_zn)
}
inline std::string* OrderActionInfo::mutable_comb_offset_flag_zn() {
  std::string* _s = _internal_mutable_comb_offset_flag_zn();
  // @@protoc_insertion_point(field_mutable:OrderActionInfo.comb_offset_flag_zn)
  return _s;
}
inline const std::string& OrderActionInfo::_internal_comb_offset_flag_zn() const {
  return comb_offset_flag_zn_.Get();
}
inline void OrderActionInfo::_internal_set_comb_offset_flag_zn(const std::string& value) {
  
  comb_offset_flag_zn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::_internal_mutable_comb_offset_flag_zn() {
  
  return comb_offset_flag_zn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderActionInfo::release_comb_offset_flag_zn() {
  // @@protoc_insertion_point(field_release:OrderActionInfo.comb_offset_flag_zn)
  return comb_offset_flag_zn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderActionInfo::set_allocated_comb_offset_flag_zn(std::string* comb_offset_flag_zn) {
  if (comb_offset_flag_zn != nullptr) {
    
  } else {
    
  }
  comb_offset_flag_zn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comb_offset_flag_zn,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (comb_offset_flag_zn_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    comb_offset_flag_zn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OrderActionInfo.comb_offset_flag_zn)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_order_2eproto
