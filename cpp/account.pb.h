// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: account.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_account_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_account_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_account_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_account_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_account_2eproto;
class AccountInfo;
struct AccountInfoDefaultTypeInternal;
extern AccountInfoDefaultTypeInternal _AccountInfo_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AccountInfo* Arena::CreateMaybeMessage<::AccountInfo>(Arena*);
template<> ::Position* Arena::CreateMaybeMessage<::Position>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class AccountInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AccountInfo) */ {
 public:
  inline AccountInfo() : AccountInfo(nullptr) {}
  ~AccountInfo() override;
  explicit constexpr AccountInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountInfo(const AccountInfo& from);
  AccountInfo(AccountInfo&& from) noexcept
    : AccountInfo() {
    *this = ::std::move(from);
  }

  inline AccountInfo& operator=(const AccountInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountInfo& operator=(AccountInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountInfo* internal_default_instance() {
    return reinterpret_cast<const AccountInfo*>(
               &_AccountInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AccountInfo& a, AccountInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccountInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AccountInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AccountInfo";
  }
  protected:
  explicit AccountInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrokerIdFieldNumber = 1,
    kAccountIdFieldNumber = 2,
    kTradingDayFieldNumber = 24,
    kCurrencyIdFieldNumber = 32,
    kBizTypeFieldNumber = 47,
    kPreMortgageFieldNumber = 3,
    kPreCreditFieldNumber = 4,
    kPreDepositFieldNumber = 5,
    kPreBalanceFieldNumber = 6,
    kPreMarginFieldNumber = 7,
    kInterestBaseFieldNumber = 8,
    kInterestFieldNumber = 9,
    kDepositFieldNumber = 10,
    kWithdrawFieldNumber = 11,
    kFrozenMarginFieldNumber = 12,
    kFrozenCashFieldNumber = 13,
    kFrozenCommissionFieldNumber = 14,
    kCurrMarginFieldNumber = 15,
    kCashInFieldNumber = 16,
    kCommissionFieldNumber = 17,
    kCloseProfitFieldNumber = 18,
    kPositionProfitFieldNumber = 19,
    kBalanceFieldNumber = 20,
    kAvailableFieldNumber = 21,
    kWithdrawQuotaFieldNumber = 22,
    kReserveFieldNumber = 23,
    kCreditFieldNumber = 26,
    kMortgageFieldNumber = 27,
    kExchangeMarginFieldNumber = 28,
    kDeliveryMarginFieldNumber = 29,
    kExchangeDeliveryMarginFieldNumber = 30,
    kReserveBalanceFieldNumber = 31,
    kPreFundMortgageInFieldNumber = 33,
    kPreFundMortgageOutFieldNumber = 34,
    kFundMortgageInFieldNumber = 35,
    kFundMortgageOutFieldNumber = 36,
    kFundMortgageAvailableFieldNumber = 37,
    kMortgageableFundFieldNumber = 38,
    kSpecProductMarginFieldNumber = 39,
    kSpecProductFrozenMarginFieldNumber = 40,
    kSpecProductCommissionFieldNumber = 41,
    kSpecProductFrozenCommissionFieldNumber = 42,
    kSpecProductPositionProfitFieldNumber = 43,
    kSpecProductCloseProfitFieldNumber = 44,
    kSpecProductPositionProfitByAlgFieldNumber = 45,
    kSpecProductExchangeMarginFieldNumber = 46,
    kFrozenSwapFieldNumber = 48,
    kRemainSwapFieldNumber = 49,
    kSettlementIdFieldNumber = 25,
  };
  // string broker_id = 1;
  void clear_broker_id();
  const std::string& broker_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_broker_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_broker_id();
  PROTOBUF_NODISCARD std::string* release_broker_id();
  void set_allocated_broker_id(std::string* broker_id);
  private:
  const std::string& _internal_broker_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_broker_id(const std::string& value);
  std::string* _internal_mutable_broker_id();
  public:

  // string account_id = 2;
  void clear_account_id();
  const std::string& account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);
  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(const std::string& value);
  std::string* _internal_mutable_account_id();
  public:

  // string trading_day = 24;
  void clear_trading_day();
  const std::string& trading_day() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trading_day(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trading_day();
  PROTOBUF_NODISCARD std::string* release_trading_day();
  void set_allocated_trading_day(std::string* trading_day);
  private:
  const std::string& _internal_trading_day() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trading_day(const std::string& value);
  std::string* _internal_mutable_trading_day();
  public:

  // string currency_id = 32;
  void clear_currency_id();
  const std::string& currency_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency_id();
  PROTOBUF_NODISCARD std::string* release_currency_id();
  void set_allocated_currency_id(std::string* currency_id);
  private:
  const std::string& _internal_currency_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency_id(const std::string& value);
  std::string* _internal_mutable_currency_id();
  public:

  // string biz_type = 47;
  void clear_biz_type();
  const std::string& biz_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_biz_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_biz_type();
  PROTOBUF_NODISCARD std::string* release_biz_type();
  void set_allocated_biz_type(std::string* biz_type);
  private:
  const std::string& _internal_biz_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_biz_type(const std::string& value);
  std::string* _internal_mutable_biz_type();
  public:

  // double pre_mortgage = 3;
  void clear_pre_mortgage();
  double pre_mortgage() const;
  void set_pre_mortgage(double value);
  private:
  double _internal_pre_mortgage() const;
  void _internal_set_pre_mortgage(double value);
  public:

  // double pre_credit = 4;
  void clear_pre_credit();
  double pre_credit() const;
  void set_pre_credit(double value);
  private:
  double _internal_pre_credit() const;
  void _internal_set_pre_credit(double value);
  public:

  // double pre_deposit = 5;
  void clear_pre_deposit();
  double pre_deposit() const;
  void set_pre_deposit(double value);
  private:
  double _internal_pre_deposit() const;
  void _internal_set_pre_deposit(double value);
  public:

  // double pre_balance = 6;
  void clear_pre_balance();
  double pre_balance() const;
  void set_pre_balance(double value);
  private:
  double _internal_pre_balance() const;
  void _internal_set_pre_balance(double value);
  public:

  // double pre_margin = 7;
  void clear_pre_margin();
  double pre_margin() const;
  void set_pre_margin(double value);
  private:
  double _internal_pre_margin() const;
  void _internal_set_pre_margin(double value);
  public:

  // double interest_base = 8;
  void clear_interest_base();
  double interest_base() const;
  void set_interest_base(double value);
  private:
  double _internal_interest_base() const;
  void _internal_set_interest_base(double value);
  public:

  // double interest = 9;
  void clear_interest();
  double interest() const;
  void set_interest(double value);
  private:
  double _internal_interest() const;
  void _internal_set_interest(double value);
  public:

  // double deposit = 10;
  void clear_deposit();
  double deposit() const;
  void set_deposit(double value);
  private:
  double _internal_deposit() const;
  void _internal_set_deposit(double value);
  public:

  // double withdraw = 11;
  void clear_withdraw();
  double withdraw() const;
  void set_withdraw(double value);
  private:
  double _internal_withdraw() const;
  void _internal_set_withdraw(double value);
  public:

  // double frozen_margin = 12;
  void clear_frozen_margin();
  double frozen_margin() const;
  void set_frozen_margin(double value);
  private:
  double _internal_frozen_margin() const;
  void _internal_set_frozen_margin(double value);
  public:

  // double frozen_cash = 13;
  void clear_frozen_cash();
  double frozen_cash() const;
  void set_frozen_cash(double value);
  private:
  double _internal_frozen_cash() const;
  void _internal_set_frozen_cash(double value);
  public:

  // double frozen_commission = 14;
  void clear_frozen_commission();
  double frozen_commission() const;
  void set_frozen_commission(double value);
  private:
  double _internal_frozen_commission() const;
  void _internal_set_frozen_commission(double value);
  public:

  // double curr_margin = 15;
  void clear_curr_margin();
  double curr_margin() const;
  void set_curr_margin(double value);
  private:
  double _internal_curr_margin() const;
  void _internal_set_curr_margin(double value);
  public:

  // double cash_in = 16;
  void clear_cash_in();
  double cash_in() const;
  void set_cash_in(double value);
  private:
  double _internal_cash_in() const;
  void _internal_set_cash_in(double value);
  public:

  // double commission = 17;
  void clear_commission();
  double commission() const;
  void set_commission(double value);
  private:
  double _internal_commission() const;
  void _internal_set_commission(double value);
  public:

  // double close_profit = 18;
  void clear_close_profit();
  double close_profit() const;
  void set_close_profit(double value);
  private:
  double _internal_close_profit() const;
  void _internal_set_close_profit(double value);
  public:

  // double position_profit = 19;
  void clear_position_profit();
  double position_profit() const;
  void set_position_profit(double value);
  private:
  double _internal_position_profit() const;
  void _internal_set_position_profit(double value);
  public:

  // double balance = 20;
  void clear_balance();
  double balance() const;
  void set_balance(double value);
  private:
  double _internal_balance() const;
  void _internal_set_balance(double value);
  public:

  // double available = 21;
  void clear_available();
  double available() const;
  void set_available(double value);
  private:
  double _internal_available() const;
  void _internal_set_available(double value);
  public:

  // double withdraw_quota = 22;
  void clear_withdraw_quota();
  double withdraw_quota() const;
  void set_withdraw_quota(double value);
  private:
  double _internal_withdraw_quota() const;
  void _internal_set_withdraw_quota(double value);
  public:

  // double reserve = 23;
  void clear_reserve();
  double reserve() const;
  void set_reserve(double value);
  private:
  double _internal_reserve() const;
  void _internal_set_reserve(double value);
  public:

  // double credit = 26;
  void clear_credit();
  double credit() const;
  void set_credit(double value);
  private:
  double _internal_credit() const;
  void _internal_set_credit(double value);
  public:

  // double mortgage = 27;
  void clear_mortgage();
  double mortgage() const;
  void set_mortgage(double value);
  private:
  double _internal_mortgage() const;
  void _internal_set_mortgage(double value);
  public:

  // double exchange_margin = 28;
  void clear_exchange_margin();
  double exchange_margin() const;
  void set_exchange_margin(double value);
  private:
  double _internal_exchange_margin() const;
  void _internal_set_exchange_margin(double value);
  public:

  // double delivery_margin = 29;
  void clear_delivery_margin();
  double delivery_margin() const;
  void set_delivery_margin(double value);
  private:
  double _internal_delivery_margin() const;
  void _internal_set_delivery_margin(double value);
  public:

  // double exchange_delivery_margin = 30;
  void clear_exchange_delivery_margin();
  double exchange_delivery_margin() const;
  void set_exchange_delivery_margin(double value);
  private:
  double _internal_exchange_delivery_margin() const;
  void _internal_set_exchange_delivery_margin(double value);
  public:

  // double reserve_balance = 31;
  void clear_reserve_balance();
  double reserve_balance() const;
  void set_reserve_balance(double value);
  private:
  double _internal_reserve_balance() const;
  void _internal_set_reserve_balance(double value);
  public:

  // double pre_fund_mortgage_in = 33;
  void clear_pre_fund_mortgage_in();
  double pre_fund_mortgage_in() const;
  void set_pre_fund_mortgage_in(double value);
  private:
  double _internal_pre_fund_mortgage_in() const;
  void _internal_set_pre_fund_mortgage_in(double value);
  public:

  // double pre_fund_mortgage_out = 34;
  void clear_pre_fund_mortgage_out();
  double pre_fund_mortgage_out() const;
  void set_pre_fund_mortgage_out(double value);
  private:
  double _internal_pre_fund_mortgage_out() const;
  void _internal_set_pre_fund_mortgage_out(double value);
  public:

  // double fund_mortgage_in = 35;
  void clear_fund_mortgage_in();
  double fund_mortgage_in() const;
  void set_fund_mortgage_in(double value);
  private:
  double _internal_fund_mortgage_in() const;
  void _internal_set_fund_mortgage_in(double value);
  public:

  // double fund_mortgage_out = 36;
  void clear_fund_mortgage_out();
  double fund_mortgage_out() const;
  void set_fund_mortgage_out(double value);
  private:
  double _internal_fund_mortgage_out() const;
  void _internal_set_fund_mortgage_out(double value);
  public:

  // double fund_mortgage_available = 37;
  void clear_fund_mortgage_available();
  double fund_mortgage_available() const;
  void set_fund_mortgage_available(double value);
  private:
  double _internal_fund_mortgage_available() const;
  void _internal_set_fund_mortgage_available(double value);
  public:

  // double mortgageable_fund = 38;
  void clear_mortgageable_fund();
  double mortgageable_fund() const;
  void set_mortgageable_fund(double value);
  private:
  double _internal_mortgageable_fund() const;
  void _internal_set_mortgageable_fund(double value);
  public:

  // double spec_product_margin = 39;
  void clear_spec_product_margin();
  double spec_product_margin() const;
  void set_spec_product_margin(double value);
  private:
  double _internal_spec_product_margin() const;
  void _internal_set_spec_product_margin(double value);
  public:

  // double spec_product_frozen_margin = 40;
  void clear_spec_product_frozen_margin();
  double spec_product_frozen_margin() const;
  void set_spec_product_frozen_margin(double value);
  private:
  double _internal_spec_product_frozen_margin() const;
  void _internal_set_spec_product_frozen_margin(double value);
  public:

  // double spec_product_commission = 41;
  void clear_spec_product_commission();
  double spec_product_commission() const;
  void set_spec_product_commission(double value);
  private:
  double _internal_spec_product_commission() const;
  void _internal_set_spec_product_commission(double value);
  public:

  // double spec_product_frozen_commission = 42;
  void clear_spec_product_frozen_commission();
  double spec_product_frozen_commission() const;
  void set_spec_product_frozen_commission(double value);
  private:
  double _internal_spec_product_frozen_commission() const;
  void _internal_set_spec_product_frozen_commission(double value);
  public:

  // double spec_product_position_profit = 43;
  void clear_spec_product_position_profit();
  double spec_product_position_profit() const;
  void set_spec_product_position_profit(double value);
  private:
  double _internal_spec_product_position_profit() const;
  void _internal_set_spec_product_position_profit(double value);
  public:

  // double spec_product_close_profit = 44;
  void clear_spec_product_close_profit();
  double spec_product_close_profit() const;
  void set_spec_product_close_profit(double value);
  private:
  double _internal_spec_product_close_profit() const;
  void _internal_set_spec_product_close_profit(double value);
  public:

  // double spec_product_position_profit_by_alg = 45;
  void clear_spec_product_position_profit_by_alg();
  double spec_product_position_profit_by_alg() const;
  void set_spec_product_position_profit_by_alg(double value);
  private:
  double _internal_spec_product_position_profit_by_alg() const;
  void _internal_set_spec_product_position_profit_by_alg(double value);
  public:

  // double spec_product_exchange_margin = 46;
  void clear_spec_product_exchange_margin();
  double spec_product_exchange_margin() const;
  void set_spec_product_exchange_margin(double value);
  private:
  double _internal_spec_product_exchange_margin() const;
  void _internal_set_spec_product_exchange_margin(double value);
  public:

  // double frozen_swap = 48;
  void clear_frozen_swap();
  double frozen_swap() const;
  void set_frozen_swap(double value);
  private:
  double _internal_frozen_swap() const;
  void _internal_set_frozen_swap(double value);
  public:

  // double remain_swap = 49;
  void clear_remain_swap();
  double remain_swap() const;
  void set_remain_swap(double value);
  private:
  double _internal_remain_swap() const;
  void _internal_set_remain_swap(double value);
  public:

  // int32 settlement_id = 25;
  void clear_settlement_id();
  int32_t settlement_id() const;
  void set_settlement_id(int32_t value);
  private:
  int32_t _internal_settlement_id() const;
  void _internal_set_settlement_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:AccountInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broker_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trading_day_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr biz_type_;
  double pre_mortgage_;
  double pre_credit_;
  double pre_deposit_;
  double pre_balance_;
  double pre_margin_;
  double interest_base_;
  double interest_;
  double deposit_;
  double withdraw_;
  double frozen_margin_;
  double frozen_cash_;
  double frozen_commission_;
  double curr_margin_;
  double cash_in_;
  double commission_;
  double close_profit_;
  double position_profit_;
  double balance_;
  double available_;
  double withdraw_quota_;
  double reserve_;
  double credit_;
  double mortgage_;
  double exchange_margin_;
  double delivery_margin_;
  double exchange_delivery_margin_;
  double reserve_balance_;
  double pre_fund_mortgage_in_;
  double pre_fund_mortgage_out_;
  double fund_mortgage_in_;
  double fund_mortgage_out_;
  double fund_mortgage_available_;
  double mortgageable_fund_;
  double spec_product_margin_;
  double spec_product_frozen_margin_;
  double spec_product_commission_;
  double spec_product_frozen_commission_;
  double spec_product_position_profit_;
  double spec_product_close_profit_;
  double spec_product_position_profit_by_alg_;
  double spec_product_exchange_margin_;
  double frozen_swap_;
  double remain_swap_;
  int32_t settlement_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_account_2eproto;
};
// -------------------------------------------------------------------

class Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() override;
  explicit constexpr Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Position& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Position& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReserve1FieldNumber = 1,
    kBrokerIdFieldNumber = 2,
    kInvestorIdFieldNumber = 3,
    kPosiDirectionFieldNumber = 4,
    kHedgeFlagFieldNumber = 5,
    kPositionDateFieldNumber = 6,
    kExchangeIdFieldNumber = 41,
    kInstrumentIdFieldNumber = 44,
    kInstrumentNameFieldNumber = 45,
    kPositionFieldNumber = 7,
    kYdPositionFieldNumber = 8,
    kTodayPositionFieldNumber = 9,
    kOpenVolumeFieldNumber = 10,
    kOpenAmountFieldNumber = 12,
    kCloseAmountFieldNumber = 13,
    kPositionCostFieldNumber = 14,
    kCloseVolumeFieldNumber = 11,
    kLongFrozenFieldNumber = 18,
    kCloseProfitFieldNumber = 15,
    kPositionProfitFieldNumber = 16,
    kOpenCostFieldNumber = 17,
    kLongFrozenAmountFieldNumber = 20,
    kShortFrozenAmountFieldNumber = 21,
    kPreMarginFieldNumber = 22,
    kUseMarginFieldNumber = 23,
    kFrozenMarginFieldNumber = 24,
    kFrozenCashFieldNumber = 25,
    kShortFrozenFieldNumber = 19,
    kSettlementIdFieldNumber = 31,
    kFrozenCommissionFieldNumber = 26,
    kCashInFieldNumber = 27,
    kCommissionFieldNumber = 28,
    kPreSettlementPriceFieldNumber = 29,
    kSettlementPriceFieldNumber = 30,
    kExchangeMarginFieldNumber = 32,
    kCombPositionFieldNumber = 33,
    kCombLongFrozenFieldNumber = 34,
    kCloseProfitByDateFieldNumber = 36,
    kCombShortFrozenFieldNumber = 35,
    kStrikeFrozenFieldNumber = 38,
    kCloseProfitByTradeFieldNumber = 37,
    kStrikeFrozenAmountFieldNumber = 39,
    kAbandonFrozenFieldNumber = 40,
    kYdStrikeFrozenFieldNumber = 42,
    kPositionCostOffsetFieldNumber = 43,
  };
  // string reserve1 = 1;
  void clear_reserve1();
  const std::string& reserve1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserve1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserve1();
  PROTOBUF_NODISCARD std::string* release_reserve1();
  void set_allocated_reserve1(std::string* reserve1);
  private:
  const std::string& _internal_reserve1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserve1(const std::string& value);
  std::string* _internal_mutable_reserve1();
  public:

  // string broker_id = 2;
  void clear_broker_id();
  const std::string& broker_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_broker_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_broker_id();
  PROTOBUF_NODISCARD std::string* release_broker_id();
  void set_allocated_broker_id(std::string* broker_id);
  private:
  const std::string& _internal_broker_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_broker_id(const std::string& value);
  std::string* _internal_mutable_broker_id();
  public:

  // string investor_id = 3;
  void clear_investor_id();
  const std::string& investor_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_investor_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_investor_id();
  PROTOBUF_NODISCARD std::string* release_investor_id();
  void set_allocated_investor_id(std::string* investor_id);
  private:
  const std::string& _internal_investor_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_investor_id(const std::string& value);
  std::string* _internal_mutable_investor_id();
  public:

  // string posi_direction = 4;
  void clear_posi_direction();
  const std::string& posi_direction() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_posi_direction(ArgT0&& arg0, ArgT... args);
  std::string* mutable_posi_direction();
  PROTOBUF_NODISCARD std::string* release_posi_direction();
  void set_allocated_posi_direction(std::string* posi_direction);
  private:
  const std::string& _internal_posi_direction() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_posi_direction(const std::string& value);
  std::string* _internal_mutable_posi_direction();
  public:

  // string hedge_flag = 5;
  void clear_hedge_flag();
  const std::string& hedge_flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hedge_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hedge_flag();
  PROTOBUF_NODISCARD std::string* release_hedge_flag();
  void set_allocated_hedge_flag(std::string* hedge_flag);
  private:
  const std::string& _internal_hedge_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hedge_flag(const std::string& value);
  std::string* _internal_mutable_hedge_flag();
  public:

  // string position_date = 6;
  void clear_position_date();
  const std::string& position_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_position_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_position_date();
  PROTOBUF_NODISCARD std::string* release_position_date();
  void set_allocated_position_date(std::string* position_date);
  private:
  const std::string& _internal_position_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_position_date(const std::string& value);
  std::string* _internal_mutable_position_date();
  public:

  // string exchange_id = 41;
  void clear_exchange_id();
  const std::string& exchange_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exchange_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exchange_id();
  PROTOBUF_NODISCARD std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* exchange_id);
  private:
  const std::string& _internal_exchange_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_id(const std::string& value);
  std::string* _internal_mutable_exchange_id();
  public:

  // string instrument_id = 44;
  void clear_instrument_id();
  const std::string& instrument_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_id();
  PROTOBUF_NODISCARD std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* instrument_id);
  private:
  const std::string& _internal_instrument_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(const std::string& value);
  std::string* _internal_mutable_instrument_id();
  public:

  // string instrument_name = 45;
  void clear_instrument_name();
  const std::string& instrument_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_name();
  PROTOBUF_NODISCARD std::string* release_instrument_name();
  void set_allocated_instrument_name(std::string* instrument_name);
  private:
  const std::string& _internal_instrument_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_name(const std::string& value);
  std::string* _internal_mutable_instrument_name();
  public:

  // int32 position = 7;
  void clear_position();
  int32_t position() const;
  void set_position(int32_t value);
  private:
  int32_t _internal_position() const;
  void _internal_set_position(int32_t value);
  public:

  // int32 yd_position = 8;
  void clear_yd_position();
  int32_t yd_position() const;
  void set_yd_position(int32_t value);
  private:
  int32_t _internal_yd_position() const;
  void _internal_set_yd_position(int32_t value);
  public:

  // int32 today_position = 9;
  void clear_today_position();
  int32_t today_position() const;
  void set_today_position(int32_t value);
  private:
  int32_t _internal_today_position() const;
  void _internal_set_today_position(int32_t value);
  public:

  // int32 open_volume = 10;
  void clear_open_volume();
  int32_t open_volume() const;
  void set_open_volume(int32_t value);
  private:
  int32_t _internal_open_volume() const;
  void _internal_set_open_volume(int32_t value);
  public:

  // double open_amount = 12;
  void clear_open_amount();
  double open_amount() const;
  void set_open_amount(double value);
  private:
  double _internal_open_amount() const;
  void _internal_set_open_amount(double value);
  public:

  // double close_amount = 13;
  void clear_close_amount();
  double close_amount() const;
  void set_close_amount(double value);
  private:
  double _internal_close_amount() const;
  void _internal_set_close_amount(double value);
  public:

  // double position_cost = 14;
  void clear_position_cost();
  double position_cost() const;
  void set_position_cost(double value);
  private:
  double _internal_position_cost() const;
  void _internal_set_position_cost(double value);
  public:

  // int32 close_volume = 11;
  void clear_close_volume();
  int32_t close_volume() const;
  void set_close_volume(int32_t value);
  private:
  int32_t _internal_close_volume() const;
  void _internal_set_close_volume(int32_t value);
  public:

  // int32 long_frozen = 18;
  void clear_long_frozen();
  int32_t long_frozen() const;
  void set_long_frozen(int32_t value);
  private:
  int32_t _internal_long_frozen() const;
  void _internal_set_long_frozen(int32_t value);
  public:

  // double close_profit = 15;
  void clear_close_profit();
  double close_profit() const;
  void set_close_profit(double value);
  private:
  double _internal_close_profit() const;
  void _internal_set_close_profit(double value);
  public:

  // double position_profit = 16;
  void clear_position_profit();
  double position_profit() const;
  void set_position_profit(double value);
  private:
  double _internal_position_profit() const;
  void _internal_set_position_profit(double value);
  public:

  // double open_cost = 17;
  void clear_open_cost();
  double open_cost() const;
  void set_open_cost(double value);
  private:
  double _internal_open_cost() const;
  void _internal_set_open_cost(double value);
  public:

  // double long_frozen_amount = 20;
  void clear_long_frozen_amount();
  double long_frozen_amount() const;
  void set_long_frozen_amount(double value);
  private:
  double _internal_long_frozen_amount() const;
  void _internal_set_long_frozen_amount(double value);
  public:

  // double short_frozen_amount = 21;
  void clear_short_frozen_amount();
  double short_frozen_amount() const;
  void set_short_frozen_amount(double value);
  private:
  double _internal_short_frozen_amount() const;
  void _internal_set_short_frozen_amount(double value);
  public:

  // double pre_margin = 22;
  void clear_pre_margin();
  double pre_margin() const;
  void set_pre_margin(double value);
  private:
  double _internal_pre_margin() const;
  void _internal_set_pre_margin(double value);
  public:

  // double use_margin = 23;
  void clear_use_margin();
  double use_margin() const;
  void set_use_margin(double value);
  private:
  double _internal_use_margin() const;
  void _internal_set_use_margin(double value);
  public:

  // double frozen_margin = 24;
  void clear_frozen_margin();
  double frozen_margin() const;
  void set_frozen_margin(double value);
  private:
  double _internal_frozen_margin() const;
  void _internal_set_frozen_margin(double value);
  public:

  // double frozen_cash = 25;
  void clear_frozen_cash();
  double frozen_cash() const;
  void set_frozen_cash(double value);
  private:
  double _internal_frozen_cash() const;
  void _internal_set_frozen_cash(double value);
  public:

  // int32 short_frozen = 19;
  void clear_short_frozen();
  int32_t short_frozen() const;
  void set_short_frozen(int32_t value);
  private:
  int32_t _internal_short_frozen() const;
  void _internal_set_short_frozen(int32_t value);
  public:

  // int32 settlement_id = 31;
  void clear_settlement_id();
  int32_t settlement_id() const;
  void set_settlement_id(int32_t value);
  private:
  int32_t _internal_settlement_id() const;
  void _internal_set_settlement_id(int32_t value);
  public:

  // double frozen_commission = 26;
  void clear_frozen_commission();
  double frozen_commission() const;
  void set_frozen_commission(double value);
  private:
  double _internal_frozen_commission() const;
  void _internal_set_frozen_commission(double value);
  public:

  // double cash_in = 27;
  void clear_cash_in();
  double cash_in() const;
  void set_cash_in(double value);
  private:
  double _internal_cash_in() const;
  void _internal_set_cash_in(double value);
  public:

  // double commission = 28;
  void clear_commission();
  double commission() const;
  void set_commission(double value);
  private:
  double _internal_commission() const;
  void _internal_set_commission(double value);
  public:

  // double pre_settlement_price = 29;
  void clear_pre_settlement_price();
  double pre_settlement_price() const;
  void set_pre_settlement_price(double value);
  private:
  double _internal_pre_settlement_price() const;
  void _internal_set_pre_settlement_price(double value);
  public:

  // double settlement_price = 30;
  void clear_settlement_price();
  double settlement_price() const;
  void set_settlement_price(double value);
  private:
  double _internal_settlement_price() const;
  void _internal_set_settlement_price(double value);
  public:

  // double exchange_margin = 32;
  void clear_exchange_margin();
  double exchange_margin() const;
  void set_exchange_margin(double value);
  private:
  double _internal_exchange_margin() const;
  void _internal_set_exchange_margin(double value);
  public:

  // int32 comb_position = 33;
  void clear_comb_position();
  int32_t comb_position() const;
  void set_comb_position(int32_t value);
  private:
  int32_t _internal_comb_position() const;
  void _internal_set_comb_position(int32_t value);
  public:

  // int32 comb_long_frozen = 34;
  void clear_comb_long_frozen();
  int32_t comb_long_frozen() const;
  void set_comb_long_frozen(int32_t value);
  private:
  int32_t _internal_comb_long_frozen() const;
  void _internal_set_comb_long_frozen(int32_t value);
  public:

  // double close_profit_by_date = 36;
  void clear_close_profit_by_date();
  double close_profit_by_date() const;
  void set_close_profit_by_date(double value);
  private:
  double _internal_close_profit_by_date() const;
  void _internal_set_close_profit_by_date(double value);
  public:

  // int32 comb_short_frozen = 35;
  void clear_comb_short_frozen();
  int32_t comb_short_frozen() const;
  void set_comb_short_frozen(int32_t value);
  private:
  int32_t _internal_comb_short_frozen() const;
  void _internal_set_comb_short_frozen(int32_t value);
  public:

  // int32 strike_frozen = 38;
  void clear_strike_frozen();
  int32_t strike_frozen() const;
  void set_strike_frozen(int32_t value);
  private:
  int32_t _internal_strike_frozen() const;
  void _internal_set_strike_frozen(int32_t value);
  public:

  // double close_profit_by_trade = 37;
  void clear_close_profit_by_trade();
  double close_profit_by_trade() const;
  void set_close_profit_by_trade(double value);
  private:
  double _internal_close_profit_by_trade() const;
  void _internal_set_close_profit_by_trade(double value);
  public:

  // double strike_frozen_amount = 39;
  void clear_strike_frozen_amount();
  double strike_frozen_amount() const;
  void set_strike_frozen_amount(double value);
  private:
  double _internal_strike_frozen_amount() const;
  void _internal_set_strike_frozen_amount(double value);
  public:

  // int32 abandon_frozen = 40;
  void clear_abandon_frozen();
  int32_t abandon_frozen() const;
  void set_abandon_frozen(int32_t value);
  private:
  int32_t _internal_abandon_frozen() const;
  void _internal_set_abandon_frozen(int32_t value);
  public:

  // int32 yd_strike_frozen = 42;
  void clear_yd_strike_frozen();
  int32_t yd_strike_frozen() const;
  void set_yd_strike_frozen(int32_t value);
  private:
  int32_t _internal_yd_strike_frozen() const;
  void _internal_set_yd_strike_frozen(int32_t value);
  public:

  // double position_cost_offset = 43;
  void clear_position_cost_offset();
  double position_cost_offset() const;
  void set_position_cost_offset(double value);
  private:
  double _internal_position_cost_offset() const;
  void _internal_set_position_cost_offset(double value);
  public:

  // @@protoc_insertion_point(class_scope:Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserve1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broker_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr investor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr posi_direction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hedge_flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr position_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_name_;
  int32_t position_;
  int32_t yd_position_;
  int32_t today_position_;
  int32_t open_volume_;
  double open_amount_;
  double close_amount_;
  double position_cost_;
  int32_t close_volume_;
  int32_t long_frozen_;
  double close_profit_;
  double position_profit_;
  double open_cost_;
  double long_frozen_amount_;
  double short_frozen_amount_;
  double pre_margin_;
  double use_margin_;
  double frozen_margin_;
  double frozen_cash_;
  int32_t short_frozen_;
  int32_t settlement_id_;
  double frozen_commission_;
  double cash_in_;
  double commission_;
  double pre_settlement_price_;
  double settlement_price_;
  double exchange_margin_;
  int32_t comb_position_;
  int32_t comb_long_frozen_;
  double close_profit_by_date_;
  int32_t comb_short_frozen_;
  int32_t strike_frozen_;
  double close_profit_by_trade_;
  double strike_frozen_amount_;
  int32_t abandon_frozen_;
  int32_t yd_strike_frozen_;
  double position_cost_offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_account_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AccountInfo

// string broker_id = 1;
inline void AccountInfo::clear_broker_id() {
  broker_id_.ClearToEmpty();
}
inline const std::string& AccountInfo::broker_id() const {
  // @@protoc_insertion_point(field_get:AccountInfo.broker_id)
  return _internal_broker_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountInfo::set_broker_id(ArgT0&& arg0, ArgT... args) {
 
 broker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AccountInfo.broker_id)
}
inline std::string* AccountInfo::mutable_broker_id() {
  std::string* _s = _internal_mutable_broker_id();
  // @@protoc_insertion_point(field_mutable:AccountInfo.broker_id)
  return _s;
}
inline const std::string& AccountInfo::_internal_broker_id() const {
  return broker_id_.Get();
}
inline void AccountInfo::_internal_set_broker_id(const std::string& value) {
  
  broker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AccountInfo::_internal_mutable_broker_id() {
  
  return broker_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AccountInfo::release_broker_id() {
  // @@protoc_insertion_point(field_release:AccountInfo.broker_id)
  return broker_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AccountInfo::set_allocated_broker_id(std::string* broker_id) {
  if (broker_id != nullptr) {
    
  } else {
    
  }
  broker_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), broker_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (broker_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    broker_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AccountInfo.broker_id)
}

// string account_id = 2;
inline void AccountInfo::clear_account_id() {
  account_id_.ClearToEmpty();
}
inline const std::string& AccountInfo::account_id() const {
  // @@protoc_insertion_point(field_get:AccountInfo.account_id)
  return _internal_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountInfo::set_account_id(ArgT0&& arg0, ArgT... args) {
 
 account_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AccountInfo.account_id)
}
inline std::string* AccountInfo::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:AccountInfo.account_id)
  return _s;
}
inline const std::string& AccountInfo::_internal_account_id() const {
  return account_id_.Get();
}
inline void AccountInfo::_internal_set_account_id(const std::string& value) {
  
  account_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AccountInfo::_internal_mutable_account_id() {
  
  return account_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AccountInfo::release_account_id() {
  // @@protoc_insertion_point(field_release:AccountInfo.account_id)
  return account_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AccountInfo::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    account_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AccountInfo.account_id)
}

// double pre_mortgage = 3;
inline void AccountInfo::clear_pre_mortgage() {
  pre_mortgage_ = 0;
}
inline double AccountInfo::_internal_pre_mortgage() const {
  return pre_mortgage_;
}
inline double AccountInfo::pre_mortgage() const {
  // @@protoc_insertion_point(field_get:AccountInfo.pre_mortgage)
  return _internal_pre_mortgage();
}
inline void AccountInfo::_internal_set_pre_mortgage(double value) {
  
  pre_mortgage_ = value;
}
inline void AccountInfo::set_pre_mortgage(double value) {
  _internal_set_pre_mortgage(value);
  // @@protoc_insertion_point(field_set:AccountInfo.pre_mortgage)
}

// double pre_credit = 4;
inline void AccountInfo::clear_pre_credit() {
  pre_credit_ = 0;
}
inline double AccountInfo::_internal_pre_credit() const {
  return pre_credit_;
}
inline double AccountInfo::pre_credit() const {
  // @@protoc_insertion_point(field_get:AccountInfo.pre_credit)
  return _internal_pre_credit();
}
inline void AccountInfo::_internal_set_pre_credit(double value) {
  
  pre_credit_ = value;
}
inline void AccountInfo::set_pre_credit(double value) {
  _internal_set_pre_credit(value);
  // @@protoc_insertion_point(field_set:AccountInfo.pre_credit)
}

// double pre_deposit = 5;
inline void AccountInfo::clear_pre_deposit() {
  pre_deposit_ = 0;
}
inline double AccountInfo::_internal_pre_deposit() const {
  return pre_deposit_;
}
inline double AccountInfo::pre_deposit() const {
  // @@protoc_insertion_point(field_get:AccountInfo.pre_deposit)
  return _internal_pre_deposit();
}
inline void AccountInfo::_internal_set_pre_deposit(double value) {
  
  pre_deposit_ = value;
}
inline void AccountInfo::set_pre_deposit(double value) {
  _internal_set_pre_deposit(value);
  // @@protoc_insertion_point(field_set:AccountInfo.pre_deposit)
}

// double pre_balance = 6;
inline void AccountInfo::clear_pre_balance() {
  pre_balance_ = 0;
}
inline double AccountInfo::_internal_pre_balance() const {
  return pre_balance_;
}
inline double AccountInfo::pre_balance() const {
  // @@protoc_insertion_point(field_get:AccountInfo.pre_balance)
  return _internal_pre_balance();
}
inline void AccountInfo::_internal_set_pre_balance(double value) {
  
  pre_balance_ = value;
}
inline void AccountInfo::set_pre_balance(double value) {
  _internal_set_pre_balance(value);
  // @@protoc_insertion_point(field_set:AccountInfo.pre_balance)
}

// double pre_margin = 7;
inline void AccountInfo::clear_pre_margin() {
  pre_margin_ = 0;
}
inline double AccountInfo::_internal_pre_margin() const {
  return pre_margin_;
}
inline double AccountInfo::pre_margin() const {
  // @@protoc_insertion_point(field_get:AccountInfo.pre_margin)
  return _internal_pre_margin();
}
inline void AccountInfo::_internal_set_pre_margin(double value) {
  
  pre_margin_ = value;
}
inline void AccountInfo::set_pre_margin(double value) {
  _internal_set_pre_margin(value);
  // @@protoc_insertion_point(field_set:AccountInfo.pre_margin)
}

// double interest_base = 8;
inline void AccountInfo::clear_interest_base() {
  interest_base_ = 0;
}
inline double AccountInfo::_internal_interest_base() const {
  return interest_base_;
}
inline double AccountInfo::interest_base() const {
  // @@protoc_insertion_point(field_get:AccountInfo.interest_base)
  return _internal_interest_base();
}
inline void AccountInfo::_internal_set_interest_base(double value) {
  
  interest_base_ = value;
}
inline void AccountInfo::set_interest_base(double value) {
  _internal_set_interest_base(value);
  // @@protoc_insertion_point(field_set:AccountInfo.interest_base)
}

// double interest = 9;
inline void AccountInfo::clear_interest() {
  interest_ = 0;
}
inline double AccountInfo::_internal_interest() const {
  return interest_;
}
inline double AccountInfo::interest() const {
  // @@protoc_insertion_point(field_get:AccountInfo.interest)
  return _internal_interest();
}
inline void AccountInfo::_internal_set_interest(double value) {
  
  interest_ = value;
}
inline void AccountInfo::set_interest(double value) {
  _internal_set_interest(value);
  // @@protoc_insertion_point(field_set:AccountInfo.interest)
}

// double deposit = 10;
inline void AccountInfo::clear_deposit() {
  deposit_ = 0;
}
inline double AccountInfo::_internal_deposit() const {
  return deposit_;
}
inline double AccountInfo::deposit() const {
  // @@protoc_insertion_point(field_get:AccountInfo.deposit)
  return _internal_deposit();
}
inline void AccountInfo::_internal_set_deposit(double value) {
  
  deposit_ = value;
}
inline void AccountInfo::set_deposit(double value) {
  _internal_set_deposit(value);
  // @@protoc_insertion_point(field_set:AccountInfo.deposit)
}

// double withdraw = 11;
inline void AccountInfo::clear_withdraw() {
  withdraw_ = 0;
}
inline double AccountInfo::_internal_withdraw() const {
  return withdraw_;
}
inline double AccountInfo::withdraw() const {
  // @@protoc_insertion_point(field_get:AccountInfo.withdraw)
  return _internal_withdraw();
}
inline void AccountInfo::_internal_set_withdraw(double value) {
  
  withdraw_ = value;
}
inline void AccountInfo::set_withdraw(double value) {
  _internal_set_withdraw(value);
  // @@protoc_insertion_point(field_set:AccountInfo.withdraw)
}

// double frozen_margin = 12;
inline void AccountInfo::clear_frozen_margin() {
  frozen_margin_ = 0;
}
inline double AccountInfo::_internal_frozen_margin() const {
  return frozen_margin_;
}
inline double AccountInfo::frozen_margin() const {
  // @@protoc_insertion_point(field_get:AccountInfo.frozen_margin)
  return _internal_frozen_margin();
}
inline void AccountInfo::_internal_set_frozen_margin(double value) {
  
  frozen_margin_ = value;
}
inline void AccountInfo::set_frozen_margin(double value) {
  _internal_set_frozen_margin(value);
  // @@protoc_insertion_point(field_set:AccountInfo.frozen_margin)
}

// double frozen_cash = 13;
inline void AccountInfo::clear_frozen_cash() {
  frozen_cash_ = 0;
}
inline double AccountInfo::_internal_frozen_cash() const {
  return frozen_cash_;
}
inline double AccountInfo::frozen_cash() const {
  // @@protoc_insertion_point(field_get:AccountInfo.frozen_cash)
  return _internal_frozen_cash();
}
inline void AccountInfo::_internal_set_frozen_cash(double value) {
  
  frozen_cash_ = value;
}
inline void AccountInfo::set_frozen_cash(double value) {
  _internal_set_frozen_cash(value);
  // @@protoc_insertion_point(field_set:AccountInfo.frozen_cash)
}

// double frozen_commission = 14;
inline void AccountInfo::clear_frozen_commission() {
  frozen_commission_ = 0;
}
inline double AccountInfo::_internal_frozen_commission() const {
  return frozen_commission_;
}
inline double AccountInfo::frozen_commission() const {
  // @@protoc_insertion_point(field_get:AccountInfo.frozen_commission)
  return _internal_frozen_commission();
}
inline void AccountInfo::_internal_set_frozen_commission(double value) {
  
  frozen_commission_ = value;
}
inline void AccountInfo::set_frozen_commission(double value) {
  _internal_set_frozen_commission(value);
  // @@protoc_insertion_point(field_set:AccountInfo.frozen_commission)
}

// double curr_margin = 15;
inline void AccountInfo::clear_curr_margin() {
  curr_margin_ = 0;
}
inline double AccountInfo::_internal_curr_margin() const {
  return curr_margin_;
}
inline double AccountInfo::curr_margin() const {
  // @@protoc_insertion_point(field_get:AccountInfo.curr_margin)
  return _internal_curr_margin();
}
inline void AccountInfo::_internal_set_curr_margin(double value) {
  
  curr_margin_ = value;
}
inline void AccountInfo::set_curr_margin(double value) {
  _internal_set_curr_margin(value);
  // @@protoc_insertion_point(field_set:AccountInfo.curr_margin)
}

// double cash_in = 16;
inline void AccountInfo::clear_cash_in() {
  cash_in_ = 0;
}
inline double AccountInfo::_internal_cash_in() const {
  return cash_in_;
}
inline double AccountInfo::cash_in() const {
  // @@protoc_insertion_point(field_get:AccountInfo.cash_in)
  return _internal_cash_in();
}
inline void AccountInfo::_internal_set_cash_in(double value) {
  
  cash_in_ = value;
}
inline void AccountInfo::set_cash_in(double value) {
  _internal_set_cash_in(value);
  // @@protoc_insertion_point(field_set:AccountInfo.cash_in)
}

// double commission = 17;
inline void AccountInfo::clear_commission() {
  commission_ = 0;
}
inline double AccountInfo::_internal_commission() const {
  return commission_;
}
inline double AccountInfo::commission() const {
  // @@protoc_insertion_point(field_get:AccountInfo.commission)
  return _internal_commission();
}
inline void AccountInfo::_internal_set_commission(double value) {
  
  commission_ = value;
}
inline void AccountInfo::set_commission(double value) {
  _internal_set_commission(value);
  // @@protoc_insertion_point(field_set:AccountInfo.commission)
}

// double close_profit = 18;
inline void AccountInfo::clear_close_profit() {
  close_profit_ = 0;
}
inline double AccountInfo::_internal_close_profit() const {
  return close_profit_;
}
inline double AccountInfo::close_profit() const {
  // @@protoc_insertion_point(field_get:AccountInfo.close_profit)
  return _internal_close_profit();
}
inline void AccountInfo::_internal_set_close_profit(double value) {
  
  close_profit_ = value;
}
inline void AccountInfo::set_close_profit(double value) {
  _internal_set_close_profit(value);
  // @@protoc_insertion_point(field_set:AccountInfo.close_profit)
}

// double position_profit = 19;
inline void AccountInfo::clear_position_profit() {
  position_profit_ = 0;
}
inline double AccountInfo::_internal_position_profit() const {
  return position_profit_;
}
inline double AccountInfo::position_profit() const {
  // @@protoc_insertion_point(field_get:AccountInfo.position_profit)
  return _internal_position_profit();
}
inline void AccountInfo::_internal_set_position_profit(double value) {
  
  position_profit_ = value;
}
inline void AccountInfo::set_position_profit(double value) {
  _internal_set_position_profit(value);
  // @@protoc_insertion_point(field_set:AccountInfo.position_profit)
}

// double balance = 20;
inline void AccountInfo::clear_balance() {
  balance_ = 0;
}
inline double AccountInfo::_internal_balance() const {
  return balance_;
}
inline double AccountInfo::balance() const {
  // @@protoc_insertion_point(field_get:AccountInfo.balance)
  return _internal_balance();
}
inline void AccountInfo::_internal_set_balance(double value) {
  
  balance_ = value;
}
inline void AccountInfo::set_balance(double value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:AccountInfo.balance)
}

// double available = 21;
inline void AccountInfo::clear_available() {
  available_ = 0;
}
inline double AccountInfo::_internal_available() const {
  return available_;
}
inline double AccountInfo::available() const {
  // @@protoc_insertion_point(field_get:AccountInfo.available)
  return _internal_available();
}
inline void AccountInfo::_internal_set_available(double value) {
  
  available_ = value;
}
inline void AccountInfo::set_available(double value) {
  _internal_set_available(value);
  // @@protoc_insertion_point(field_set:AccountInfo.available)
}

// double withdraw_quota = 22;
inline void AccountInfo::clear_withdraw_quota() {
  withdraw_quota_ = 0;
}
inline double AccountInfo::_internal_withdraw_quota() const {
  return withdraw_quota_;
}
inline double AccountInfo::withdraw_quota() const {
  // @@protoc_insertion_point(field_get:AccountInfo.withdraw_quota)
  return _internal_withdraw_quota();
}
inline void AccountInfo::_internal_set_withdraw_quota(double value) {
  
  withdraw_quota_ = value;
}
inline void AccountInfo::set_withdraw_quota(double value) {
  _internal_set_withdraw_quota(value);
  // @@protoc_insertion_point(field_set:AccountInfo.withdraw_quota)
}

// double reserve = 23;
inline void AccountInfo::clear_reserve() {
  reserve_ = 0;
}
inline double AccountInfo::_internal_reserve() const {
  return reserve_;
}
inline double AccountInfo::reserve() const {
  // @@protoc_insertion_point(field_get:AccountInfo.reserve)
  return _internal_reserve();
}
inline void AccountInfo::_internal_set_reserve(double value) {
  
  reserve_ = value;
}
inline void AccountInfo::set_reserve(double value) {
  _internal_set_reserve(value);
  // @@protoc_insertion_point(field_set:AccountInfo.reserve)
}

// string trading_day = 24;
inline void AccountInfo::clear_trading_day() {
  trading_day_.ClearToEmpty();
}
inline const std::string& AccountInfo::trading_day() const {
  // @@protoc_insertion_point(field_get:AccountInfo.trading_day)
  return _internal_trading_day();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountInfo::set_trading_day(ArgT0&& arg0, ArgT... args) {
 
 trading_day_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AccountInfo.trading_day)
}
inline std::string* AccountInfo::mutable_trading_day() {
  std::string* _s = _internal_mutable_trading_day();
  // @@protoc_insertion_point(field_mutable:AccountInfo.trading_day)
  return _s;
}
inline const std::string& AccountInfo::_internal_trading_day() const {
  return trading_day_.Get();
}
inline void AccountInfo::_internal_set_trading_day(const std::string& value) {
  
  trading_day_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AccountInfo::_internal_mutable_trading_day() {
  
  return trading_day_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AccountInfo::release_trading_day() {
  // @@protoc_insertion_point(field_release:AccountInfo.trading_day)
  return trading_day_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AccountInfo::set_allocated_trading_day(std::string* trading_day) {
  if (trading_day != nullptr) {
    
  } else {
    
  }
  trading_day_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trading_day,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trading_day_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    trading_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AccountInfo.trading_day)
}

// int32 settlement_id = 25;
inline void AccountInfo::clear_settlement_id() {
  settlement_id_ = 0;
}
inline int32_t AccountInfo::_internal_settlement_id() const {
  return settlement_id_;
}
inline int32_t AccountInfo::settlement_id() const {
  // @@protoc_insertion_point(field_get:AccountInfo.settlement_id)
  return _internal_settlement_id();
}
inline void AccountInfo::_internal_set_settlement_id(int32_t value) {
  
  settlement_id_ = value;
}
inline void AccountInfo::set_settlement_id(int32_t value) {
  _internal_set_settlement_id(value);
  // @@protoc_insertion_point(field_set:AccountInfo.settlement_id)
}

// double credit = 26;
inline void AccountInfo::clear_credit() {
  credit_ = 0;
}
inline double AccountInfo::_internal_credit() const {
  return credit_;
}
inline double AccountInfo::credit() const {
  // @@protoc_insertion_point(field_get:AccountInfo.credit)
  return _internal_credit();
}
inline void AccountInfo::_internal_set_credit(double value) {
  
  credit_ = value;
}
inline void AccountInfo::set_credit(double value) {
  _internal_set_credit(value);
  // @@protoc_insertion_point(field_set:AccountInfo.credit)
}

// double mortgage = 27;
inline void AccountInfo::clear_mortgage() {
  mortgage_ = 0;
}
inline double AccountInfo::_internal_mortgage() const {
  return mortgage_;
}
inline double AccountInfo::mortgage() const {
  // @@protoc_insertion_point(field_get:AccountInfo.mortgage)
  return _internal_mortgage();
}
inline void AccountInfo::_internal_set_mortgage(double value) {
  
  mortgage_ = value;
}
inline void AccountInfo::set_mortgage(double value) {
  _internal_set_mortgage(value);
  // @@protoc_insertion_point(field_set:AccountInfo.mortgage)
}

// double exchange_margin = 28;
inline void AccountInfo::clear_exchange_margin() {
  exchange_margin_ = 0;
}
inline double AccountInfo::_internal_exchange_margin() const {
  return exchange_margin_;
}
inline double AccountInfo::exchange_margin() const {
  // @@protoc_insertion_point(field_get:AccountInfo.exchange_margin)
  return _internal_exchange_margin();
}
inline void AccountInfo::_internal_set_exchange_margin(double value) {
  
  exchange_margin_ = value;
}
inline void AccountInfo::set_exchange_margin(double value) {
  _internal_set_exchange_margin(value);
  // @@protoc_insertion_point(field_set:AccountInfo.exchange_margin)
}

// double delivery_margin = 29;
inline void AccountInfo::clear_delivery_margin() {
  delivery_margin_ = 0;
}
inline double AccountInfo::_internal_delivery_margin() const {
  return delivery_margin_;
}
inline double AccountInfo::delivery_margin() const {
  // @@protoc_insertion_point(field_get:AccountInfo.delivery_margin)
  return _internal_delivery_margin();
}
inline void AccountInfo::_internal_set_delivery_margin(double value) {
  
  delivery_margin_ = value;
}
inline void AccountInfo::set_delivery_margin(double value) {
  _internal_set_delivery_margin(value);
  // @@protoc_insertion_point(field_set:AccountInfo.delivery_margin)
}

// double exchange_delivery_margin = 30;
inline void AccountInfo::clear_exchange_delivery_margin() {
  exchange_delivery_margin_ = 0;
}
inline double AccountInfo::_internal_exchange_delivery_margin() const {
  return exchange_delivery_margin_;
}
inline double AccountInfo::exchange_delivery_margin() const {
  // @@protoc_insertion_point(field_get:AccountInfo.exchange_delivery_margin)
  return _internal_exchange_delivery_margin();
}
inline void AccountInfo::_internal_set_exchange_delivery_margin(double value) {
  
  exchange_delivery_margin_ = value;
}
inline void AccountInfo::set_exchange_delivery_margin(double value) {
  _internal_set_exchange_delivery_margin(value);
  // @@protoc_insertion_point(field_set:AccountInfo.exchange_delivery_margin)
}

// double reserve_balance = 31;
inline void AccountInfo::clear_reserve_balance() {
  reserve_balance_ = 0;
}
inline double AccountInfo::_internal_reserve_balance() const {
  return reserve_balance_;
}
inline double AccountInfo::reserve_balance() const {
  // @@protoc_insertion_point(field_get:AccountInfo.reserve_balance)
  return _internal_reserve_balance();
}
inline void AccountInfo::_internal_set_reserve_balance(double value) {
  
  reserve_balance_ = value;
}
inline void AccountInfo::set_reserve_balance(double value) {
  _internal_set_reserve_balance(value);
  // @@protoc_insertion_point(field_set:AccountInfo.reserve_balance)
}

// string currency_id = 32;
inline void AccountInfo::clear_currency_id() {
  currency_id_.ClearToEmpty();
}
inline const std::string& AccountInfo::currency_id() const {
  // @@protoc_insertion_point(field_get:AccountInfo.currency_id)
  return _internal_currency_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountInfo::set_currency_id(ArgT0&& arg0, ArgT... args) {
 
 currency_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AccountInfo.currency_id)
}
inline std::string* AccountInfo::mutable_currency_id() {
  std::string* _s = _internal_mutable_currency_id();
  // @@protoc_insertion_point(field_mutable:AccountInfo.currency_id)
  return _s;
}
inline const std::string& AccountInfo::_internal_currency_id() const {
  return currency_id_.Get();
}
inline void AccountInfo::_internal_set_currency_id(const std::string& value) {
  
  currency_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AccountInfo::_internal_mutable_currency_id() {
  
  return currency_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AccountInfo::release_currency_id() {
  // @@protoc_insertion_point(field_release:AccountInfo.currency_id)
  return currency_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AccountInfo::set_allocated_currency_id(std::string* currency_id) {
  if (currency_id != nullptr) {
    
  } else {
    
  }
  currency_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (currency_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    currency_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AccountInfo.currency_id)
}

// double pre_fund_mortgage_in = 33;
inline void AccountInfo::clear_pre_fund_mortgage_in() {
  pre_fund_mortgage_in_ = 0;
}
inline double AccountInfo::_internal_pre_fund_mortgage_in() const {
  return pre_fund_mortgage_in_;
}
inline double AccountInfo::pre_fund_mortgage_in() const {
  // @@protoc_insertion_point(field_get:AccountInfo.pre_fund_mortgage_in)
  return _internal_pre_fund_mortgage_in();
}
inline void AccountInfo::_internal_set_pre_fund_mortgage_in(double value) {
  
  pre_fund_mortgage_in_ = value;
}
inline void AccountInfo::set_pre_fund_mortgage_in(double value) {
  _internal_set_pre_fund_mortgage_in(value);
  // @@protoc_insertion_point(field_set:AccountInfo.pre_fund_mortgage_in)
}

// double pre_fund_mortgage_out = 34;
inline void AccountInfo::clear_pre_fund_mortgage_out() {
  pre_fund_mortgage_out_ = 0;
}
inline double AccountInfo::_internal_pre_fund_mortgage_out() const {
  return pre_fund_mortgage_out_;
}
inline double AccountInfo::pre_fund_mortgage_out() const {
  // @@protoc_insertion_point(field_get:AccountInfo.pre_fund_mortgage_out)
  return _internal_pre_fund_mortgage_out();
}
inline void AccountInfo::_internal_set_pre_fund_mortgage_out(double value) {
  
  pre_fund_mortgage_out_ = value;
}
inline void AccountInfo::set_pre_fund_mortgage_out(double value) {
  _internal_set_pre_fund_mortgage_out(value);
  // @@protoc_insertion_point(field_set:AccountInfo.pre_fund_mortgage_out)
}

// double fund_mortgage_in = 35;
inline void AccountInfo::clear_fund_mortgage_in() {
  fund_mortgage_in_ = 0;
}
inline double AccountInfo::_internal_fund_mortgage_in() const {
  return fund_mortgage_in_;
}
inline double AccountInfo::fund_mortgage_in() const {
  // @@protoc_insertion_point(field_get:AccountInfo.fund_mortgage_in)
  return _internal_fund_mortgage_in();
}
inline void AccountInfo::_internal_set_fund_mortgage_in(double value) {
  
  fund_mortgage_in_ = value;
}
inline void AccountInfo::set_fund_mortgage_in(double value) {
  _internal_set_fund_mortgage_in(value);
  // @@protoc_insertion_point(field_set:AccountInfo.fund_mortgage_in)
}

// double fund_mortgage_out = 36;
inline void AccountInfo::clear_fund_mortgage_out() {
  fund_mortgage_out_ = 0;
}
inline double AccountInfo::_internal_fund_mortgage_out() const {
  return fund_mortgage_out_;
}
inline double AccountInfo::fund_mortgage_out() const {
  // @@protoc_insertion_point(field_get:AccountInfo.fund_mortgage_out)
  return _internal_fund_mortgage_out();
}
inline void AccountInfo::_internal_set_fund_mortgage_out(double value) {
  
  fund_mortgage_out_ = value;
}
inline void AccountInfo::set_fund_mortgage_out(double value) {
  _internal_set_fund_mortgage_out(value);
  // @@protoc_insertion_point(field_set:AccountInfo.fund_mortgage_out)
}

// double fund_mortgage_available = 37;
inline void AccountInfo::clear_fund_mortgage_available() {
  fund_mortgage_available_ = 0;
}
inline double AccountInfo::_internal_fund_mortgage_available() const {
  return fund_mortgage_available_;
}
inline double AccountInfo::fund_mortgage_available() const {
  // @@protoc_insertion_point(field_get:AccountInfo.fund_mortgage_available)
  return _internal_fund_mortgage_available();
}
inline void AccountInfo::_internal_set_fund_mortgage_available(double value) {
  
  fund_mortgage_available_ = value;
}
inline void AccountInfo::set_fund_mortgage_available(double value) {
  _internal_set_fund_mortgage_available(value);
  // @@protoc_insertion_point(field_set:AccountInfo.fund_mortgage_available)
}

// double mortgageable_fund = 38;
inline void AccountInfo::clear_mortgageable_fund() {
  mortgageable_fund_ = 0;
}
inline double AccountInfo::_internal_mortgageable_fund() const {
  return mortgageable_fund_;
}
inline double AccountInfo::mortgageable_fund() const {
  // @@protoc_insertion_point(field_get:AccountInfo.mortgageable_fund)
  return _internal_mortgageable_fund();
}
inline void AccountInfo::_internal_set_mortgageable_fund(double value) {
  
  mortgageable_fund_ = value;
}
inline void AccountInfo::set_mortgageable_fund(double value) {
  _internal_set_mortgageable_fund(value);
  // @@protoc_insertion_point(field_set:AccountInfo.mortgageable_fund)
}

// double spec_product_margin = 39;
inline void AccountInfo::clear_spec_product_margin() {
  spec_product_margin_ = 0;
}
inline double AccountInfo::_internal_spec_product_margin() const {
  return spec_product_margin_;
}
inline double AccountInfo::spec_product_margin() const {
  // @@protoc_insertion_point(field_get:AccountInfo.spec_product_margin)
  return _internal_spec_product_margin();
}
inline void AccountInfo::_internal_set_spec_product_margin(double value) {
  
  spec_product_margin_ = value;
}
inline void AccountInfo::set_spec_product_margin(double value) {
  _internal_set_spec_product_margin(value);
  // @@protoc_insertion_point(field_set:AccountInfo.spec_product_margin)
}

// double spec_product_frozen_margin = 40;
inline void AccountInfo::clear_spec_product_frozen_margin() {
  spec_product_frozen_margin_ = 0;
}
inline double AccountInfo::_internal_spec_product_frozen_margin() const {
  return spec_product_frozen_margin_;
}
inline double AccountInfo::spec_product_frozen_margin() const {
  // @@protoc_insertion_point(field_get:AccountInfo.spec_product_frozen_margin)
  return _internal_spec_product_frozen_margin();
}
inline void AccountInfo::_internal_set_spec_product_frozen_margin(double value) {
  
  spec_product_frozen_margin_ = value;
}
inline void AccountInfo::set_spec_product_frozen_margin(double value) {
  _internal_set_spec_product_frozen_margin(value);
  // @@protoc_insertion_point(field_set:AccountInfo.spec_product_frozen_margin)
}

// double spec_product_commission = 41;
inline void AccountInfo::clear_spec_product_commission() {
  spec_product_commission_ = 0;
}
inline double AccountInfo::_internal_spec_product_commission() const {
  return spec_product_commission_;
}
inline double AccountInfo::spec_product_commission() const {
  // @@protoc_insertion_point(field_get:AccountInfo.spec_product_commission)
  return _internal_spec_product_commission();
}
inline void AccountInfo::_internal_set_spec_product_commission(double value) {
  
  spec_product_commission_ = value;
}
inline void AccountInfo::set_spec_product_commission(double value) {
  _internal_set_spec_product_commission(value);
  // @@protoc_insertion_point(field_set:AccountInfo.spec_product_commission)
}

// double spec_product_frozen_commission = 42;
inline void AccountInfo::clear_spec_product_frozen_commission() {
  spec_product_frozen_commission_ = 0;
}
inline double AccountInfo::_internal_spec_product_frozen_commission() const {
  return spec_product_frozen_commission_;
}
inline double AccountInfo::spec_product_frozen_commission() const {
  // @@protoc_insertion_point(field_get:AccountInfo.spec_product_frozen_commission)
  return _internal_spec_product_frozen_commission();
}
inline void AccountInfo::_internal_set_spec_product_frozen_commission(double value) {
  
  spec_product_frozen_commission_ = value;
}
inline void AccountInfo::set_spec_product_frozen_commission(double value) {
  _internal_set_spec_product_frozen_commission(value);
  // @@protoc_insertion_point(field_set:AccountInfo.spec_product_frozen_commission)
}

// double spec_product_position_profit = 43;
inline void AccountInfo::clear_spec_product_position_profit() {
  spec_product_position_profit_ = 0;
}
inline double AccountInfo::_internal_spec_product_position_profit() const {
  return spec_product_position_profit_;
}
inline double AccountInfo::spec_product_position_profit() const {
  // @@protoc_insertion_point(field_get:AccountInfo.spec_product_position_profit)
  return _internal_spec_product_position_profit();
}
inline void AccountInfo::_internal_set_spec_product_position_profit(double value) {
  
  spec_product_position_profit_ = value;
}
inline void AccountInfo::set_spec_product_position_profit(double value) {
  _internal_set_spec_product_position_profit(value);
  // @@protoc_insertion_point(field_set:AccountInfo.spec_product_position_profit)
}

// double spec_product_close_profit = 44;
inline void AccountInfo::clear_spec_product_close_profit() {
  spec_product_close_profit_ = 0;
}
inline double AccountInfo::_internal_spec_product_close_profit() const {
  return spec_product_close_profit_;
}
inline double AccountInfo::spec_product_close_profit() const {
  // @@protoc_insertion_point(field_get:AccountInfo.spec_product_close_profit)
  return _internal_spec_product_close_profit();
}
inline void AccountInfo::_internal_set_spec_product_close_profit(double value) {
  
  spec_product_close_profit_ = value;
}
inline void AccountInfo::set_spec_product_close_profit(double value) {
  _internal_set_spec_product_close_profit(value);
  // @@protoc_insertion_point(field_set:AccountInfo.spec_product_close_profit)
}

// double spec_product_position_profit_by_alg = 45;
inline void AccountInfo::clear_spec_product_position_profit_by_alg() {
  spec_product_position_profit_by_alg_ = 0;
}
inline double AccountInfo::_internal_spec_product_position_profit_by_alg() const {
  return spec_product_position_profit_by_alg_;
}
inline double AccountInfo::spec_product_position_profit_by_alg() const {
  // @@protoc_insertion_point(field_get:AccountInfo.spec_product_position_profit_by_alg)
  return _internal_spec_product_position_profit_by_alg();
}
inline void AccountInfo::_internal_set_spec_product_position_profit_by_alg(double value) {
  
  spec_product_position_profit_by_alg_ = value;
}
inline void AccountInfo::set_spec_product_position_profit_by_alg(double value) {
  _internal_set_spec_product_position_profit_by_alg(value);
  // @@protoc_insertion_point(field_set:AccountInfo.spec_product_position_profit_by_alg)
}

// double spec_product_exchange_margin = 46;
inline void AccountInfo::clear_spec_product_exchange_margin() {
  spec_product_exchange_margin_ = 0;
}
inline double AccountInfo::_internal_spec_product_exchange_margin() const {
  return spec_product_exchange_margin_;
}
inline double AccountInfo::spec_product_exchange_margin() const {
  // @@protoc_insertion_point(field_get:AccountInfo.spec_product_exchange_margin)
  return _internal_spec_product_exchange_margin();
}
inline void AccountInfo::_internal_set_spec_product_exchange_margin(double value) {
  
  spec_product_exchange_margin_ = value;
}
inline void AccountInfo::set_spec_product_exchange_margin(double value) {
  _internal_set_spec_product_exchange_margin(value);
  // @@protoc_insertion_point(field_set:AccountInfo.spec_product_exchange_margin)
}

// string biz_type = 47;
inline void AccountInfo::clear_biz_type() {
  biz_type_.ClearToEmpty();
}
inline const std::string& AccountInfo::biz_type() const {
  // @@protoc_insertion_point(field_get:AccountInfo.biz_type)
  return _internal_biz_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountInfo::set_biz_type(ArgT0&& arg0, ArgT... args) {
 
 biz_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AccountInfo.biz_type)
}
inline std::string* AccountInfo::mutable_biz_type() {
  std::string* _s = _internal_mutable_biz_type();
  // @@protoc_insertion_point(field_mutable:AccountInfo.biz_type)
  return _s;
}
inline const std::string& AccountInfo::_internal_biz_type() const {
  return biz_type_.Get();
}
inline void AccountInfo::_internal_set_biz_type(const std::string& value) {
  
  biz_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AccountInfo::_internal_mutable_biz_type() {
  
  return biz_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AccountInfo::release_biz_type() {
  // @@protoc_insertion_point(field_release:AccountInfo.biz_type)
  return biz_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AccountInfo::set_allocated_biz_type(std::string* biz_type) {
  if (biz_type != nullptr) {
    
  } else {
    
  }
  biz_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), biz_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (biz_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    biz_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AccountInfo.biz_type)
}

// double frozen_swap = 48;
inline void AccountInfo::clear_frozen_swap() {
  frozen_swap_ = 0;
}
inline double AccountInfo::_internal_frozen_swap() const {
  return frozen_swap_;
}
inline double AccountInfo::frozen_swap() const {
  // @@protoc_insertion_point(field_get:AccountInfo.frozen_swap)
  return _internal_frozen_swap();
}
inline void AccountInfo::_internal_set_frozen_swap(double value) {
  
  frozen_swap_ = value;
}
inline void AccountInfo::set_frozen_swap(double value) {
  _internal_set_frozen_swap(value);
  // @@protoc_insertion_point(field_set:AccountInfo.frozen_swap)
}

// double remain_swap = 49;
inline void AccountInfo::clear_remain_swap() {
  remain_swap_ = 0;
}
inline double AccountInfo::_internal_remain_swap() const {
  return remain_swap_;
}
inline double AccountInfo::remain_swap() const {
  // @@protoc_insertion_point(field_get:AccountInfo.remain_swap)
  return _internal_remain_swap();
}
inline void AccountInfo::_internal_set_remain_swap(double value) {
  
  remain_swap_ = value;
}
inline void AccountInfo::set_remain_swap(double value) {
  _internal_set_remain_swap(value);
  // @@protoc_insertion_point(field_set:AccountInfo.remain_swap)
}

// -------------------------------------------------------------------

// Position

// string reserve1 = 1;
inline void Position::clear_reserve1() {
  reserve1_.ClearToEmpty();
}
inline const std::string& Position::reserve1() const {
  // @@protoc_insertion_point(field_get:Position.reserve1)
  return _internal_reserve1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Position::set_reserve1(ArgT0&& arg0, ArgT... args) {
 
 reserve1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Position.reserve1)
}
inline std::string* Position::mutable_reserve1() {
  std::string* _s = _internal_mutable_reserve1();
  // @@protoc_insertion_point(field_mutable:Position.reserve1)
  return _s;
}
inline const std::string& Position::_internal_reserve1() const {
  return reserve1_.Get();
}
inline void Position::_internal_set_reserve1(const std::string& value) {
  
  reserve1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Position::_internal_mutable_reserve1() {
  
  return reserve1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Position::release_reserve1() {
  // @@protoc_insertion_point(field_release:Position.reserve1)
  return reserve1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Position::set_allocated_reserve1(std::string* reserve1) {
  if (reserve1 != nullptr) {
    
  } else {
    
  }
  reserve1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reserve1,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reserve1_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reserve1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Position.reserve1)
}

// string broker_id = 2;
inline void Position::clear_broker_id() {
  broker_id_.ClearToEmpty();
}
inline const std::string& Position::broker_id() const {
  // @@protoc_insertion_point(field_get:Position.broker_id)
  return _internal_broker_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Position::set_broker_id(ArgT0&& arg0, ArgT... args) {
 
 broker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Position.broker_id)
}
inline std::string* Position::mutable_broker_id() {
  std::string* _s = _internal_mutable_broker_id();
  // @@protoc_insertion_point(field_mutable:Position.broker_id)
  return _s;
}
inline const std::string& Position::_internal_broker_id() const {
  return broker_id_.Get();
}
inline void Position::_internal_set_broker_id(const std::string& value) {
  
  broker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Position::_internal_mutable_broker_id() {
  
  return broker_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Position::release_broker_id() {
  // @@protoc_insertion_point(field_release:Position.broker_id)
  return broker_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Position::set_allocated_broker_id(std::string* broker_id) {
  if (broker_id != nullptr) {
    
  } else {
    
  }
  broker_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), broker_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (broker_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    broker_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Position.broker_id)
}

// string investor_id = 3;
inline void Position::clear_investor_id() {
  investor_id_.ClearToEmpty();
}
inline const std::string& Position::investor_id() const {
  // @@protoc_insertion_point(field_get:Position.investor_id)
  return _internal_investor_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Position::set_investor_id(ArgT0&& arg0, ArgT... args) {
 
 investor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Position.investor_id)
}
inline std::string* Position::mutable_investor_id() {
  std::string* _s = _internal_mutable_investor_id();
  // @@protoc_insertion_point(field_mutable:Position.investor_id)
  return _s;
}
inline const std::string& Position::_internal_investor_id() const {
  return investor_id_.Get();
}
inline void Position::_internal_set_investor_id(const std::string& value) {
  
  investor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Position::_internal_mutable_investor_id() {
  
  return investor_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Position::release_investor_id() {
  // @@protoc_insertion_point(field_release:Position.investor_id)
  return investor_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Position::set_allocated_investor_id(std::string* investor_id) {
  if (investor_id != nullptr) {
    
  } else {
    
  }
  investor_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), investor_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (investor_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    investor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Position.investor_id)
}

// string posi_direction = 4;
inline void Position::clear_posi_direction() {
  posi_direction_.ClearToEmpty();
}
inline const std::string& Position::posi_direction() const {
  // @@protoc_insertion_point(field_get:Position.posi_direction)
  return _internal_posi_direction();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Position::set_posi_direction(ArgT0&& arg0, ArgT... args) {
 
 posi_direction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Position.posi_direction)
}
inline std::string* Position::mutable_posi_direction() {
  std::string* _s = _internal_mutable_posi_direction();
  // @@protoc_insertion_point(field_mutable:Position.posi_direction)
  return _s;
}
inline const std::string& Position::_internal_posi_direction() const {
  return posi_direction_.Get();
}
inline void Position::_internal_set_posi_direction(const std::string& value) {
  
  posi_direction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Position::_internal_mutable_posi_direction() {
  
  return posi_direction_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Position::release_posi_direction() {
  // @@protoc_insertion_point(field_release:Position.posi_direction)
  return posi_direction_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Position::set_allocated_posi_direction(std::string* posi_direction) {
  if (posi_direction != nullptr) {
    
  } else {
    
  }
  posi_direction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), posi_direction,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (posi_direction_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    posi_direction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Position.posi_direction)
}

// string hedge_flag = 5;
inline void Position::clear_hedge_flag() {
  hedge_flag_.ClearToEmpty();
}
inline const std::string& Position::hedge_flag() const {
  // @@protoc_insertion_point(field_get:Position.hedge_flag)
  return _internal_hedge_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Position::set_hedge_flag(ArgT0&& arg0, ArgT... args) {
 
 hedge_flag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Position.hedge_flag)
}
inline std::string* Position::mutable_hedge_flag() {
  std::string* _s = _internal_mutable_hedge_flag();
  // @@protoc_insertion_point(field_mutable:Position.hedge_flag)
  return _s;
}
inline const std::string& Position::_internal_hedge_flag() const {
  return hedge_flag_.Get();
}
inline void Position::_internal_set_hedge_flag(const std::string& value) {
  
  hedge_flag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Position::_internal_mutable_hedge_flag() {
  
  return hedge_flag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Position::release_hedge_flag() {
  // @@protoc_insertion_point(field_release:Position.hedge_flag)
  return hedge_flag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Position::set_allocated_hedge_flag(std::string* hedge_flag) {
  if (hedge_flag != nullptr) {
    
  } else {
    
  }
  hedge_flag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hedge_flag,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hedge_flag_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hedge_flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Position.hedge_flag)
}

// string position_date = 6;
inline void Position::clear_position_date() {
  position_date_.ClearToEmpty();
}
inline const std::string& Position::position_date() const {
  // @@protoc_insertion_point(field_get:Position.position_date)
  return _internal_position_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Position::set_position_date(ArgT0&& arg0, ArgT... args) {
 
 position_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Position.position_date)
}
inline std::string* Position::mutable_position_date() {
  std::string* _s = _internal_mutable_position_date();
  // @@protoc_insertion_point(field_mutable:Position.position_date)
  return _s;
}
inline const std::string& Position::_internal_position_date() const {
  return position_date_.Get();
}
inline void Position::_internal_set_position_date(const std::string& value) {
  
  position_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Position::_internal_mutable_position_date() {
  
  return position_date_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Position::release_position_date() {
  // @@protoc_insertion_point(field_release:Position.position_date)
  return position_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Position::set_allocated_position_date(std::string* position_date) {
  if (position_date != nullptr) {
    
  } else {
    
  }
  position_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), position_date,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (position_date_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    position_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Position.position_date)
}

// int32 position = 7;
inline void Position::clear_position() {
  position_ = 0;
}
inline int32_t Position::_internal_position() const {
  return position_;
}
inline int32_t Position::position() const {
  // @@protoc_insertion_point(field_get:Position.position)
  return _internal_position();
}
inline void Position::_internal_set_position(int32_t value) {
  
  position_ = value;
}
inline void Position::set_position(int32_t value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:Position.position)
}

// int32 yd_position = 8;
inline void Position::clear_yd_position() {
  yd_position_ = 0;
}
inline int32_t Position::_internal_yd_position() const {
  return yd_position_;
}
inline int32_t Position::yd_position() const {
  // @@protoc_insertion_point(field_get:Position.yd_position)
  return _internal_yd_position();
}
inline void Position::_internal_set_yd_position(int32_t value) {
  
  yd_position_ = value;
}
inline void Position::set_yd_position(int32_t value) {
  _internal_set_yd_position(value);
  // @@protoc_insertion_point(field_set:Position.yd_position)
}

// int32 today_position = 9;
inline void Position::clear_today_position() {
  today_position_ = 0;
}
inline int32_t Position::_internal_today_position() const {
  return today_position_;
}
inline int32_t Position::today_position() const {
  // @@protoc_insertion_point(field_get:Position.today_position)
  return _internal_today_position();
}
inline void Position::_internal_set_today_position(int32_t value) {
  
  today_position_ = value;
}
inline void Position::set_today_position(int32_t value) {
  _internal_set_today_position(value);
  // @@protoc_insertion_point(field_set:Position.today_position)
}

// int32 open_volume = 10;
inline void Position::clear_open_volume() {
  open_volume_ = 0;
}
inline int32_t Position::_internal_open_volume() const {
  return open_volume_;
}
inline int32_t Position::open_volume() const {
  // @@protoc_insertion_point(field_get:Position.open_volume)
  return _internal_open_volume();
}
inline void Position::_internal_set_open_volume(int32_t value) {
  
  open_volume_ = value;
}
inline void Position::set_open_volume(int32_t value) {
  _internal_set_open_volume(value);
  // @@protoc_insertion_point(field_set:Position.open_volume)
}

// int32 close_volume = 11;
inline void Position::clear_close_volume() {
  close_volume_ = 0;
}
inline int32_t Position::_internal_close_volume() const {
  return close_volume_;
}
inline int32_t Position::close_volume() const {
  // @@protoc_insertion_point(field_get:Position.close_volume)
  return _internal_close_volume();
}
inline void Position::_internal_set_close_volume(int32_t value) {
  
  close_volume_ = value;
}
inline void Position::set_close_volume(int32_t value) {
  _internal_set_close_volume(value);
  // @@protoc_insertion_point(field_set:Position.close_volume)
}

// double open_amount = 12;
inline void Position::clear_open_amount() {
  open_amount_ = 0;
}
inline double Position::_internal_open_amount() const {
  return open_amount_;
}
inline double Position::open_amount() const {
  // @@protoc_insertion_point(field_get:Position.open_amount)
  return _internal_open_amount();
}
inline void Position::_internal_set_open_amount(double value) {
  
  open_amount_ = value;
}
inline void Position::set_open_amount(double value) {
  _internal_set_open_amount(value);
  // @@protoc_insertion_point(field_set:Position.open_amount)
}

// double close_amount = 13;
inline void Position::clear_close_amount() {
  close_amount_ = 0;
}
inline double Position::_internal_close_amount() const {
  return close_amount_;
}
inline double Position::close_amount() const {
  // @@protoc_insertion_point(field_get:Position.close_amount)
  return _internal_close_amount();
}
inline void Position::_internal_set_close_amount(double value) {
  
  close_amount_ = value;
}
inline void Position::set_close_amount(double value) {
  _internal_set_close_amount(value);
  // @@protoc_insertion_point(field_set:Position.close_amount)
}

// double position_cost = 14;
inline void Position::clear_position_cost() {
  position_cost_ = 0;
}
inline double Position::_internal_position_cost() const {
  return position_cost_;
}
inline double Position::position_cost() const {
  // @@protoc_insertion_point(field_get:Position.position_cost)
  return _internal_position_cost();
}
inline void Position::_internal_set_position_cost(double value) {
  
  position_cost_ = value;
}
inline void Position::set_position_cost(double value) {
  _internal_set_position_cost(value);
  // @@protoc_insertion_point(field_set:Position.position_cost)
}

// double close_profit = 15;
inline void Position::clear_close_profit() {
  close_profit_ = 0;
}
inline double Position::_internal_close_profit() const {
  return close_profit_;
}
inline double Position::close_profit() const {
  // @@protoc_insertion_point(field_get:Position.close_profit)
  return _internal_close_profit();
}
inline void Position::_internal_set_close_profit(double value) {
  
  close_profit_ = value;
}
inline void Position::set_close_profit(double value) {
  _internal_set_close_profit(value);
  // @@protoc_insertion_point(field_set:Position.close_profit)
}

// double position_profit = 16;
inline void Position::clear_position_profit() {
  position_profit_ = 0;
}
inline double Position::_internal_position_profit() const {
  return position_profit_;
}
inline double Position::position_profit() const {
  // @@protoc_insertion_point(field_get:Position.position_profit)
  return _internal_position_profit();
}
inline void Position::_internal_set_position_profit(double value) {
  
  position_profit_ = value;
}
inline void Position::set_position_profit(double value) {
  _internal_set_position_profit(value);
  // @@protoc_insertion_point(field_set:Position.position_profit)
}

// double open_cost = 17;
inline void Position::clear_open_cost() {
  open_cost_ = 0;
}
inline double Position::_internal_open_cost() const {
  return open_cost_;
}
inline double Position::open_cost() const {
  // @@protoc_insertion_point(field_get:Position.open_cost)
  return _internal_open_cost();
}
inline void Position::_internal_set_open_cost(double value) {
  
  open_cost_ = value;
}
inline void Position::set_open_cost(double value) {
  _internal_set_open_cost(value);
  // @@protoc_insertion_point(field_set:Position.open_cost)
}

// int32 long_frozen = 18;
inline void Position::clear_long_frozen() {
  long_frozen_ = 0;
}
inline int32_t Position::_internal_long_frozen() const {
  return long_frozen_;
}
inline int32_t Position::long_frozen() const {
  // @@protoc_insertion_point(field_get:Position.long_frozen)
  return _internal_long_frozen();
}
inline void Position::_internal_set_long_frozen(int32_t value) {
  
  long_frozen_ = value;
}
inline void Position::set_long_frozen(int32_t value) {
  _internal_set_long_frozen(value);
  // @@protoc_insertion_point(field_set:Position.long_frozen)
}

// int32 short_frozen = 19;
inline void Position::clear_short_frozen() {
  short_frozen_ = 0;
}
inline int32_t Position::_internal_short_frozen() const {
  return short_frozen_;
}
inline int32_t Position::short_frozen() const {
  // @@protoc_insertion_point(field_get:Position.short_frozen)
  return _internal_short_frozen();
}
inline void Position::_internal_set_short_frozen(int32_t value) {
  
  short_frozen_ = value;
}
inline void Position::set_short_frozen(int32_t value) {
  _internal_set_short_frozen(value);
  // @@protoc_insertion_point(field_set:Position.short_frozen)
}

// double long_frozen_amount = 20;
inline void Position::clear_long_frozen_amount() {
  long_frozen_amount_ = 0;
}
inline double Position::_internal_long_frozen_amount() const {
  return long_frozen_amount_;
}
inline double Position::long_frozen_amount() const {
  // @@protoc_insertion_point(field_get:Position.long_frozen_amount)
  return _internal_long_frozen_amount();
}
inline void Position::_internal_set_long_frozen_amount(double value) {
  
  long_frozen_amount_ = value;
}
inline void Position::set_long_frozen_amount(double value) {
  _internal_set_long_frozen_amount(value);
  // @@protoc_insertion_point(field_set:Position.long_frozen_amount)
}

// double short_frozen_amount = 21;
inline void Position::clear_short_frozen_amount() {
  short_frozen_amount_ = 0;
}
inline double Position::_internal_short_frozen_amount() const {
  return short_frozen_amount_;
}
inline double Position::short_frozen_amount() const {
  // @@protoc_insertion_point(field_get:Position.short_frozen_amount)
  return _internal_short_frozen_amount();
}
inline void Position::_internal_set_short_frozen_amount(double value) {
  
  short_frozen_amount_ = value;
}
inline void Position::set_short_frozen_amount(double value) {
  _internal_set_short_frozen_amount(value);
  // @@protoc_insertion_point(field_set:Position.short_frozen_amount)
}

// double pre_margin = 22;
inline void Position::clear_pre_margin() {
  pre_margin_ = 0;
}
inline double Position::_internal_pre_margin() const {
  return pre_margin_;
}
inline double Position::pre_margin() const {
  // @@protoc_insertion_point(field_get:Position.pre_margin)
  return _internal_pre_margin();
}
inline void Position::_internal_set_pre_margin(double value) {
  
  pre_margin_ = value;
}
inline void Position::set_pre_margin(double value) {
  _internal_set_pre_margin(value);
  // @@protoc_insertion_point(field_set:Position.pre_margin)
}

// double use_margin = 23;
inline void Position::clear_use_margin() {
  use_margin_ = 0;
}
inline double Position::_internal_use_margin() const {
  return use_margin_;
}
inline double Position::use_margin() const {
  // @@protoc_insertion_point(field_get:Position.use_margin)
  return _internal_use_margin();
}
inline void Position::_internal_set_use_margin(double value) {
  
  use_margin_ = value;
}
inline void Position::set_use_margin(double value) {
  _internal_set_use_margin(value);
  // @@protoc_insertion_point(field_set:Position.use_margin)
}

// double frozen_margin = 24;
inline void Position::clear_frozen_margin() {
  frozen_margin_ = 0;
}
inline double Position::_internal_frozen_margin() const {
  return frozen_margin_;
}
inline double Position::frozen_margin() const {
  // @@protoc_insertion_point(field_get:Position.frozen_margin)
  return _internal_frozen_margin();
}
inline void Position::_internal_set_frozen_margin(double value) {
  
  frozen_margin_ = value;
}
inline void Position::set_frozen_margin(double value) {
  _internal_set_frozen_margin(value);
  // @@protoc_insertion_point(field_set:Position.frozen_margin)
}

// double frozen_cash = 25;
inline void Position::clear_frozen_cash() {
  frozen_cash_ = 0;
}
inline double Position::_internal_frozen_cash() const {
  return frozen_cash_;
}
inline double Position::frozen_cash() const {
  // @@protoc_insertion_point(field_get:Position.frozen_cash)
  return _internal_frozen_cash();
}
inline void Position::_internal_set_frozen_cash(double value) {
  
  frozen_cash_ = value;
}
inline void Position::set_frozen_cash(double value) {
  _internal_set_frozen_cash(value);
  // @@protoc_insertion_point(field_set:Position.frozen_cash)
}

// double frozen_commission = 26;
inline void Position::clear_frozen_commission() {
  frozen_commission_ = 0;
}
inline double Position::_internal_frozen_commission() const {
  return frozen_commission_;
}
inline double Position::frozen_commission() const {
  // @@protoc_insertion_point(field_get:Position.frozen_commission)
  return _internal_frozen_commission();
}
inline void Position::_internal_set_frozen_commission(double value) {
  
  frozen_commission_ = value;
}
inline void Position::set_frozen_commission(double value) {
  _internal_set_frozen_commission(value);
  // @@protoc_insertion_point(field_set:Position.frozen_commission)
}

// double cash_in = 27;
inline void Position::clear_cash_in() {
  cash_in_ = 0;
}
inline double Position::_internal_cash_in() const {
  return cash_in_;
}
inline double Position::cash_in() const {
  // @@protoc_insertion_point(field_get:Position.cash_in)
  return _internal_cash_in();
}
inline void Position::_internal_set_cash_in(double value) {
  
  cash_in_ = value;
}
inline void Position::set_cash_in(double value) {
  _internal_set_cash_in(value);
  // @@protoc_insertion_point(field_set:Position.cash_in)
}

// double commission = 28;
inline void Position::clear_commission() {
  commission_ = 0;
}
inline double Position::_internal_commission() const {
  return commission_;
}
inline double Position::commission() const {
  // @@protoc_insertion_point(field_get:Position.commission)
  return _internal_commission();
}
inline void Position::_internal_set_commission(double value) {
  
  commission_ = value;
}
inline void Position::set_commission(double value) {
  _internal_set_commission(value);
  // @@protoc_insertion_point(field_set:Position.commission)
}

// double pre_settlement_price = 29;
inline void Position::clear_pre_settlement_price() {
  pre_settlement_price_ = 0;
}
inline double Position::_internal_pre_settlement_price() const {
  return pre_settlement_price_;
}
inline double Position::pre_settlement_price() const {
  // @@protoc_insertion_point(field_get:Position.pre_settlement_price)
  return _internal_pre_settlement_price();
}
inline void Position::_internal_set_pre_settlement_price(double value) {
  
  pre_settlement_price_ = value;
}
inline void Position::set_pre_settlement_price(double value) {
  _internal_set_pre_settlement_price(value);
  // @@protoc_insertion_point(field_set:Position.pre_settlement_price)
}

// double settlement_price = 30;
inline void Position::clear_settlement_price() {
  settlement_price_ = 0;
}
inline double Position::_internal_settlement_price() const {
  return settlement_price_;
}
inline double Position::settlement_price() const {
  // @@protoc_insertion_point(field_get:Position.settlement_price)
  return _internal_settlement_price();
}
inline void Position::_internal_set_settlement_price(double value) {
  
  settlement_price_ = value;
}
inline void Position::set_settlement_price(double value) {
  _internal_set_settlement_price(value);
  // @@protoc_insertion_point(field_set:Position.settlement_price)
}

// int32 settlement_id = 31;
inline void Position::clear_settlement_id() {
  settlement_id_ = 0;
}
inline int32_t Position::_internal_settlement_id() const {
  return settlement_id_;
}
inline int32_t Position::settlement_id() const {
  // @@protoc_insertion_point(field_get:Position.settlement_id)
  return _internal_settlement_id();
}
inline void Position::_internal_set_settlement_id(int32_t value) {
  
  settlement_id_ = value;
}
inline void Position::set_settlement_id(int32_t value) {
  _internal_set_settlement_id(value);
  // @@protoc_insertion_point(field_set:Position.settlement_id)
}

// double exchange_margin = 32;
inline void Position::clear_exchange_margin() {
  exchange_margin_ = 0;
}
inline double Position::_internal_exchange_margin() const {
  return exchange_margin_;
}
inline double Position::exchange_margin() const {
  // @@protoc_insertion_point(field_get:Position.exchange_margin)
  return _internal_exchange_margin();
}
inline void Position::_internal_set_exchange_margin(double value) {
  
  exchange_margin_ = value;
}
inline void Position::set_exchange_margin(double value) {
  _internal_set_exchange_margin(value);
  // @@protoc_insertion_point(field_set:Position.exchange_margin)
}

// int32 comb_position = 33;
inline void Position::clear_comb_position() {
  comb_position_ = 0;
}
inline int32_t Position::_internal_comb_position() const {
  return comb_position_;
}
inline int32_t Position::comb_position() const {
  // @@protoc_insertion_point(field_get:Position.comb_position)
  return _internal_comb_position();
}
inline void Position::_internal_set_comb_position(int32_t value) {
  
  comb_position_ = value;
}
inline void Position::set_comb_position(int32_t value) {
  _internal_set_comb_position(value);
  // @@protoc_insertion_point(field_set:Position.comb_position)
}

// int32 comb_long_frozen = 34;
inline void Position::clear_comb_long_frozen() {
  comb_long_frozen_ = 0;
}
inline int32_t Position::_internal_comb_long_frozen() const {
  return comb_long_frozen_;
}
inline int32_t Position::comb_long_frozen() const {
  // @@protoc_insertion_point(field_get:Position.comb_long_frozen)
  return _internal_comb_long_frozen();
}
inline void Position::_internal_set_comb_long_frozen(int32_t value) {
  
  comb_long_frozen_ = value;
}
inline void Position::set_comb_long_frozen(int32_t value) {
  _internal_set_comb_long_frozen(value);
  // @@protoc_insertion_point(field_set:Position.comb_long_frozen)
}

// int32 comb_short_frozen = 35;
inline void Position::clear_comb_short_frozen() {
  comb_short_frozen_ = 0;
}
inline int32_t Position::_internal_comb_short_frozen() const {
  return comb_short_frozen_;
}
inline int32_t Position::comb_short_frozen() const {
  // @@protoc_insertion_point(field_get:Position.comb_short_frozen)
  return _internal_comb_short_frozen();
}
inline void Position::_internal_set_comb_short_frozen(int32_t value) {
  
  comb_short_frozen_ = value;
}
inline void Position::set_comb_short_frozen(int32_t value) {
  _internal_set_comb_short_frozen(value);
  // @@protoc_insertion_point(field_set:Position.comb_short_frozen)
}

// double close_profit_by_date = 36;
inline void Position::clear_close_profit_by_date() {
  close_profit_by_date_ = 0;
}
inline double Position::_internal_close_profit_by_date() const {
  return close_profit_by_date_;
}
inline double Position::close_profit_by_date() const {
  // @@protoc_insertion_point(field_get:Position.close_profit_by_date)
  return _internal_close_profit_by_date();
}
inline void Position::_internal_set_close_profit_by_date(double value) {
  
  close_profit_by_date_ = value;
}
inline void Position::set_close_profit_by_date(double value) {
  _internal_set_close_profit_by_date(value);
  // @@protoc_insertion_point(field_set:Position.close_profit_by_date)
}

// double close_profit_by_trade = 37;
inline void Position::clear_close_profit_by_trade() {
  close_profit_by_trade_ = 0;
}
inline double Position::_internal_close_profit_by_trade() const {
  return close_profit_by_trade_;
}
inline double Position::close_profit_by_trade() const {
  // @@protoc_insertion_point(field_get:Position.close_profit_by_trade)
  return _internal_close_profit_by_trade();
}
inline void Position::_internal_set_close_profit_by_trade(double value) {
  
  close_profit_by_trade_ = value;
}
inline void Position::set_close_profit_by_trade(double value) {
  _internal_set_close_profit_by_trade(value);
  // @@protoc_insertion_point(field_set:Position.close_profit_by_trade)
}

// int32 strike_frozen = 38;
inline void Position::clear_strike_frozen() {
  strike_frozen_ = 0;
}
inline int32_t Position::_internal_strike_frozen() const {
  return strike_frozen_;
}
inline int32_t Position::strike_frozen() const {
  // @@protoc_insertion_point(field_get:Position.strike_frozen)
  return _internal_strike_frozen();
}
inline void Position::_internal_set_strike_frozen(int32_t value) {
  
  strike_frozen_ = value;
}
inline void Position::set_strike_frozen(int32_t value) {
  _internal_set_strike_frozen(value);
  // @@protoc_insertion_point(field_set:Position.strike_frozen)
}

// double strike_frozen_amount = 39;
inline void Position::clear_strike_frozen_amount() {
  strike_frozen_amount_ = 0;
}
inline double Position::_internal_strike_frozen_amount() const {
  return strike_frozen_amount_;
}
inline double Position::strike_frozen_amount() const {
  // @@protoc_insertion_point(field_get:Position.strike_frozen_amount)
  return _internal_strike_frozen_amount();
}
inline void Position::_internal_set_strike_frozen_amount(double value) {
  
  strike_frozen_amount_ = value;
}
inline void Position::set_strike_frozen_amount(double value) {
  _internal_set_strike_frozen_amount(value);
  // @@protoc_insertion_point(field_set:Position.strike_frozen_amount)
}

// int32 abandon_frozen = 40;
inline void Position::clear_abandon_frozen() {
  abandon_frozen_ = 0;
}
inline int32_t Position::_internal_abandon_frozen() const {
  return abandon_frozen_;
}
inline int32_t Position::abandon_frozen() const {
  // @@protoc_insertion_point(field_get:Position.abandon_frozen)
  return _internal_abandon_frozen();
}
inline void Position::_internal_set_abandon_frozen(int32_t value) {
  
  abandon_frozen_ = value;
}
inline void Position::set_abandon_frozen(int32_t value) {
  _internal_set_abandon_frozen(value);
  // @@protoc_insertion_point(field_set:Position.abandon_frozen)
}

// string exchange_id = 41;
inline void Position::clear_exchange_id() {
  exchange_id_.ClearToEmpty();
}
inline const std::string& Position::exchange_id() const {
  // @@protoc_insertion_point(field_get:Position.exchange_id)
  return _internal_exchange_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Position::set_exchange_id(ArgT0&& arg0, ArgT... args) {
 
 exchange_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Position.exchange_id)
}
inline std::string* Position::mutable_exchange_id() {
  std::string* _s = _internal_mutable_exchange_id();
  // @@protoc_insertion_point(field_mutable:Position.exchange_id)
  return _s;
}
inline const std::string& Position::_internal_exchange_id() const {
  return exchange_id_.Get();
}
inline void Position::_internal_set_exchange_id(const std::string& value) {
  
  exchange_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Position::_internal_mutable_exchange_id() {
  
  return exchange_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Position::release_exchange_id() {
  // @@protoc_insertion_point(field_release:Position.exchange_id)
  return exchange_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Position::set_allocated_exchange_id(std::string* exchange_id) {
  if (exchange_id != nullptr) {
    
  } else {
    
  }
  exchange_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (exchange_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Position.exchange_id)
}

// int32 yd_strike_frozen = 42;
inline void Position::clear_yd_strike_frozen() {
  yd_strike_frozen_ = 0;
}
inline int32_t Position::_internal_yd_strike_frozen() const {
  return yd_strike_frozen_;
}
inline int32_t Position::yd_strike_frozen() const {
  // @@protoc_insertion_point(field_get:Position.yd_strike_frozen)
  return _internal_yd_strike_frozen();
}
inline void Position::_internal_set_yd_strike_frozen(int32_t value) {
  
  yd_strike_frozen_ = value;
}
inline void Position::set_yd_strike_frozen(int32_t value) {
  _internal_set_yd_strike_frozen(value);
  // @@protoc_insertion_point(field_set:Position.yd_strike_frozen)
}

// double position_cost_offset = 43;
inline void Position::clear_position_cost_offset() {
  position_cost_offset_ = 0;
}
inline double Position::_internal_position_cost_offset() const {
  return position_cost_offset_;
}
inline double Position::position_cost_offset() const {
  // @@protoc_insertion_point(field_get:Position.position_cost_offset)
  return _internal_position_cost_offset();
}
inline void Position::_internal_set_position_cost_offset(double value) {
  
  position_cost_offset_ = value;
}
inline void Position::set_position_cost_offset(double value) {
  _internal_set_position_cost_offset(value);
  // @@protoc_insertion_point(field_set:Position.position_cost_offset)
}

// string instrument_id = 44;
inline void Position::clear_instrument_id() {
  instrument_id_.ClearToEmpty();
}
inline const std::string& Position::instrument_id() const {
  // @@protoc_insertion_point(field_get:Position.instrument_id)
  return _internal_instrument_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Position::set_instrument_id(ArgT0&& arg0, ArgT... args) {
 
 instrument_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Position.instrument_id)
}
inline std::string* Position::mutable_instrument_id() {
  std::string* _s = _internal_mutable_instrument_id();
  // @@protoc_insertion_point(field_mutable:Position.instrument_id)
  return _s;
}
inline const std::string& Position::_internal_instrument_id() const {
  return instrument_id_.Get();
}
inline void Position::_internal_set_instrument_id(const std::string& value) {
  
  instrument_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Position::_internal_mutable_instrument_id() {
  
  return instrument_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Position::release_instrument_id() {
  // @@protoc_insertion_point(field_release:Position.instrument_id)
  return instrument_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Position::set_allocated_instrument_id(std::string* instrument_id) {
  if (instrument_id != nullptr) {
    
  } else {
    
  }
  instrument_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrument_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (instrument_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Position.instrument_id)
}

// string instrument_name = 45;
inline void Position::clear_instrument_name() {
  instrument_name_.ClearToEmpty();
}
inline const std::string& Position::instrument_name() const {
  // @@protoc_insertion_point(field_get:Position.instrument_name)
  return _internal_instrument_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Position::set_instrument_name(ArgT0&& arg0, ArgT... args) {
 
 instrument_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Position.instrument_name)
}
inline std::string* Position::mutable_instrument_name() {
  std::string* _s = _internal_mutable_instrument_name();
  // @@protoc_insertion_point(field_mutable:Position.instrument_name)
  return _s;
}
inline const std::string& Position::_internal_instrument_name() const {
  return instrument_name_.Get();
}
inline void Position::_internal_set_instrument_name(const std::string& value) {
  
  instrument_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Position::_internal_mutable_instrument_name() {
  
  return instrument_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Position::release_instrument_name() {
  // @@protoc_insertion_point(field_release:Position.instrument_name)
  return instrument_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Position::set_allocated_instrument_name(std::string* instrument_name) {
  if (instrument_name != nullptr) {
    
  } else {
    
  }
  instrument_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrument_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (instrument_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    instrument_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Position.instrument_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_account_2eproto
