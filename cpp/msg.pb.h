// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "any.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto;
class ReqMsg;
struct ReqMsgDefaultTypeInternal;
extern ReqMsgDefaultTypeInternal _ReqMsg_default_instance_;
class RspInfo;
struct RspInfoDefaultTypeInternal;
extern RspInfoDefaultTypeInternal _RspInfo_default_instance_;
class RspMsg;
struct RspMsgDefaultTypeInternal;
extern RspMsgDefaultTypeInternal _RspMsg_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ReqMsg* Arena::CreateMaybeMessage<::ReqMsg>(Arena*);
template<> ::RspInfo* Arena::CreateMaybeMessage<::RspInfo>(Arena*);
template<> ::RspMsg* Arena::CreateMaybeMessage<::RspMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum MsgType : int {
  UNIVERSAL = 0,
  ReqQryInstrument = 1,
  OnRspQryInstrument = 2,
  OnRtnInstrumentStatus = 3,
  ReqQryTradingAccount = 4,
  OnRspQryTradingAccount = 5,
  ReqQryInvestorPosition = 6,
  OnRspQryInvestorPosition = 7,
  ReqQryOrder = 8,
  OnRspQryOrder = 9,
  OnRtnOrder = 10,
  OnRtnTrade = 11,
  ReqOrderInsert = 12,
  OnRspOrderInsert = 13,
  ReqOrderAction = 14,
  OnRspOrderAction = 15,
  OnErrRtnOrderAction = 16,
  OnRspError = 17,
  SubscribeMarketData = 18,
  OnRspSubMarketData = 19,
  UnSubscribeMarketData = 20,
  OnRspUnSubMarketData = 21,
  OnRtnDepthMarketData = 22,
  OnFrontConnected = 23,
  OnFrontDisconnected = 24,
  ReqAuthenticate = 25,
  OnRspAuth = 26,
  ReqUserLogin = 27,
  OnRspUserLogin = 28,
  ReqSettlementInfoConfirm = 29,
  OnRspSettlementInfoConfirm = 30,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MsgType_IsValid(int value);
constexpr MsgType MsgType_MIN = UNIVERSAL;
constexpr MsgType MsgType_MAX = OnRspSettlementInfoConfirm;
constexpr int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor();
template<typename T>
inline const std::string& MsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgType_descriptor(), enum_t_value);
}
inline bool MsgType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
// ===================================================================

class RspInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RspInfo) */ {
 public:
  inline RspInfo() : RspInfo(nullptr) {}
  ~RspInfo() override;
  explicit constexpr RspInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RspInfo(const RspInfo& from);
  RspInfo(RspInfo&& from) noexcept
    : RspInfo() {
    *this = ::std::move(from);
  }

  inline RspInfo& operator=(const RspInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RspInfo& operator=(RspInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RspInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RspInfo* internal_default_instance() {
    return reinterpret_cast<const RspInfo*>(
               &_RspInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RspInfo& a, RspInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RspInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RspInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RspInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RspInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RspInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RspInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RspInfo";
  }
  protected:
  explicit RspInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMsgFieldNumber = 2,
    kErrorIdFieldNumber = 1,
  };
  // string error_msg = 2;
  void clear_error_msg();
  const std::string& error_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_msg();
  PROTOBUF_NODISCARD std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);
  private:
  const std::string& _internal_error_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_msg(const std::string& value);
  std::string* _internal_mutable_error_msg();
  public:

  // int32 error_id = 1;
  void clear_error_id();
  int32_t error_id() const;
  void set_error_id(int32_t value);
  private:
  int32_t _internal_error_id() const;
  void _internal_set_error_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:RspInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
  int32_t error_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class ReqMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReqMsg) */ {
 public:
  inline ReqMsg() : ReqMsg(nullptr) {}
  ~ReqMsg() override;
  explicit constexpr ReqMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqMsg(const ReqMsg& from);
  ReqMsg(ReqMsg&& from) noexcept
    : ReqMsg() {
    *this = ::std::move(from);
  }

  inline ReqMsg& operator=(const ReqMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqMsg& operator=(ReqMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqMsg* internal_default_instance() {
    return reinterpret_cast<const ReqMsg*>(
               &_ReqMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReqMsg& a, ReqMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReqMsg";
  }
  protected:
  explicit ReqMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReqFieldNumber = 3,
    kTypeFieldNumber = 1,
    kRequestIdFieldNumber = 2,
  };
  // .google.protobuf.Any req = 3;
  bool has_req() const;
  private:
  bool _internal_has_req() const;
  public:
  void clear_req();
  const ::google::protobuf::Any& req() const;
  PROTOBUF_NODISCARD ::google::protobuf::Any* release_req();
  ::google::protobuf::Any* mutable_req();
  void set_allocated_req(::google::protobuf::Any* req);
  private:
  const ::google::protobuf::Any& _internal_req() const;
  ::google::protobuf::Any* _internal_mutable_req();
  public:
  void unsafe_arena_set_allocated_req(
      ::google::protobuf::Any* req);
  ::google::protobuf::Any* unsafe_arena_release_req();

  // .MsgType type = 1;
  void clear_type();
  ::MsgType type() const;
  void set_type(::MsgType value);
  private:
  ::MsgType _internal_type() const;
  void _internal_set_type(::MsgType value);
  public:

  // int32 request_id = 2;
  void clear_request_id();
  int32_t request_id() const;
  void set_request_id(int32_t value);
  private:
  int32_t _internal_request_id() const;
  void _internal_set_request_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ReqMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::Any* req_;
  int type_;
  int32_t request_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class RspMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RspMsg) */ {
 public:
  inline RspMsg() : RspMsg(nullptr) {}
  ~RspMsg() override;
  explicit constexpr RspMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RspMsg(const RspMsg& from);
  RspMsg(RspMsg&& from) noexcept
    : RspMsg() {
    *this = ::std::move(from);
  }

  inline RspMsg& operator=(const RspMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline RspMsg& operator=(RspMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RspMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const RspMsg* internal_default_instance() {
    return reinterpret_cast<const RspMsg*>(
               &_RspMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RspMsg& a, RspMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(RspMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RspMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RspMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RspMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RspMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RspMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RspMsg";
  }
  protected:
  explicit RspMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFiledFieldNumber = 2,
    kRspInfoFieldNumber = 3,
    kTypeFieldNumber = 1,
    kRequestIdFieldNumber = 4,
    kIsLastFieldNumber = 5,
  };
  // .google.protobuf.Any filed = 2;
  bool has_filed() const;
  private:
  bool _internal_has_filed() const;
  public:
  void clear_filed();
  const ::google::protobuf::Any& filed() const;
  PROTOBUF_NODISCARD ::google::protobuf::Any* release_filed();
  ::google::protobuf::Any* mutable_filed();
  void set_allocated_filed(::google::protobuf::Any* filed);
  private:
  const ::google::protobuf::Any& _internal_filed() const;
  ::google::protobuf::Any* _internal_mutable_filed();
  public:
  void unsafe_arena_set_allocated_filed(
      ::google::protobuf::Any* filed);
  ::google::protobuf::Any* unsafe_arena_release_filed();

  // .RspInfo rspInfo = 3;
  bool has_rspinfo() const;
  private:
  bool _internal_has_rspinfo() const;
  public:
  void clear_rspinfo();
  const ::RspInfo& rspinfo() const;
  PROTOBUF_NODISCARD ::RspInfo* release_rspinfo();
  ::RspInfo* mutable_rspinfo();
  void set_allocated_rspinfo(::RspInfo* rspinfo);
  private:
  const ::RspInfo& _internal_rspinfo() const;
  ::RspInfo* _internal_mutable_rspinfo();
  public:
  void unsafe_arena_set_allocated_rspinfo(
      ::RspInfo* rspinfo);
  ::RspInfo* unsafe_arena_release_rspinfo();

  // .MsgType type = 1;
  void clear_type();
  ::MsgType type() const;
  void set_type(::MsgType value);
  private:
  ::MsgType _internal_type() const;
  void _internal_set_type(::MsgType value);
  public:

  // int32 request_id = 4;
  void clear_request_id();
  int32_t request_id() const;
  void set_request_id(int32_t value);
  private:
  int32_t _internal_request_id() const;
  void _internal_set_request_id(int32_t value);
  public:

  // bool isLast = 5;
  void clear_islast();
  bool islast() const;
  void set_islast(bool value);
  private:
  bool _internal_islast() const;
  void _internal_set_islast(bool value);
  public:

  // @@protoc_insertion_point(class_scope:RspMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::Any* filed_;
  ::RspInfo* rspinfo_;
  int type_;
  int32_t request_id_;
  bool islast_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RspInfo

// int32 error_id = 1;
inline void RspInfo::clear_error_id() {
  error_id_ = 0;
}
inline int32_t RspInfo::_internal_error_id() const {
  return error_id_;
}
inline int32_t RspInfo::error_id() const {
  // @@protoc_insertion_point(field_get:RspInfo.error_id)
  return _internal_error_id();
}
inline void RspInfo::_internal_set_error_id(int32_t value) {
  
  error_id_ = value;
}
inline void RspInfo::set_error_id(int32_t value) {
  _internal_set_error_id(value);
  // @@protoc_insertion_point(field_set:RspInfo.error_id)
}

// string error_msg = 2;
inline void RspInfo::clear_error_msg() {
  error_msg_.ClearToEmpty();
}
inline const std::string& RspInfo::error_msg() const {
  // @@protoc_insertion_point(field_get:RspInfo.error_msg)
  return _internal_error_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RspInfo::set_error_msg(ArgT0&& arg0, ArgT... args) {
 
 error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RspInfo.error_msg)
}
inline std::string* RspInfo::mutable_error_msg() {
  std::string* _s = _internal_mutable_error_msg();
  // @@protoc_insertion_point(field_mutable:RspInfo.error_msg)
  return _s;
}
inline const std::string& RspInfo::_internal_error_msg() const {
  return error_msg_.Get();
}
inline void RspInfo::_internal_set_error_msg(const std::string& value) {
  
  error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RspInfo::_internal_mutable_error_msg() {
  
  return error_msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RspInfo::release_error_msg() {
  // @@protoc_insertion_point(field_release:RspInfo.error_msg)
  return error_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RspInfo::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    
  } else {
    
  }
  error_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_msg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_msg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RspInfo.error_msg)
}

// -------------------------------------------------------------------

// ReqMsg

// .MsgType type = 1;
inline void ReqMsg::clear_type() {
  type_ = 0;
}
inline ::MsgType ReqMsg::_internal_type() const {
  return static_cast< ::MsgType >(type_);
}
inline ::MsgType ReqMsg::type() const {
  // @@protoc_insertion_point(field_get:ReqMsg.type)
  return _internal_type();
}
inline void ReqMsg::_internal_set_type(::MsgType value) {
  
  type_ = value;
}
inline void ReqMsg::set_type(::MsgType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ReqMsg.type)
}

// int32 request_id = 2;
inline void ReqMsg::clear_request_id() {
  request_id_ = 0;
}
inline int32_t ReqMsg::_internal_request_id() const {
  return request_id_;
}
inline int32_t ReqMsg::request_id() const {
  // @@protoc_insertion_point(field_get:ReqMsg.request_id)
  return _internal_request_id();
}
inline void ReqMsg::_internal_set_request_id(int32_t value) {
  
  request_id_ = value;
}
inline void ReqMsg::set_request_id(int32_t value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:ReqMsg.request_id)
}

// .google.protobuf.Any req = 3;
inline bool ReqMsg::_internal_has_req() const {
  return this != internal_default_instance() && req_ != nullptr;
}
inline bool ReqMsg::has_req() const {
  return _internal_has_req();
}
inline const ::google::protobuf::Any& ReqMsg::_internal_req() const {
  const ::google::protobuf::Any* p = req_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(
      ::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& ReqMsg::req() const {
  // @@protoc_insertion_point(field_get:ReqMsg.req)
  return _internal_req();
}
inline void ReqMsg::unsafe_arena_set_allocated_req(
    ::google::protobuf::Any* req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(req_);
  }
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ReqMsg.req)
}
inline ::google::protobuf::Any* ReqMsg::release_req() {
  
  ::google::protobuf::Any* temp = req_;
  req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::protobuf::Any* ReqMsg::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_release:ReqMsg.req)
  
  ::google::protobuf::Any* temp = req_;
  req_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* ReqMsg::_internal_mutable_req() {
  
  if (req_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArenaForAllocation());
    req_ = p;
  }
  return req_;
}
inline ::google::protobuf::Any* ReqMsg::mutable_req() {
  ::google::protobuf::Any* _msg = _internal_mutable_req();
  // @@protoc_insertion_point(field_mutable:ReqMsg.req)
  return _msg;
}
inline void ReqMsg::set_allocated_req(::google::protobuf::Any* req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(req_);
  }
  if (req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(req));
    if (message_arena != submessage_arena) {
      req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    
  } else {
    
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:ReqMsg.req)
}

// -------------------------------------------------------------------

// RspMsg

// .MsgType type = 1;
inline void RspMsg::clear_type() {
  type_ = 0;
}
inline ::MsgType RspMsg::_internal_type() const {
  return static_cast< ::MsgType >(type_);
}
inline ::MsgType RspMsg::type() const {
  // @@protoc_insertion_point(field_get:RspMsg.type)
  return _internal_type();
}
inline void RspMsg::_internal_set_type(::MsgType value) {
  
  type_ = value;
}
inline void RspMsg::set_type(::MsgType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:RspMsg.type)
}

// .google.protobuf.Any filed = 2;
inline bool RspMsg::_internal_has_filed() const {
  return this != internal_default_instance() && filed_ != nullptr;
}
inline bool RspMsg::has_filed() const {
  return _internal_has_filed();
}
inline const ::google::protobuf::Any& RspMsg::_internal_filed() const {
  const ::google::protobuf::Any* p = filed_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(
      ::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& RspMsg::filed() const {
  // @@protoc_insertion_point(field_get:RspMsg.filed)
  return _internal_filed();
}
inline void RspMsg::unsafe_arena_set_allocated_filed(
    ::google::protobuf::Any* filed) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filed_);
  }
  filed_ = filed;
  if (filed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RspMsg.filed)
}
inline ::google::protobuf::Any* RspMsg::release_filed() {
  
  ::google::protobuf::Any* temp = filed_;
  filed_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::protobuf::Any* RspMsg::unsafe_arena_release_filed() {
  // @@protoc_insertion_point(field_release:RspMsg.filed)
  
  ::google::protobuf::Any* temp = filed_;
  filed_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* RspMsg::_internal_mutable_filed() {
  
  if (filed_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArenaForAllocation());
    filed_ = p;
  }
  return filed_;
}
inline ::google::protobuf::Any* RspMsg::mutable_filed() {
  ::google::protobuf::Any* _msg = _internal_mutable_filed();
  // @@protoc_insertion_point(field_mutable:RspMsg.filed)
  return _msg;
}
inline void RspMsg::set_allocated_filed(::google::protobuf::Any* filed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(filed_);
  }
  if (filed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filed));
    if (message_arena != submessage_arena) {
      filed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filed, submessage_arena);
    }
    
  } else {
    
  }
  filed_ = filed;
  // @@protoc_insertion_point(field_set_allocated:RspMsg.filed)
}

// .RspInfo rspInfo = 3;
inline bool RspMsg::_internal_has_rspinfo() const {
  return this != internal_default_instance() && rspinfo_ != nullptr;
}
inline bool RspMsg::has_rspinfo() const {
  return _internal_has_rspinfo();
}
inline void RspMsg::clear_rspinfo() {
  if (GetArenaForAllocation() == nullptr && rspinfo_ != nullptr) {
    delete rspinfo_;
  }
  rspinfo_ = nullptr;
}
inline const ::RspInfo& RspMsg::_internal_rspinfo() const {
  const ::RspInfo* p = rspinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::RspInfo&>(
      ::_RspInfo_default_instance_);
}
inline const ::RspInfo& RspMsg::rspinfo() const {
  // @@protoc_insertion_point(field_get:RspMsg.rspInfo)
  return _internal_rspinfo();
}
inline void RspMsg::unsafe_arena_set_allocated_rspinfo(
    ::RspInfo* rspinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rspinfo_);
  }
  rspinfo_ = rspinfo;
  if (rspinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RspMsg.rspInfo)
}
inline ::RspInfo* RspMsg::release_rspinfo() {
  
  ::RspInfo* temp = rspinfo_;
  rspinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::RspInfo* RspMsg::unsafe_arena_release_rspinfo() {
  // @@protoc_insertion_point(field_release:RspMsg.rspInfo)
  
  ::RspInfo* temp = rspinfo_;
  rspinfo_ = nullptr;
  return temp;
}
inline ::RspInfo* RspMsg::_internal_mutable_rspinfo() {
  
  if (rspinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::RspInfo>(GetArenaForAllocation());
    rspinfo_ = p;
  }
  return rspinfo_;
}
inline ::RspInfo* RspMsg::mutable_rspinfo() {
  ::RspInfo* _msg = _internal_mutable_rspinfo();
  // @@protoc_insertion_point(field_mutable:RspMsg.rspInfo)
  return _msg;
}
inline void RspMsg::set_allocated_rspinfo(::RspInfo* rspinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rspinfo_;
  }
  if (rspinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::RspInfo>::GetOwningArena(rspinfo);
    if (message_arena != submessage_arena) {
      rspinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rspinfo, submessage_arena);
    }
    
  } else {
    
  }
  rspinfo_ = rspinfo;
  // @@protoc_insertion_point(field_set_allocated:RspMsg.rspInfo)
}

// int32 request_id = 4;
inline void RspMsg::clear_request_id() {
  request_id_ = 0;
}
inline int32_t RspMsg::_internal_request_id() const {
  return request_id_;
}
inline int32_t RspMsg::request_id() const {
  // @@protoc_insertion_point(field_get:RspMsg.request_id)
  return _internal_request_id();
}
inline void RspMsg::_internal_set_request_id(int32_t value) {
  
  request_id_ = value;
}
inline void RspMsg::set_request_id(int32_t value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:RspMsg.request_id)
}

// bool isLast = 5;
inline void RspMsg::clear_islast() {
  islast_ = false;
}
inline bool RspMsg::_internal_islast() const {
  return islast_;
}
inline bool RspMsg::islast() const {
  // @@protoc_insertion_point(field_get:RspMsg.isLast)
  return _internal_islast();
}
inline void RspMsg::_internal_set_islast(bool value) {
  
  islast_ = value;
}
inline void RspMsg::set_islast(bool value) {
  _internal_set_islast(value);
  // @@protoc_insertion_point(field_set:RspMsg.isLast)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::MsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgType>() {
  return ::MsgType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
