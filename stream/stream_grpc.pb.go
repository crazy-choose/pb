// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package stream

import (
	context "context"
	model "github.com/crazy-choose/pb/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CppStreamClient is the client API for CppStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CppStreamClient interface {
	Dual(ctx context.Context, opts ...grpc.CallOption) (CppStream_DualClient, error)
}

type cppStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewCppStreamClient(cc grpc.ClientConnInterface) CppStreamClient {
	return &cppStreamClient{cc}
}

func (c *cppStreamClient) Dual(ctx context.Context, opts ...grpc.CallOption) (CppStream_DualClient, error) {
	stream, err := c.cc.NewStream(ctx, &CppStream_ServiceDesc.Streams[0], "/CppStream/Dual", opts...)
	if err != nil {
		return nil, err
	}
	x := &cppStreamDualClient{stream}
	return x, nil
}

type CppStream_DualClient interface {
	Send(*model.ReqMsg) error
	CloseAndRecv() (*model.RspMsg, error)
	grpc.ClientStream
}

type cppStreamDualClient struct {
	grpc.ClientStream
}

func (x *cppStreamDualClient) Send(m *model.ReqMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cppStreamDualClient) CloseAndRecv() (*model.RspMsg, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(model.RspMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CppStreamServer is the server API for CppStream service.
// All implementations must embed UnimplementedCppStreamServer
// for forward compatibility
type CppStreamServer interface {
	Dual(CppStream_DualServer) error
	mustEmbedUnimplementedCppStreamServer()
}

// UnimplementedCppStreamServer must be embedded to have forward compatible implementations.
type UnimplementedCppStreamServer struct {
}

func (UnimplementedCppStreamServer) Dual(CppStream_DualServer) error {
	return status.Errorf(codes.Unimplemented, "method Dual not implemented")
}
func (UnimplementedCppStreamServer) mustEmbedUnimplementedCppStreamServer() {}

// UnsafeCppStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CppStreamServer will
// result in compilation errors.
type UnsafeCppStreamServer interface {
	mustEmbedUnimplementedCppStreamServer()
}

func RegisterCppStreamServer(s grpc.ServiceRegistrar, srv CppStreamServer) {
	s.RegisterService(&CppStream_ServiceDesc, srv)
}

func _CppStream_Dual_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CppStreamServer).Dual(&cppStreamDualServer{stream})
}

type CppStream_DualServer interface {
	SendAndClose(*model.RspMsg) error
	Recv() (*model.ReqMsg, error)
	grpc.ServerStream
}

type cppStreamDualServer struct {
	grpc.ServerStream
}

func (x *cppStreamDualServer) SendAndClose(m *model.RspMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cppStreamDualServer) Recv() (*model.ReqMsg, error) {
	m := new(model.ReqMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CppStream_ServiceDesc is the grpc.ServiceDesc for CppStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CppStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CppStream",
	HandlerType: (*CppStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Dual",
			Handler:       _CppStream_Dual_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "stream.proto",
}
