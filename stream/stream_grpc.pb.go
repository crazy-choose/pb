// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: stream.proto

package stream

import (
	context "context"
	model "github.com/crazy-choose/pb/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	//
	//以下 分别是 服务端 推送流， 客户端 推送流 ，双向流。
	//客户端推送 服务端 rpc GetStream
	//服务端推送 客户端 rpc PutStream
	//客户端与 服务端 互相 推送 rpc DualStream
	Stream2Cpp(ctx context.Context, in *model.StreamGoData, opts ...grpc.CallOption) (Greeter_Stream2CppClient, error)
	Stream2Go(ctx context.Context, opts ...grpc.CallOption) (Greeter_Stream2GoClient, error)
	DualStream(ctx context.Context, opts ...grpc.CallOption) (Greeter_DualStreamClient, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) Stream2Cpp(ctx context.Context, in *model.StreamGoData, opts ...grpc.CallOption) (Greeter_Stream2CppClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[0], "/Greeter/Stream2Cpp", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterStream2CppClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_Stream2CppClient interface {
	Recv() (*model.StreamCppData, error)
	grpc.ClientStream
}

type greeterStream2CppClient struct {
	grpc.ClientStream
}

func (x *greeterStream2CppClient) Recv() (*model.StreamCppData, error) {
	m := new(model.StreamCppData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) Stream2Go(ctx context.Context, opts ...grpc.CallOption) (Greeter_Stream2GoClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[1], "/Greeter/Stream2Go", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterStream2GoClient{stream}
	return x, nil
}

type Greeter_Stream2GoClient interface {
	Send(*model.StreamGoData) error
	CloseAndRecv() (*model.StreamCppData, error)
	grpc.ClientStream
}

type greeterStream2GoClient struct {
	grpc.ClientStream
}

func (x *greeterStream2GoClient) Send(m *model.StreamGoData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterStream2GoClient) CloseAndRecv() (*model.StreamCppData, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(model.StreamCppData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) DualStream(ctx context.Context, opts ...grpc.CallOption) (Greeter_DualStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[2], "/Greeter/DualStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterDualStreamClient{stream}
	return x, nil
}

type Greeter_DualStreamClient interface {
	Send(*model.StreamGoData) error
	Recv() (*model.StreamCppData, error)
	grpc.ClientStream
}

type greeterDualStreamClient struct {
	grpc.ClientStream
}

func (x *greeterDualStreamClient) Send(m *model.StreamGoData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterDualStreamClient) Recv() (*model.StreamCppData, error) {
	m := new(model.StreamCppData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	//
	//以下 分别是 服务端 推送流， 客户端 推送流 ，双向流。
	//客户端推送 服务端 rpc GetStream
	//服务端推送 客户端 rpc PutStream
	//客户端与 服务端 互相 推送 rpc DualStream
	Stream2Cpp(*model.StreamGoData, Greeter_Stream2CppServer) error
	Stream2Go(Greeter_Stream2GoServer) error
	DualStream(Greeter_DualStreamServer) error
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) Stream2Cpp(*model.StreamGoData, Greeter_Stream2CppServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream2Cpp not implemented")
}
func (UnimplementedGreeterServer) Stream2Go(Greeter_Stream2GoServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream2Go not implemented")
}
func (UnimplementedGreeterServer) DualStream(Greeter_DualStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DualStream not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_Stream2Cpp_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(model.StreamGoData)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).Stream2Cpp(m, &greeterStream2CppServer{stream})
}

type Greeter_Stream2CppServer interface {
	Send(*model.StreamCppData) error
	grpc.ServerStream
}

type greeterStream2CppServer struct {
	grpc.ServerStream
}

func (x *greeterStream2CppServer) Send(m *model.StreamCppData) error {
	return x.ServerStream.SendMsg(m)
}

func _Greeter_Stream2Go_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).Stream2Go(&greeterStream2GoServer{stream})
}

type Greeter_Stream2GoServer interface {
	SendAndClose(*model.StreamCppData) error
	Recv() (*model.StreamGoData, error)
	grpc.ServerStream
}

type greeterStream2GoServer struct {
	grpc.ServerStream
}

func (x *greeterStream2GoServer) SendAndClose(m *model.StreamCppData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterStream2GoServer) Recv() (*model.StreamGoData, error) {
	m := new(model.StreamGoData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Greeter_DualStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).DualStream(&greeterDualStreamServer{stream})
}

type Greeter_DualStreamServer interface {
	Send(*model.StreamCppData) error
	Recv() (*model.StreamGoData, error)
	grpc.ServerStream
}

type greeterDualStreamServer struct {
	grpc.ServerStream
}

func (x *greeterDualStreamServer) Send(m *model.StreamCppData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterDualStreamServer) Recv() (*model.StreamGoData, error) {
	m := new(model.StreamGoData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream2Cpp",
			Handler:       _Greeter_Stream2Cpp_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Stream2Go",
			Handler:       _Greeter_Stream2Go_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DualStream",
			Handler:       _Greeter_DualStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stream.proto",
}
